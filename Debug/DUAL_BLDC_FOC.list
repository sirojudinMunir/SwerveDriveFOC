
DUAL_BLDC_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013cf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  08013e88  08013e88  00023e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014570  08014570  000302d0  2**0
                  CONTENTS
  4 .ARM          00000008  08014570  08014570  00024570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014578  08014578  000302d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014578  08014578  00024578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801457c  0801457c  0002457c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  08014580  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302d0  2**0
                  CONTENTS
 10 .bss          000028b0  200002d0  200002d0  000302d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20002b80  20002b80  000302d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e438  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000480b  00000000  00000000  0004e738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad0  00000000  00000000  00052f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018b8  00000000  00000000  00054a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ed7  00000000  00000000  000562d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000201a9  00000000  00000000  0007c1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6420  00000000  00000000  0009c350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00172770  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008490  00000000  00000000  001727c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013e6c 	.word	0x08013e6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	08013e6c 	.word	0x08013e6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <CAN_filter_config>:
 * 			fungsi untuk konfigurasi filter pada CAN
 * @param	None
 * @retval	None
 */
void CAN_filter_config (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f92:	2301      	movs	r3, #1
 8000f94:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18;
 8000f96:	2312      	movs	r3, #18
 8000f98:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = wheel_addr<<5;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <CAN_filter_config+0x48>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	015b      	lsls	r3, r3, #5
 8000fa4:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = wheel_addr<<5;
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <CAN_filter_config+0x48>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	015b      	lsls	r3, r3, #5
 8000fb0:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <CAN_filter_config+0x4c>)
 8000fc8:	f005 fad4 	bl	8006574 <HAL_CAN_ConfigFilter>
}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000efe 	.word	0x20000efe
 8000fd8:	200004e4 	.word	0x200004e4

08000fdc <CAN_get_wheel>:
 * 			perangkat lain melalui CAN bus
 * @param	None
 * @retval	None
 */
void CAN_get_wheel (void)
{
 8000fdc:	b5b0      	push	{r4, r5, r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
	int16_t data_rx[2];
	float angle_temp, rpm_temp, angle_diff;

	/* menerima data */
	data_rx[0] = (int16_t)(can_rx_buff[1] | can_rx_buff[2]<<8);
 8000fe2:	4b5c      	ldr	r3, [pc, #368]	; (8001154 <CAN_get_wheel+0x178>)
 8000fe4:	785b      	ldrb	r3, [r3, #1]
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b5a      	ldr	r3, [pc, #360]	; (8001154 <CAN_get_wheel+0x178>)
 8000fea:	789b      	ldrb	r3, [r3, #2]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	803b      	strh	r3, [r7, #0]
	data_rx[1] = (int16_t)(can_rx_buff[3] | can_rx_buff[4]<<8);
 8000ff6:	4b57      	ldr	r3, [pc, #348]	; (8001154 <CAN_get_wheel+0x178>)
 8000ff8:	78db      	ldrb	r3, [r3, #3]
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	4b55      	ldr	r3, [pc, #340]	; (8001154 <CAN_get_wheel+0x178>)
 8000ffe:	791b      	ldrb	r3, [r3, #4]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21b      	sxth	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b21b      	sxth	r3, r3
 8001008:	807b      	strh	r3, [r7, #2]
	angle_temp = (float)data_rx[0] / 10.0;
 800100a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001016:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800101a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101e:	edc7 7a03 	vstr	s15, [r7, #12]
	rpm_temp = (float)data_rx[1] / 10.0;
 8001022:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001036:	edc7 7a02 	vstr	s15, [r7, #8]

	/* optimalisasi gerakan */
	while ((angle_sens - angle_temp) > 180)
 800103a:	e007      	b.n	800104c <CAN_get_wheel+0x70>
	{
		angle_temp += 360;
 800103c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001040:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001158 <CAN_get_wheel+0x17c>
 8001044:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001048:	edc7 7a03 	vstr	s15, [r7, #12]
	while ((angle_sens - angle_temp) > 180)
 800104c:	4b43      	ldr	r3, [pc, #268]	; (800115c <CAN_get_wheel+0x180>)
 800104e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f7ff fa78 	bl	8000548 <__aeabi_f2d>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4620      	mov	r0, r4
 800105e:	4629      	mov	r1, r5
 8001060:	f7ff f912 	bl	8000288 <__aeabi_dsub>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <CAN_get_wheel+0x184>)
 8001072:	f7ff fd51 	bl	8000b18 <__aeabi_dcmpgt>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1df      	bne.n	800103c <CAN_get_wheel+0x60>
	}
	while ((angle_sens - angle_temp) < -180)
 800107c:	e007      	b.n	800108e <CAN_get_wheel+0xb2>
	{
		angle_temp -=360;
 800107e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001082:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001158 <CAN_get_wheel+0x17c>
 8001086:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800108a:	edc7 7a03 	vstr	s15, [r7, #12]
	while ((angle_sens - angle_temp) < -180)
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <CAN_get_wheel+0x180>)
 8001090:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f7ff fa57 	bl	8000548 <__aeabi_f2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4620      	mov	r0, r4
 80010a0:	4629      	mov	r1, r5
 80010a2:	f7ff f8f1 	bl	8000288 <__aeabi_dsub>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <CAN_get_wheel+0x188>)
 80010b4:	f7ff fd12 	bl	8000adc <__aeabi_dcmplt>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1df      	bne.n	800107e <CAN_get_wheel+0xa2>
	}
	angle_diff = angle_sens - angle_temp;
 80010be:	4b27      	ldr	r3, [pc, #156]	; (800115c <CAN_get_wheel+0x180>)
 80010c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f7ff fa3f 	bl	8000548 <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4620      	mov	r0, r4
 80010d0:	4629      	mov	r1, r5
 80010d2:	f7ff f8d9 	bl	8000288 <__aeabi_dsub>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd83 	bl	8000be8 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	607b      	str	r3, [r7, #4]
	if (fabs(angle_diff) > 90)
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef0 7ae7 	vabs.f32	s15, s15
 80010ee:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001168 <CAN_get_wheel+0x18c>
 80010f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fa:	dd21      	ble.n	8001140 <CAN_get_wheel+0x164>
	{
		if (angle_diff > 0) data_angle = angle_temp + 180.00;
 80010fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001100:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	dd09      	ble.n	800111e <CAN_get_wheel+0x142>
 800110a:	edd7 7a03 	vldr	s15, [r7, #12]
 800110e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800116c <CAN_get_wheel+0x190>
 8001112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <CAN_get_wheel+0x194>)
 8001118:	edc3 7a00 	vstr	s15, [r3]
 800111c:	e008      	b.n	8001130 <CAN_get_wheel+0x154>
		else data_angle = angle_temp - 180.00;
 800111e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001122:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800116c <CAN_get_wheel+0x190>
 8001126:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <CAN_get_wheel+0x194>)
 800112c:	edc3 7a00 	vstr	s15, [r3]
		data_rpm = -rpm_temp;
 8001130:	edd7 7a02 	vldr	s15, [r7, #8]
 8001134:	eef1 7a67 	vneg.f32	s15, s15
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <CAN_get_wheel+0x198>)
 800113a:	edc3 7a00 	vstr	s15, [r3]
	else
	{
		data_angle = angle_temp;
		data_rpm = rpm_temp;
	}
}
 800113e:	e005      	b.n	800114c <CAN_get_wheel+0x170>
		data_angle = angle_temp;
 8001140:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <CAN_get_wheel+0x194>)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6013      	str	r3, [r2, #0]
		data_rpm = rpm_temp;
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <CAN_get_wheel+0x198>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bdb0      	pop	{r4, r5, r7, pc}
 8001154:	20000ea4 	.word	0x20000ea4
 8001158:	43b40000 	.word	0x43b40000
 800115c:	20000ed0 	.word	0x20000ed0
 8001160:	40668000 	.word	0x40668000
 8001164:	c0668000 	.word	0xc0668000
 8001168:	42b40000 	.word	0x42b40000
 800116c:	43340000 	.word	0x43340000
 8001170:	20000f00 	.word	0x20000f00
 8001174:	20000f04 	.word	0x20000f04

08001178 <CAN_get_zero_offset>:
 * 			perangkat lain melalui CAN bus
 * @param	None
 * @retval	None
 */
void CAN_get_zero_offset (void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
	int16_t offset_temp;

	offset_temp = (int16_t)(can_rx_buff[1] | can_rx_buff[2]<<8);
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <CAN_get_zero_offset+0x40>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	b21a      	sxth	r2, r3
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <CAN_get_zero_offset+0x40>)
 8001186:	789b      	ldrb	r3, [r3, #2]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21b      	sxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	80fb      	strh	r3, [r7, #6]
	zero_offset = (float)offset_temp;
 8001190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119c:	ee17 0a90 	vmov	r0, s15
 80011a0:	f7ff f9d2 	bl	8000548 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4904      	ldr	r1, [pc, #16]	; (80011bc <CAN_get_zero_offset+0x44>)
 80011aa:	e9c1 2300 	strd	r2, r3, [r1]
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000ea4 	.word	0x20000ea4
 80011bc:	20000ee8 	.word	0x20000ee8

080011c0 <CAN_send_wheel>:
 * 			angle 		sudut roda saat ini
 * 			hall_cnt	perubahan pulse hall sensor roda
 * @retval	None
 */
void CAN_send_wheel (uint32_t addr, float angle, int16_t hall_cnt)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80011cc:	460b      	mov	r3, r1
 80011ce:	80fb      	strh	r3, [r7, #6]
	int16_t angle_temp;

	while (angle < 0)
 80011d0:	e007      	b.n	80011e2 <CAN_send_wheel+0x22>
	{
		angle += 360.0;
 80011d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001288 <CAN_send_wheel+0xc8>
 80011da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011de:	edc7 7a02 	vstr	s15, [r7, #8]
	while (angle < 0)
 80011e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	d4f0      	bmi.n	80011d2 <CAN_send_wheel+0x12>
	}
	while (angle > 360)
 80011f0:	e007      	b.n	8001202 <CAN_send_wheel+0x42>
	{
		angle -= 360.0;
 80011f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001288 <CAN_send_wheel+0xc8>
 80011fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011fe:	edc7 7a02 	vstr	s15, [r7, #8]
	while (angle > 360)
 8001202:	edd7 7a02 	vldr	s15, [r7, #8]
 8001206:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001288 <CAN_send_wheel+0xc8>
 800120a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	dcee      	bgt.n	80011f2 <CAN_send_wheel+0x32>
	}
	angle_temp = angle * 10.0;
 8001214:	68b8      	ldr	r0, [r7, #8]
 8001216:	f7ff f997 	bl	8000548 <__aeabi_f2d>
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <CAN_send_wheel+0xcc>)
 8001220:	f7ff f9ea 	bl	80005f8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fc94 	bl	8000b58 <__aeabi_d2iz>
 8001230:	4603      	mov	r3, r0
 8001232:	82fb      	strh	r3, [r7, #22]

	TxHeader.DLC = 5;
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <CAN_send_wheel+0xd0>)
 8001236:	2205      	movs	r2, #5
 8001238:	611a      	str	r2, [r3, #16]
	TxHeader.StdId = addr;
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <CAN_send_wheel+0xd0>)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6013      	str	r3, [r2, #0]
	can_tx_buff[0] = _SET_WHEEL;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <CAN_send_wheel+0xd4>)
 8001242:	22a0      	movs	r2, #160	; 0xa0
 8001244:	701a      	strb	r2, [r3, #0]
	can_tx_buff[1] = angle_temp & 0xFF;
 8001246:	8afb      	ldrh	r3, [r7, #22]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <CAN_send_wheel+0xd4>)
 800124c:	705a      	strb	r2, [r3, #1]
	can_tx_buff[2] = (angle_temp >> 8) & 0xFF;
 800124e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	b21b      	sxth	r3, r3
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <CAN_send_wheel+0xd4>)
 800125a:	709a      	strb	r2, [r3, #2]
	can_tx_buff[3] = hall_cnt & 0xFF;
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <CAN_send_wheel+0xd4>)
 8001262:	70da      	strb	r2, [r3, #3]
	can_tx_buff[4] = (hall_cnt >> 8) & 0xFF;
 8001264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001268:	121b      	asrs	r3, r3, #8
 800126a:	b21b      	sxth	r3, r3
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <CAN_send_wheel+0xd4>)
 8001270:	711a      	strb	r2, [r3, #4]

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, can_tx_buff, &TxMailbox);
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <CAN_send_wheel+0xd8>)
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <CAN_send_wheel+0xd4>)
 8001276:	4906      	ldr	r1, [pc, #24]	; (8001290 <CAN_send_wheel+0xd0>)
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <CAN_send_wheel+0xdc>)
 800127a:	f005 fa9f 	bl	80067bc <HAL_CAN_AddTxMessage>
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	43b40000 	.word	0x43b40000
 800128c:	40240000 	.word	0x40240000
 8001290:	2000081c 	.word	0x2000081c
 8001294:	20000eac 	.word	0x20000eac
 8001298:	20000e28 	.word	0x20000e28
 800129c:	200004e4 	.word	0x200004e4

080012a0 <CAN_send_ok>:
 * 			fungsi ini digunakan mengirim respon ke perangkat lain melalui CAN bus
 * @param	addr	alamat penerima
 * @retval	None
 */
void CAN_send_ok (uint32_t addr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	TxHeader.DLC = 2;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <CAN_send_ok+0x34>)
 80012aa:	2202      	movs	r2, #2
 80012ac:	611a      	str	r2, [r3, #16]
	TxHeader.StdId = addr;
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <CAN_send_ok+0x34>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6013      	str	r3, [r2, #0]
	can_tx_buff[0] = (uint8_t)'O';
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <CAN_send_ok+0x38>)
 80012b6:	224f      	movs	r2, #79	; 0x4f
 80012b8:	701a      	strb	r2, [r3, #0]
	can_tx_buff[1] = (uint8_t)'K';
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <CAN_send_ok+0x38>)
 80012bc:	224b      	movs	r2, #75	; 0x4b
 80012be:	705a      	strb	r2, [r3, #1]

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, can_tx_buff, &TxMailbox);
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <CAN_send_ok+0x3c>)
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <CAN_send_ok+0x38>)
 80012c4:	4903      	ldr	r1, [pc, #12]	; (80012d4 <CAN_send_ok+0x34>)
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <CAN_send_ok+0x40>)
 80012c8:	f005 fa78 	bl	80067bc <HAL_CAN_AddTxMessage>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000081c 	.word	0x2000081c
 80012d8:	20000eac 	.word	0x20000eac
 80012dc:	20000e28 	.word	0x20000e28
 80012e0:	200004e4 	.word	0x200004e4

080012e4 <blink_respone>:
 * 			indikator LED jika perangkat menerima data yang sesuai
 * @param	None
 * @retval	None
 */
void blink_respone (void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	if (led_can_respone != 0)
 80012e8:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <blink_respone+0xe0>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d067      	beq.n	80013c0 <blink_respone+0xdc>
	{
		if (led_blink_flag)
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <blink_respone+0xe4>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d032      	beq.n	800135e <blink_respone+0x7a>
		{
			led_blink_flag = 0;
 80012f8:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <blink_respone+0xe4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
			led_blink_time = HAL_GetTick();
 80012fe:	f004 f9dd 	bl	80056bc <HAL_GetTick>
 8001302:	4603      	mov	r3, r0
 8001304:	4a31      	ldr	r2, [pc, #196]	; (80013cc <blink_respone+0xe8>)
 8001306:	6013      	str	r3, [r2, #0]
			switch (led_can_respone)
 8001308:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <blink_respone+0xe0>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2bc2      	cmp	r3, #194	; 0xc2
 800130e:	d01f      	beq.n	8001350 <blink_respone+0x6c>
 8001310:	2bc2      	cmp	r3, #194	; 0xc2
 8001312:	dc25      	bgt.n	8001360 <blink_respone+0x7c>
 8001314:	2bc1      	cmp	r3, #193	; 0xc1
 8001316:	d014      	beq.n	8001342 <blink_respone+0x5e>
 8001318:	2bc1      	cmp	r3, #193	; 0xc1
 800131a:	dc21      	bgt.n	8001360 <blink_respone+0x7c>
 800131c:	2ba0      	cmp	r3, #160	; 0xa0
 800131e:	d002      	beq.n	8001326 <blink_respone+0x42>
 8001320:	2bb0      	cmp	r3, #176	; 0xb0
 8001322:	d007      	beq.n	8001334 <blink_respone+0x50>
 8001324:	e01c      	b.n	8001360 <blink_respone+0x7c>
			{
			case _SET_WHEEL:
				led_blink_delay = 30;
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <blink_respone+0xec>)
 8001328:	221e      	movs	r2, #30
 800132a:	601a      	str	r2, [r3, #0]
				led_blink_count = 2;
 800132c:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <blink_respone+0xf0>)
 800132e:	2202      	movs	r2, #2
 8001330:	701a      	strb	r2, [r3, #0]
				break;
 8001332:	e015      	b.n	8001360 <blink_respone+0x7c>
			case _SET_ZERO_OFFSET:
				led_blink_delay = 100;
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <blink_respone+0xec>)
 8001336:	2264      	movs	r2, #100	; 0x64
 8001338:	601a      	str	r2, [r3, #0]
				led_blink_count = 4;
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <blink_respone+0xf0>)
 800133c:	2204      	movs	r2, #4
 800133e:	701a      	strb	r2, [r3, #0]
				break;
 8001340:	e00e      	b.n	8001360 <blink_respone+0x7c>
			case _SET_PID_M1:
				led_blink_delay = 150;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <blink_respone+0xec>)
 8001344:	2296      	movs	r2, #150	; 0x96
 8001346:	601a      	str	r2, [r3, #0]
				led_blink_count = 6;
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <blink_respone+0xf0>)
 800134a:	2206      	movs	r2, #6
 800134c:	701a      	strb	r2, [r3, #0]
				break;
 800134e:	e007      	b.n	8001360 <blink_respone+0x7c>
			case _SET_PID_M2:
				led_blink_delay = 150;
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <blink_respone+0xec>)
 8001352:	2296      	movs	r2, #150	; 0x96
 8001354:	601a      	str	r2, [r3, #0]
				led_blink_count = 6;
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <blink_respone+0xf0>)
 8001358:	2206      	movs	r2, #6
 800135a:	701a      	strb	r2, [r3, #0]
				break;
 800135c:	e000      	b.n	8001360 <blink_respone+0x7c>
			}
		}
 800135e:	bf00      	nop
		if (HAL_GetTick() - led_blink_time >= led_blink_delay)
 8001360:	f004 f9ac 	bl	80056bc <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <blink_respone+0xe8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	1ad2      	subs	r2, r2, r3
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <blink_respone+0xec>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d325      	bcc.n	80013c0 <blink_respone+0xdc>
		{
			led_blink_time = HAL_GetTick();
 8001374:	f004 f9a2 	bl	80056bc <HAL_GetTick>
 8001378:	4603      	mov	r3, r0
 800137a:	4a14      	ldr	r2, [pc, #80]	; (80013cc <blink_respone+0xe8>)
 800137c:	6013      	str	r3, [r2, #0]
			if (led_blink_count > 0)
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <blink_respone+0xf0>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d016      	beq.n	80013b4 <blink_respone+0xd0>
			{
				if (led_blink_count % 2 == 0)
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <blink_respone+0xf0>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d104      	bne.n	800139e <blink_respone+0xba>
					LED_BUILTIN_GPIO_Port->BSRR = LED_BUILTIN_Pin<<16;
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <blink_respone+0xf4>)
 8001396:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800139a:	619a      	str	r2, [r3, #24]
 800139c:	e003      	b.n	80013a6 <blink_respone+0xc2>
				else
					LED_BUILTIN_GPIO_Port->BSRR = LED_BUILTIN_Pin;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <blink_respone+0xf4>)
 80013a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a4:	619a      	str	r2, [r3, #24]
				led_blink_count--;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <blink_respone+0xf0>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <blink_respone+0xf0>)
 80013b0:	701a      	strb	r2, [r3, #0]
				led_can_respone = 0;
				led_blink_flag = 1;
			}
		}
	}
}
 80013b2:	e005      	b.n	80013c0 <blink_respone+0xdc>
				led_can_respone = 0;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <blink_respone+0xe0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
				led_blink_flag = 1;
 80013ba:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <blink_respone+0xe4>)
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000eb4 	.word	0x20000eb4
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000e30 	.word	0x20000e30
 80013d0:	20000e34 	.word	0x20000e34
 80013d4:	20000eb5 	.word	0x20000eb5
 80013d8:	40020800 	.word	0x40020800

080013dc <AS5048A_send_data>:
 * 			rw		read/write
 * 			addr	alamat
 * @retval	HAL status
 */
HAL_StatusTypeDef AS5048A_send_data (_Bool par, _Bool rw, uint16_t addr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	460b      	mov	r3, r1
 80013e8:	71bb      	strb	r3, [r7, #6]
 80013ea:	4613      	mov	r3, r2
 80013ec:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t data[2];
	data[0] = (par << 7) | (rw << 6) | (addr >> 8);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	01db      	lsls	r3, r3, #7
 80013f2:	b25a      	sxtb	r2, r3
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	019b      	lsls	r3, r3, #6
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b25a      	sxtb	r2, r3
 80013fe:	88bb      	ldrh	r3, [r7, #4]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	b29b      	uxth	r3, r3
 8001404:	b25b      	sxtb	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b25b      	sxtb	r3, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	733b      	strb	r3, [r7, #12]
	data[1] = addr & 0xff;
 800140e:	88bb      	ldrh	r3, [r7, #4]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	737b      	strb	r3, [r7, #13]
	SPI_CS_GPIO_Port->BSRR = SPI_CS_Pin<<16;
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <AS5048A_send_data+0x5c>)
 8001416:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800141a:	619a      	str	r2, [r3, #24]
	status = HAL_SPI_TransmitReceive_DMA (&hspi1, data, spi_rx, 2);
 800141c:	f107 010c 	add.w	r1, r7, #12
 8001420:	2302      	movs	r3, #2
 8001422:	4a06      	ldr	r2, [pc, #24]	; (800143c <AS5048A_send_data+0x60>)
 8001424:	4806      	ldr	r0, [pc, #24]	; (8001440 <AS5048A_send_data+0x64>)
 8001426:	f008 fdb3 	bl	8009f90 <HAL_SPI_TransmitReceive_DMA>
 800142a:	4603      	mov	r3, r0
 800142c:	73fb      	strb	r3, [r7, #15]
	return status;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40020000 	.word	0x40020000
 800143c:	20000e3c 	.word	0x20000e3c
 8001440:	2000050c 	.word	0x2000050c
 8001444:	00000000 	.word	0x00000000

08001448 <BLDC_init>:
}

//============================================================================================

void BLDC_init (BLDC_HandleTypeDef *hbldc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	hbldc->p_shift = 90;
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4bb2      	ldr	r3, [pc, #712]	; (8001720 <BLDC_init+0x2d8>)
 8001458:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278
	if (hbldc->channel == _BLDC1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d17b      	bne.n	800155c <BLDC_init+0x114>
	{
		dlpf_set_alpha(&hbldc->hdlpf_current_filt[_u], 0.9998);//0.9998
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800146a:	ed9f 0b83 	vldr	d0, [pc, #524]	; 8001678 <BLDC_init+0x230>
 800146e:	4618      	mov	r0, r3
 8001470:	f003 fde7 	bl	8005042 <dlpf_set_alpha>
		dlpf_set_alpha(&hbldc->hdlpf_current_filt[_v], 0.9998);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800147a:	ed9f 0b7f 	vldr	d0, [pc, #508]	; 8001678 <BLDC_init+0x230>
 800147e:	4618      	mov	r0, r3
 8001480:	f003 fddf 	bl	8005042 <dlpf_set_alpha>
		dlpf_set_alpha(&hbldc->hdlpf_current_filt[_w], 0.9998);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800148a:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 8001678 <BLDC_init+0x230>
 800148e:	4618      	mov	r0, r3
 8001490:	f003 fdd7 	bl	8005042 <dlpf_set_alpha>
		dlpf_set_alpha(&hbldc->hdlpf_cmps, 0.002);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800149a:	ed9f 0b79 	vldr	d0, [pc, #484]	; 8001680 <BLDC_init+0x238>
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 fdcf 	bl	8005042 <dlpf_set_alpha>
		PID_set_konstanta(&hbldc->hpid_id, 0.02, 0.0001, 0);//0.02, 0.0001, 0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3308      	adds	r3, #8
 80014a8:	ed9f 2b77 	vldr	d2, [pc, #476]	; 8001688 <BLDC_init+0x240>
 80014ac:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8001690 <BLDC_init+0x248>
 80014b0:	ed9f 0b79 	vldr	d0, [pc, #484]	; 8001698 <BLDC_init+0x250>
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 ff0d 	bl	80052d4 <PID_set_konstanta>
		PID_set_max_value(&hbldc->hpid_id, 4.0, 40000.0);//4 4000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3308      	adds	r3, #8
 80014be:	ed9f 1b78 	vldr	d1, [pc, #480]	; 80016a0 <BLDC_init+0x258>
 80014c2:	ed9f 0b79 	vldr	d0, [pc, #484]	; 80016a8 <BLDC_init+0x260>
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 ff23 	bl	8005312 <PID_set_max_value>
		PID_set_konstanta(&hbldc->hpid_iq, 0.02, 0.0002, 0);//0.02, 0.0005, 0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3378      	adds	r3, #120	; 0x78
 80014d0:	ed9f 2b6d 	vldr	d2, [pc, #436]	; 8001688 <BLDC_init+0x240>
 80014d4:	ed9f 1b76 	vldr	d1, [pc, #472]	; 80016b0 <BLDC_init+0x268>
 80014d8:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 8001698 <BLDC_init+0x250>
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fef9 	bl	80052d4 <PID_set_konstanta>
		PID_set_max_value(&hbldc->hpid_iq, 4.0, 20000.0);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3378      	adds	r3, #120	; 0x78
 80014e6:	ed9f 1b74 	vldr	d1, [pc, #464]	; 80016b8 <BLDC_init+0x270>
 80014ea:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 80016a8 <BLDC_init+0x260>
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 ff0f 	bl	8005312 <PID_set_max_value>
		PID_set_konstanta(&hbldc->hpid_omega, 0.002, 0.0000001, 0);//0.002, 0.0000001, 0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	33e8      	adds	r3, #232	; 0xe8
 80014f8:	ed9f 2b63 	vldr	d2, [pc, #396]	; 8001688 <BLDC_init+0x240>
 80014fc:	ed9f 1b70 	vldr	d1, [pc, #448]	; 80016c0 <BLDC_init+0x278>
 8001500:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8001680 <BLDC_init+0x238>
 8001504:	4618      	mov	r0, r3
 8001506:	f003 fee5 	bl	80052d4 <PID_set_konstanta>
		PID_set_max_value(&hbldc->hpid_omega, 4.0, 40000000);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	33e8      	adds	r3, #232	; 0xe8
 800150e:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 80016c8 <BLDC_init+0x280>
 8001512:	ed9f 0b65 	vldr	d0, [pc, #404]	; 80016a8 <BLDC_init+0x260>
 8001516:	4618      	mov	r0, r3
 8001518:	f003 fefb 	bl	8005312 <PID_set_max_value>
		//M1+KI0.00000001

		HAL_TIMEx_HallSensor_Start_IT (&htim5);
 800151c:	4881      	ldr	r0, [pc, #516]	; (8001724 <BLDC_init+0x2dc>)
 800151e:	f00a fa45 	bl	800b9ac <HAL_TIMEx_HallSensor_Start_IT>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001522:	2100      	movs	r1, #0
 8001524:	4880      	ldr	r0, [pc, #512]	; (8001728 <BLDC_init+0x2e0>)
 8001526:	f009 fa93 	bl	800aa50 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800152a:	2104      	movs	r1, #4
 800152c:	487e      	ldr	r0, [pc, #504]	; (8001728 <BLDC_init+0x2e0>)
 800152e:	f009 fa8f 	bl	800aa50 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001532:	2108      	movs	r1, #8
 8001534:	487c      	ldr	r0, [pc, #496]	; (8001728 <BLDC_init+0x2e0>)
 8001536:	f009 fa8b 	bl	800aa50 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800153a:	210c      	movs	r1, #12
 800153c:	487a      	ldr	r0, [pc, #488]	; (8001728 <BLDC_init+0x2e0>)
 800153e:	f009 fa87 	bl	800aa50 <HAL_TIM_PWM_Start>
		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001542:	487a      	ldr	r0, [pc, #488]	; (800172c <BLDC_init+0x2e4>)
 8001544:	f004 fc7a 	bl	8005e3c <HAL_ADCEx_InjectedStart_IT>
		M2_EN_U_GPIO_Port->BSRR = M2_EN_U_Pin;
 8001548:	4b79      	ldr	r3, [pc, #484]	; (8001730 <BLDC_init+0x2e8>)
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	619a      	str	r2, [r3, #24]
		M2_EN_V_GPIO_Port->BSRR = M2_EN_V_Pin;
 800154e:	4b79      	ldr	r3, [pc, #484]	; (8001734 <BLDC_init+0x2ec>)
 8001550:	2201      	movs	r2, #1
 8001552:	619a      	str	r2, [r3, #24]
		M2_EN_W_GPIO_Port->BSRR = M2_EN_W_Pin;
 8001554:	4b77      	ldr	r3, [pc, #476]	; (8001734 <BLDC_init+0x2ec>)
 8001556:	2202      	movs	r2, #2
 8001558:	619a      	str	r2, [r3, #24]
 800155a:	e078      	b.n	800164e <BLDC_init+0x206>
	}
	else if (hbldc->channel == _BLDC2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d174      	bne.n	800164e <BLDC_init+0x206>
		PID_set_konstanta(&hbldc->hpid_iq, 0.0005, 0.000005, 0);//0.00004
		PID_set_max_value(&hbldc->hpid_iq, 3.0, 400000);
		PID_set_konstanta(&hbldc->hpid_theta, 25, 0, 1.2);
		PID_set_max_value(&hbldc->hpid_theta, 3.0, 0);
#else
		dlpf_set_alpha(&hbldc->hdlpf_current_filt[_u], 0.99998);//0.99925
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800156a:	ed9f 0b59 	vldr	d0, [pc, #356]	; 80016d0 <BLDC_init+0x288>
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fd67 	bl	8005042 <dlpf_set_alpha>
		dlpf_set_alpha(&hbldc->hdlpf_current_filt[_v], 0.99998);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800157a:	ed9f 0b55 	vldr	d0, [pc, #340]	; 80016d0 <BLDC_init+0x288>
 800157e:	4618      	mov	r0, r3
 8001580:	f003 fd5f 	bl	8005042 <dlpf_set_alpha>
		dlpf_set_alpha(&hbldc->hdlpf_current_filt[_w], 0.99998);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800158a:	ed9f 0b51 	vldr	d0, [pc, #324]	; 80016d0 <BLDC_init+0x288>
 800158e:	4618      	mov	r0, r3
 8001590:	f003 fd57 	bl	8005042 <dlpf_set_alpha>
		PID_set_konstanta(&hbldc->hpid_id, 0.001, 0.00002, 0);//0.001, 0.000025, 0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3308      	adds	r3, #8
 8001598:	ed9f 2b3b 	vldr	d2, [pc, #236]	; 8001688 <BLDC_init+0x240>
 800159c:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 80016d8 <BLDC_init+0x290>
 80015a0:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 80016e0 <BLDC_init+0x298>
 80015a4:	4618      	mov	r0, r3
 80015a6:	f003 fe95 	bl	80052d4 <PID_set_konstanta>
		PID_set_max_value(&hbldc->hpid_id, 3.8, 200000);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3308      	adds	r3, #8
 80015ae:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 80016e8 <BLDC_init+0x2a0>
 80015b2:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 80016f0 <BLDC_init+0x2a8>
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 feab 	bl	8005312 <PID_set_max_value>
		PID_set_konstanta(&hbldc->hpid_iq, 0.001, 0.00004, 0);//0.001, 0.00002, 0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3378      	adds	r3, #120	; 0x78
 80015c0:	ed9f 2b31 	vldr	d2, [pc, #196]	; 8001688 <BLDC_init+0x240>
 80015c4:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 80016f8 <BLDC_init+0x2b0>
 80015c8:	ed9f 0b45 	vldr	d0, [pc, #276]	; 80016e0 <BLDC_init+0x298>
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 fe81 	bl	80052d4 <PID_set_konstanta>
		PID_set_max_value(&hbldc->hpid_iq, 3.8, 100000);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3378      	adds	r3, #120	; 0x78
 80015d6:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 8001700 <BLDC_init+0x2b8>
 80015da:	ed9f 0b45 	vldr	d0, [pc, #276]	; 80016f0 <BLDC_init+0x2a8>
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 fe97 	bl	8005312 <PID_set_max_value>
		PID_set_konstanta(&hbldc->hpid_theta, 1.2, 0, 0.0001);//1.2, 0, 0.007
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80015ea:	ed9f 2b29 	vldr	d2, [pc, #164]	; 8001690 <BLDC_init+0x248>
 80015ee:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001688 <BLDC_init+0x240>
 80015f2:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001708 <BLDC_init+0x2c0>
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 fe6c 	bl	80052d4 <PID_set_konstanta>
		PID_set_max_value(&hbldc->hpid_theta, 9.0, 0);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001602:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001688 <BLDC_init+0x240>
 8001606:	ed9f 0b42 	vldr	d0, [pc, #264]	; 8001710 <BLDC_init+0x2c8>
 800160a:	4618      	mov	r0, r3
 800160c:	f003 fe81 	bl	8005312 <PID_set_max_value>
#endif

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001610:	2100      	movs	r1, #0
 8001612:	4849      	ldr	r0, [pc, #292]	; (8001738 <BLDC_init+0x2f0>)
 8001614:	f009 fa1c 	bl	800aa50 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001618:	2104      	movs	r1, #4
 800161a:	4847      	ldr	r0, [pc, #284]	; (8001738 <BLDC_init+0x2f0>)
 800161c:	f009 fa18 	bl	800aa50 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001620:	2108      	movs	r1, #8
 8001622:	4845      	ldr	r0, [pc, #276]	; (8001738 <BLDC_init+0x2f0>)
 8001624:	f009 fa14 	bl	800aa50 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001628:	210c      	movs	r1, #12
 800162a:	4843      	ldr	r0, [pc, #268]	; (8001738 <BLDC_init+0x2f0>)
 800162c:	f009 fa10 	bl	800aa50 <HAL_TIM_PWM_Start>
		HAL_ADCEx_InjectedStart_IT(&hadc3);
 8001630:	4842      	ldr	r0, [pc, #264]	; (800173c <BLDC_init+0x2f4>)
 8001632:	f004 fc03 	bl	8005e3c <HAL_ADCEx_InjectedStart_IT>
		M1_EN_U_GPIO_Port->BSRR = M1_EN_U_Pin;
 8001636:	4b3f      	ldr	r3, [pc, #252]	; (8001734 <BLDC_init+0x2ec>)
 8001638:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163c:	619a      	str	r2, [r3, #24]
		M1_EN_V_GPIO_Port->BSRR = M1_EN_V_Pin;
 800163e:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <BLDC_init+0x2ec>)
 8001640:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001644:	619a      	str	r2, [r3, #24]
		M1_EN_W_GPIO_Port->BSRR = M1_EN_W_Pin;
 8001646:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <BLDC_init+0x2ec>)
 8001648:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800164c:	619a      	str	r2, [r3, #24]
	}
	dlpf_set_alpha(&i_test[0], 0.01);
 800164e:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8001718 <BLDC_init+0x2d0>
 8001652:	483b      	ldr	r0, [pc, #236]	; (8001740 <BLDC_init+0x2f8>)
 8001654:	f003 fcf5 	bl	8005042 <dlpf_set_alpha>
	dlpf_set_alpha(&i_test[1], 0.01);
 8001658:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8001718 <BLDC_init+0x2d0>
 800165c:	4839      	ldr	r0, [pc, #228]	; (8001744 <BLDC_init+0x2fc>)
 800165e:	f003 fcf0 	bl	8005042 <dlpf_set_alpha>
	dlpf_set_alpha(&i_test[2], 0.01);
 8001662:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 8001718 <BLDC_init+0x2d0>
 8001666:	4838      	ldr	r0, [pc, #224]	; (8001748 <BLDC_init+0x300>)
 8001668:	f003 fceb 	bl	8005042 <dlpf_set_alpha>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	f3af 8000 	nop.w
 8001678:	91d14e3c 	.word	0x91d14e3c
 800167c:	3feffe5c 	.word	0x3feffe5c
 8001680:	d2f1a9fc 	.word	0xd2f1a9fc
 8001684:	3f60624d 	.word	0x3f60624d
	...
 8001690:	eb1c432d 	.word	0xeb1c432d
 8001694:	3f1a36e2 	.word	0x3f1a36e2
 8001698:	47ae147b 	.word	0x47ae147b
 800169c:	3f947ae1 	.word	0x3f947ae1
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40e38800 	.word	0x40e38800
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40100000 	.word	0x40100000
 80016b0:	eb1c432d 	.word	0xeb1c432d
 80016b4:	3f2a36e2 	.word	0x3f2a36e2
 80016b8:	00000000 	.word	0x00000000
 80016bc:	40d38800 	.word	0x40d38800
 80016c0:	9abcaf48 	.word	0x9abcaf48
 80016c4:	3e7ad7f2 	.word	0x3e7ad7f2
 80016c8:	00000000 	.word	0x00000000
 80016cc:	418312d0 	.word	0x418312d0
 80016d0:	0e94ee39 	.word	0x0e94ee39
 80016d4:	3fefffd6 	.word	0x3fefffd6
 80016d8:	88e368f1 	.word	0x88e368f1
 80016dc:	3ef4f8b5 	.word	0x3ef4f8b5
 80016e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80016e4:	3f50624d 	.word	0x3f50624d
 80016e8:	00000000 	.word	0x00000000
 80016ec:	41086a00 	.word	0x41086a00
 80016f0:	66666666 	.word	0x66666666
 80016f4:	400e6666 	.word	0x400e6666
 80016f8:	88e368f1 	.word	0x88e368f1
 80016fc:	3f04f8b5 	.word	0x3f04f8b5
 8001700:	00000000 	.word	0x00000000
 8001704:	40f86a00 	.word	0x40f86a00
 8001708:	33333333 	.word	0x33333333
 800170c:	3ff33333 	.word	0x3ff33333
 8001710:	00000000 	.word	0x00000000
 8001714:	40220000 	.word	0x40220000
 8001718:	47ae147b 	.word	0x47ae147b
 800171c:	3f847ae1 	.word	0x3f847ae1
 8001720:	40568000 	.word	0x40568000
 8001724:	20000744 	.word	0x20000744
 8001728:	200007d4 	.word	0x200007d4
 800172c:	20000334 	.word	0x20000334
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400
 8001738:	20000624 	.word	0x20000624
 800173c:	2000037c 	.word	0x2000037c
 8001740:	20000df0 	.word	0x20000df0
 8001744:	20000e00 	.word	0x20000e00
 8001748:	20000e10 	.word	0x20000e10
 800174c:	00000000 	.word	0x00000000

08001750 <BLDC_get_current>:
	dlpf_get_result (&hbldc->hdlpf_current_filt[_v], hbldc->raw_current[_v]);
	dlpf_get_result (&hbldc->hdlpf_current_filt[_w], hbldc->raw_current[_w]);
}

void BLDC_get_current (BLDC_HandleTypeDef *hbldc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	float iu, iv, iw;
	uint32_t current_pwm[3];

	if (hbldc->channel == _BLDC1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d109      	bne.n	8001774 <BLDC_get_current+0x24>
	{
		current_pwm[_u] = TIM8->CCR1;
 8001760:	4b77      	ldr	r3, [pc, #476]	; (8001940 <BLDC_get_current+0x1f0>)
 8001762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001764:	60bb      	str	r3, [r7, #8]
		current_pwm[_v] = TIM8->CCR2;
 8001766:	4b76      	ldr	r3, [pc, #472]	; (8001940 <BLDC_get_current+0x1f0>)
 8001768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176a:	60fb      	str	r3, [r7, #12]
		current_pwm[_w] = TIM8->CCR3;
 800176c:	4b74      	ldr	r3, [pc, #464]	; (8001940 <BLDC_get_current+0x1f0>)
 800176e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	e00c      	b.n	800178e <BLDC_get_current+0x3e>
	}
	else if (hbldc->channel == _BLDC2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d108      	bne.n	800178e <BLDC_get_current+0x3e>
	{
		current_pwm[_u] = TIM1->CCR1;
 800177c:	4b71      	ldr	r3, [pc, #452]	; (8001944 <BLDC_get_current+0x1f4>)
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	60bb      	str	r3, [r7, #8]
		current_pwm[_v] = TIM1->CCR2;
 8001782:	4b70      	ldr	r3, [pc, #448]	; (8001944 <BLDC_get_current+0x1f4>)
 8001784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001786:	60fb      	str	r3, [r7, #12]
		current_pwm[_w] = TIM1->CCR3;
 8001788:	4b6e      	ldr	r3, [pc, #440]	; (8001944 <BLDC_get_current+0x1f4>)
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	613b      	str	r3, [r7, #16]
	}
	iu = (double)hbldc->adc_buff[0]*0.0040293040293;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe feb5 	bl	8000504 <__aeabi_ui2d>
 800179a:	a367      	add	r3, pc, #412	; (adr r3, 8001938 <BLDC_get_current+0x1e8>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe ff2a 	bl	80005f8 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff fa1c 	bl	8000be8 <__aeabi_d2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	61fb      	str	r3, [r7, #28]
	iv = (double)hbldc->adc_buff[1]*0.0040293040293;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fea2 	bl	8000504 <__aeabi_ui2d>
 80017c0:	a35d      	add	r3, pc, #372	; (adr r3, 8001938 <BLDC_get_current+0x1e8>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7fe ff17 	bl	80005f8 <__aeabi_dmul>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff fa09 	bl	8000be8 <__aeabi_d2f>
 80017d6:	4603      	mov	r3, r0
 80017d8:	61bb      	str	r3, [r7, #24]
	iw = (double)hbldc->adc_buff[2]*0.0040293040293;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fe8f 	bl	8000504 <__aeabi_ui2d>
 80017e6:	a354      	add	r3, pc, #336	; (adr r3, 8001938 <BLDC_get_current+0x1e8>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f7fe ff04 	bl	80005f8 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7ff f9f6 	bl	8000be8 <__aeabi_d2f>
 80017fc:	4603      	mov	r3, r0
 80017fe:	617b      	str	r3, [r7, #20]

	if (current_pwm[_u] == hbldc->t_pwm)
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8001808:	429a      	cmp	r2, r3
 800180a:	d12b      	bne.n	8001864 <BLDC_get_current+0x114>
	{
		hbldc->raw_current[_u] = iv+iw;
 800180c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001810:	edd7 7a05 	vldr	s15, [r7, #20]
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	ee17 0a90 	vmov	r0, s15
 800181c:	f7fe fe94 	bl	8000548 <__aeabi_f2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
		hbldc->raw_current[_v] = -iv;
 800182a:	edd7 7a06 	vldr	s15, [r7, #24]
 800182e:	eef1 7a67 	vneg.f32	s15, s15
 8001832:	ee17 3a90 	vmov	r3, s15
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe86 	bl	8000548 <__aeabi_f2d>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
		hbldc->raw_current[_w] = -iw;
 8001846:	edd7 7a05 	vldr	s15, [r7, #20]
 800184a:	eef1 7a67 	vneg.f32	s15, s15
 800184e:	ee17 3a90 	vmov	r3, s15
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe78 	bl	8000548 <__aeabi_f2d>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
	{
		hbldc->raw_current[_u] = -iu;
		hbldc->raw_current[_v] = -iv;
		hbldc->raw_current[_w] = iu+iv;
	}
}
 8001862:	e062      	b.n	800192a <BLDC_get_current+0x1da>
	else if (current_pwm[_v] == hbldc->t_pwm)
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800186c:	429a      	cmp	r2, r3
 800186e:	d12b      	bne.n	80018c8 <BLDC_get_current+0x178>
		hbldc->raw_current[_u] = -iu;
 8001870:	edd7 7a07 	vldr	s15, [r7, #28]
 8001874:	eef1 7a67 	vneg.f32	s15, s15
 8001878:	ee17 3a90 	vmov	r3, s15
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe63 	bl	8000548 <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
		hbldc->raw_current[_v] = iu+iw;
 800188c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001890:	edd7 7a05 	vldr	s15, [r7, #20]
 8001894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001898:	ee17 0a90 	vmov	r0, s15
 800189c:	f7fe fe54 	bl	8000548 <__aeabi_f2d>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
		hbldc->raw_current[_w] = -iw;
 80018aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80018ae:	eef1 7a67 	vneg.f32	s15, s15
 80018b2:	ee17 3a90 	vmov	r3, s15
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe46 	bl	8000548 <__aeabi_f2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
}
 80018c6:	e030      	b.n	800192a <BLDC_get_current+0x1da>
	else if (current_pwm[_w] == hbldc->t_pwm)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d12a      	bne.n	800192a <BLDC_get_current+0x1da>
		hbldc->raw_current[_u] = -iu;
 80018d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80018d8:	eef1 7a67 	vneg.f32	s15, s15
 80018dc:	ee17 3a90 	vmov	r3, s15
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe31 	bl	8000548 <__aeabi_f2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
		hbldc->raw_current[_v] = -iv;
 80018f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80018f4:	eef1 7a67 	vneg.f32	s15, s15
 80018f8:	ee17 3a90 	vmov	r3, s15
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe23 	bl	8000548 <__aeabi_f2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
		hbldc->raw_current[_w] = iu+iv;
 800190c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001910:	edd7 7a06 	vldr	s15, [r7, #24]
 8001914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001918:	ee17 0a90 	vmov	r0, s15
 800191c:	f7fe fe14 	bl	8000548 <__aeabi_f2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
}
 800192a:	bf00      	nop
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	f3af 8000 	nop.w
 8001938:	1080f5eb 	.word	0x1080f5eb
 800193c:	3f708108 	.word	0x3f708108
 8001940:	40010400 	.word	0x40010400
 8001944:	40010000 	.word	0x40010000

08001948 <BLDC_get_current_filter>:

void BLDC_get_current_filter (BLDC_HandleTypeDef *hbldc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	dlpf_get_result (&hbldc->hdlpf_current_filt[_u], hbldc->raw_current[_u]);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	ed93 7b94 	vldr	d7, [r3, #592]	; 0x250
 800195c:	eeb0 0a47 	vmov.f32	s0, s14
 8001960:	eef0 0a67 	vmov.f32	s1, s15
 8001964:	4610      	mov	r0, r2
 8001966:	f003 fb7d 	bl	8005064 <dlpf_get_result>
	dlpf_get_result (&hbldc->hdlpf_current_filt[_v], hbldc->raw_current[_v]);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	ed93 7b96 	vldr	d7, [r3, #600]	; 0x258
 8001976:	eeb0 0a47 	vmov.f32	s0, s14
 800197a:	eef0 0a67 	vmov.f32	s1, s15
 800197e:	4610      	mov	r0, r2
 8001980:	f003 fb70 	bl	8005064 <dlpf_get_result>
	dlpf_get_result (&hbldc->hdlpf_current_filt[_w], hbldc->raw_current[_w]);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	ed93 7b98 	vldr	d7, [r3, #608]	; 0x260
 8001990:	eeb0 0a47 	vmov.f32	s0, s14
 8001994:	eef0 0a67 	vmov.f32	s1, s15
 8001998:	4610      	mov	r0, r2
 800199a:	f003 fb63 	bl	8005064 <dlpf_get_result>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <BLDC_clark_park_trans>:

//============================================================================================

void BLDC_clark_park_trans (BLDC_HandleTypeDef *hbldc, float deg, float ia, float ib, float ic)
{
 80019a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019ac:	b088      	sub	sp, #32
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6178      	str	r0, [r7, #20]
 80019b2:	ed87 0a04 	vstr	s0, [r7, #16]
 80019b6:	edc7 0a03 	vstr	s1, [r7, #12]
 80019ba:	ed87 1a02 	vstr	s2, [r7, #8]
 80019be:	edc7 1a01 	vstr	s3, [r7, #4]
	float alpha, beta;
	deg *= DEG_2_RAD;
 80019c2:	6938      	ldr	r0, [r7, #16]
 80019c4:	f7fe fdc0 	bl	8000548 <__aeabi_f2d>
 80019c8:	a360      	add	r3, pc, #384	; (adr r3, 8001b4c <BLDC_clark_park_trans+0x1a4>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	f7fe fe13 	bl	80005f8 <__aeabi_dmul>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff f905 	bl	8000be8 <__aeabi_d2f>
 80019de:	4603      	mov	r3, r0
 80019e0:	613b      	str	r3, [r7, #16]

	alpha = ia - 0.5 * (ib + ic);
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f7fe fdb0 	bl	8000548 <__aeabi_f2d>
 80019e8:	4604      	mov	r4, r0
 80019ea:	460d      	mov	r5, r1
 80019ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80019f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f8:	ee17 0a90 	vmov	r0, s15
 80019fc:	f7fe fda4 	bl	8000548 <__aeabi_f2d>
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <BLDC_clark_park_trans+0x1a0>)
 8001a06:	f7fe fdf7 	bl	80005f8 <__aeabi_dmul>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4620      	mov	r0, r4
 8001a10:	4629      	mov	r1, r5
 8001a12:	f7fe fc39 	bl	8000288 <__aeabi_dsub>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f8e3 	bl	8000be8 <__aeabi_d2f>
 8001a22:	4603      	mov	r3, r0
 8001a24:	61fb      	str	r3, [r7, #28]
	beta = 0.8660254037844386 * (ib - ic);
 8001a26:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a32:	ee17 0a90 	vmov	r0, s15
 8001a36:	f7fe fd87 	bl	8000548 <__aeabi_f2d>
 8001a3a:	a341      	add	r3, pc, #260	; (adr r3, 8001b40 <BLDC_clark_park_trans+0x198>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fdda 	bl	80005f8 <__aeabi_dmul>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff f8cc 	bl	8000be8 <__aeabi_d2f>
 8001a50:	4603      	mov	r3, r0
 8001a52:	61bb      	str	r3, [r7, #24]

	hbldc->id_result = cos (deg) * alpha + sin (deg) * beta;
 8001a54:	6938      	ldr	r0, [r7, #16]
 8001a56:	f7fe fd77 	bl	8000548 <__aeabi_f2d>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	ec43 2b10 	vmov	d0, r2, r3
 8001a62:	f011 f965 	bl	8012d30 <cos>
 8001a66:	ec55 4b10 	vmov	r4, r5, d0
 8001a6a:	69f8      	ldr	r0, [r7, #28]
 8001a6c:	f7fe fd6c 	bl	8000548 <__aeabi_f2d>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4620      	mov	r0, r4
 8001a76:	4629      	mov	r1, r5
 8001a78:	f7fe fdbe 	bl	80005f8 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4614      	mov	r4, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	6938      	ldr	r0, [r7, #16]
 8001a86:	f7fe fd5f 	bl	8000548 <__aeabi_f2d>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	ec43 2b10 	vmov	d0, r2, r3
 8001a92:	f011 f9a1 	bl	8012dd8 <sin>
 8001a96:	ec59 8b10 	vmov	r8, r9, d0
 8001a9a:	69b8      	ldr	r0, [r7, #24]
 8001a9c:	f7fe fd54 	bl	8000548 <__aeabi_f2d>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4640      	mov	r0, r8
 8001aa6:	4649      	mov	r1, r9
 8001aa8:	f7fe fda6 	bl	80005f8 <__aeabi_dmul>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	f7fe fbea 	bl	800028c <__adddf3>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	6979      	ldr	r1, [r7, #20]
 8001abe:	e9c1 239a 	strd	r2, r3, [r1, #616]	; 0x268
	hbldc->iq_result = cos (deg) * beta - sin (deg) * alpha;
 8001ac2:	6938      	ldr	r0, [r7, #16]
 8001ac4:	f7fe fd40 	bl	8000548 <__aeabi_f2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	ec43 2b10 	vmov	d0, r2, r3
 8001ad0:	f011 f92e 	bl	8012d30 <cos>
 8001ad4:	ec55 4b10 	vmov	r4, r5, d0
 8001ad8:	69b8      	ldr	r0, [r7, #24]
 8001ada:	f7fe fd35 	bl	8000548 <__aeabi_f2d>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	f7fe fd87 	bl	80005f8 <__aeabi_dmul>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4614      	mov	r4, r2
 8001af0:	461d      	mov	r5, r3
 8001af2:	6938      	ldr	r0, [r7, #16]
 8001af4:	f7fe fd28 	bl	8000548 <__aeabi_f2d>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	ec43 2b10 	vmov	d0, r2, r3
 8001b00:	f011 f96a 	bl	8012dd8 <sin>
 8001b04:	ec59 8b10 	vmov	r8, r9, d0
 8001b08:	69f8      	ldr	r0, [r7, #28]
 8001b0a:	f7fe fd1d 	bl	8000548 <__aeabi_f2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4640      	mov	r0, r8
 8001b14:	4649      	mov	r1, r9
 8001b16:	f7fe fd6f 	bl	80005f8 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4620      	mov	r0, r4
 8001b20:	4629      	mov	r1, r5
 8001b22:	f7fe fbb1 	bl	8000288 <__aeabi_dsub>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	6979      	ldr	r1, [r7, #20]
 8001b2c:	e9c1 239c 	strd	r2, r3, [r1, #624]	; 0x270
}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b3a:	bf00      	nop
 8001b3c:	f3af 8000 	nop.w
 8001b40:	e8584caa 	.word	0xe8584caa
 8001b44:	3febb67a 	.word	0x3febb67a
 8001b48:	3fe00000 	.word	0x3fe00000
 8001b4c:	a2529983 	.word	0xa2529983
 8001b50:	3f91df46 	.word	0x3f91df46
 8001b54:	00000000 	.word	0x00000000

08001b58 <BLDC_inv_clark_park_trans>:

//============================================================================================

void BLDC_inv_clark_park_trans (BLDC_HandleTypeDef *hbldc, float deg, float d, float q)
{
 8001b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b66:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b6a:	ed87 1a00 	vstr	s2, [r7]
	float alpha, beta;
	deg *= DEG_2_RAD;
 8001b6e:	68b8      	ldr	r0, [r7, #8]
 8001b70:	f7fe fcea 	bl	8000548 <__aeabi_f2d>
 8001b74:	a369      	add	r3, pc, #420	; (adr r3, 8001d1c <BLDC_inv_clark_park_trans+0x1c4>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	f7fe fd3d 	bl	80005f8 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff f82f 	bl	8000be8 <__aeabi_d2f>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	60bb      	str	r3, [r7, #8]

	alpha = d * cos (deg) - q * sin (deg);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7fe fcda 	bl	8000548 <__aeabi_f2d>
 8001b94:	4604      	mov	r4, r0
 8001b96:	460d      	mov	r5, r1
 8001b98:	68b8      	ldr	r0, [r7, #8]
 8001b9a:	f7fe fcd5 	bl	8000548 <__aeabi_f2d>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	ec43 2b10 	vmov	d0, r2, r3
 8001ba6:	f011 f8c3 	bl	8012d30 <cos>
 8001baa:	ec53 2b10 	vmov	r2, r3, d0
 8001bae:	4620      	mov	r0, r4
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	f7fe fd21 	bl	80005f8 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4690      	mov	r8, r2
 8001bbc:	4699      	mov	r9, r3
 8001bbe:	6838      	ldr	r0, [r7, #0]
 8001bc0:	f7fe fcc2 	bl	8000548 <__aeabi_f2d>
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	460d      	mov	r5, r1
 8001bc8:	68b8      	ldr	r0, [r7, #8]
 8001bca:	f7fe fcbd 	bl	8000548 <__aeabi_f2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	ec43 2b10 	vmov	d0, r2, r3
 8001bd6:	f011 f8ff 	bl	8012dd8 <sin>
 8001bda:	ec53 2b10 	vmov	r2, r3, d0
 8001bde:	4620      	mov	r0, r4
 8001be0:	4629      	mov	r1, r5
 8001be2:	f7fe fd09 	bl	80005f8 <__aeabi_dmul>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4640      	mov	r0, r8
 8001bec:	4649      	mov	r1, r9
 8001bee:	f7fe fb4b 	bl	8000288 <__aeabi_dsub>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f7fe fff5 	bl	8000be8 <__aeabi_d2f>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	617b      	str	r3, [r7, #20]
	beta = d * sin (deg) + q * cos (deg);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7fe fca0 	bl	8000548 <__aeabi_f2d>
 8001c08:	4604      	mov	r4, r0
 8001c0a:	460d      	mov	r5, r1
 8001c0c:	68b8      	ldr	r0, [r7, #8]
 8001c0e:	f7fe fc9b 	bl	8000548 <__aeabi_f2d>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	ec43 2b10 	vmov	d0, r2, r3
 8001c1a:	f011 f8dd 	bl	8012dd8 <sin>
 8001c1e:	ec53 2b10 	vmov	r2, r3, d0
 8001c22:	4620      	mov	r0, r4
 8001c24:	4629      	mov	r1, r5
 8001c26:	f7fe fce7 	bl	80005f8 <__aeabi_dmul>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4690      	mov	r8, r2
 8001c30:	4699      	mov	r9, r3
 8001c32:	6838      	ldr	r0, [r7, #0]
 8001c34:	f7fe fc88 	bl	8000548 <__aeabi_f2d>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	460d      	mov	r5, r1
 8001c3c:	68b8      	ldr	r0, [r7, #8]
 8001c3e:	f7fe fc83 	bl	8000548 <__aeabi_f2d>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	ec43 2b10 	vmov	d0, r2, r3
 8001c4a:	f011 f871 	bl	8012d30 <cos>
 8001c4e:	ec53 2b10 	vmov	r2, r3, d0
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fccf 	bl	80005f8 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4640      	mov	r0, r8
 8001c60:	4649      	mov	r1, r9
 8001c62:	f7fe fb13 	bl	800028c <__adddf3>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe ffbb 	bl	8000be8 <__aeabi_d2f>
 8001c72:	4603      	mov	r3, r0
 8001c74:	613b      	str	r3, [r7, #16]
	hbldc->ia = alpha;
 8001c76:	6978      	ldr	r0, [r7, #20]
 8001c78:	f7fe fc66 	bl	8000548 <__aeabi_f2d>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	68f9      	ldr	r1, [r7, #12]
 8001c82:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280
	hbldc->ib = -0.5 * alpha + 0.8660254037844386 * beta;
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7fe fc5e 	bl	8000548 <__aeabi_f2d>
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <BLDC_inv_clark_park_trans+0x1c0>)
 8001c92:	f7fe fcb1 	bl	80005f8 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4614      	mov	r4, r2
 8001c9c:	461d      	mov	r5, r3
 8001c9e:	6938      	ldr	r0, [r7, #16]
 8001ca0:	f7fe fc52 	bl	8000548 <__aeabi_f2d>
 8001ca4:	a31a      	add	r3, pc, #104	; (adr r3, 8001d10 <BLDC_inv_clark_park_trans+0x1b8>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fca5 	bl	80005f8 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe fae9 	bl	800028c <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	68f9      	ldr	r1, [r7, #12]
 8001cc0:	e9c1 23a2 	strd	r2, r3, [r1, #648]	; 0x288
	hbldc->ic = -0.5 * alpha - 0.8660254037844386 * beta;
 8001cc4:	6978      	ldr	r0, [r7, #20]
 8001cc6:	f7fe fc3f 	bl	8000548 <__aeabi_f2d>
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <BLDC_inv_clark_park_trans+0x1c0>)
 8001cd0:	f7fe fc92 	bl	80005f8 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4614      	mov	r4, r2
 8001cda:	461d      	mov	r5, r3
 8001cdc:	6938      	ldr	r0, [r7, #16]
 8001cde:	f7fe fc33 	bl	8000548 <__aeabi_f2d>
 8001ce2:	a30b      	add	r3, pc, #44	; (adr r3, 8001d10 <BLDC_inv_clark_park_trans+0x1b8>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fc86 	bl	80005f8 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	f7fe fac8 	bl	8000288 <__aeabi_dsub>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	68f9      	ldr	r1, [r7, #12]
 8001cfe:	e9c1 23a4 	strd	r2, r3, [r1, #656]	; 0x290
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d0c:	f3af 8000 	nop.w
 8001d10:	e8584caa 	.word	0xe8584caa
 8001d14:	3febb67a 	.word	0x3febb67a
 8001d18:	bfe00000 	.word	0xbfe00000
 8001d1c:	a2529983 	.word	0xa2529983
 8001d20:	3f91df46 	.word	0x3f91df46
 8001d24:	00000000 	.word	0x00000000

08001d28 <BLDC_spwm>:


//============================================================================================

void BLDC_spwm (BLDC_HandleTypeDef *hbldc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	uint32_t pwm_h_temp = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]

	hbldc->spwm[_u] = (hbldc->ia * 500.0)+2047.0;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	e9d3 01a0 	ldrd	r0, r1, [r3, #640]	; 0x280
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	4b60      	ldr	r3, [pc, #384]	; (8001ec0 <BLDC_spwm+0x198>)
 8001d40:	f7fe fc5a 	bl	80005f8 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	a35a      	add	r3, pc, #360	; (adr r3, 8001eb8 <BLDC_spwm+0x190>)
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	f7fe fa9b 	bl	800028c <__adddf3>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f7fe ff23 	bl	8000ba8 <__aeabi_d2uiz>
 8001d62:	4602      	mov	r2, r0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	hbldc->spwm[_v] = (hbldc->ib * 500.0)+2047.0;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	e9d3 01a2 	ldrd	r0, r1, [r3, #648]	; 0x288
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <BLDC_spwm+0x198>)
 8001d76:	f7fe fc3f 	bl	80005f8 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	a34d      	add	r3, pc, #308	; (adr r3, 8001eb8 <BLDC_spwm+0x190>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fa80 	bl	800028c <__adddf3>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7fe ff08 	bl	8000ba8 <__aeabi_d2uiz>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	hbldc->spwm[_w] = (hbldc->ic * 500.0)+2047.0;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	e9d3 01a4 	ldrd	r0, r1, [r3, #656]	; 0x290
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	4b45      	ldr	r3, [pc, #276]	; (8001ec0 <BLDC_spwm+0x198>)
 8001dac:	f7fe fc24 	bl	80005f8 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	a33f      	add	r3, pc, #252	; (adr r3, 8001eb8 <BLDC_spwm+0x190>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	f7fe fa65 	bl	800028c <__adddf3>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe feed 	bl	8000ba8 <__aeabi_d2uiz>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	if (hbldc->spwm[_u] > 4000) hbldc->spwm[_u] = 4000;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ddc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001de0:	d904      	bls.n	8001dec <BLDC_spwm+0xc4>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001de8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	if (hbldc->spwm[_v] > 4000) hbldc->spwm[_v] = 4000;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001df2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001df6:	d904      	bls.n	8001e02 <BLDC_spwm+0xda>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001dfe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	if (hbldc->spwm[_w] > 4000) hbldc->spwm[_w] = 4000;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001e08:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001e0c:	d904      	bls.n	8001e18 <BLDC_spwm+0xf0>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001e14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	for (uint8_t i = 0; i < 3; i++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	72fb      	strb	r3, [r7, #11]
 8001e1c:	e012      	b.n	8001e44 <BLDC_spwm+0x11c>
	{
		if (pwm_h_temp < hbldc->spwm[i]) pwm_h_temp = hbldc->spwm[i];
 8001e1e:	7afb      	ldrb	r3, [r7, #11]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	3384      	adds	r3, #132	; 0x84
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d206      	bcs.n	8001e3e <BLDC_spwm+0x116>
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	3384      	adds	r3, #132	; 0x84
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 3; i++)
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
 8001e40:	3301      	adds	r3, #1
 8001e42:	72fb      	strb	r3, [r7, #11]
 8001e44:	7afb      	ldrb	r3, [r7, #11]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d9e9      	bls.n	8001e1e <BLDC_spwm+0xf6>
	}
	hbldc->t_pwm = pwm_h_temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

	if (hbldc->channel == _BLDC1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d113      	bne.n	8001e82 <BLDC_spwm+0x15a>
	{
		TIM8->CCR1 = hbldc->spwm[_u];
 8001e5a:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <BLDC_spwm+0x19c>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001e62:	6353      	str	r3, [r2, #52]	; 0x34
		TIM8->CCR2 = hbldc->spwm[_v];
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <BLDC_spwm+0x19c>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001e6c:	6393      	str	r3, [r2, #56]	; 0x38
		TIM8->CCR3 = hbldc->spwm[_w];
 8001e6e:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <BLDC_spwm+0x19c>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001e76:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM8->CCR4 = 4000;
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <BLDC_spwm+0x19c>)
 8001e7a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR1 = hbldc->spwm[_u];
		TIM1->CCR2 = hbldc->spwm[_v];
		TIM1->CCR3 = hbldc->spwm[_w];
		TIM1->CCR4 = 4000;
	}
}
 8001e80:	e016      	b.n	8001eb0 <BLDC_spwm+0x188>
	else if (hbldc->channel == _BLDC2)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d112      	bne.n	8001eb0 <BLDC_spwm+0x188>
		TIM1->CCR1 = hbldc->spwm[_u];
 8001e8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ec8 <BLDC_spwm+0x1a0>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001e92:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = hbldc->spwm[_v];
 8001e94:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <BLDC_spwm+0x1a0>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001e9c:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = hbldc->spwm[_w];
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <BLDC_spwm+0x1a0>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001ea6:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM1->CCR4 = 4000;
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <BLDC_spwm+0x1a0>)
 8001eaa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	409ffc00 	.word	0x409ffc00
 8001ec0:	407f4000 	.word	0x407f4000
 8001ec4:	40010400 	.word	0x40010400
 8001ec8:	40010000 	.word	0x40010000

08001ecc <BLDC_beep>:

void BLDC_beep (BLDC_HandleTypeDef *hbldc, uint32_t freq, uint32_t time_delay)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
	uint32_t prescaller;
	if (freq != 0)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d035      	beq.n	8001f4a <BLDC_beep+0x7e>
	{
		if (freq < 100) freq = 100;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b63      	cmp	r3, #99	; 0x63
 8001ee2:	d802      	bhi.n	8001eea <BLDC_beep+0x1e>
 8001ee4:	2364      	movs	r3, #100	; 0x64
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	e007      	b.n	8001efa <BLDC_beep+0x2e>
		else if (freq > 20000) freq = 20000;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d902      	bls.n	8001efa <BLDC_beep+0x2e>
 8001ef4:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001ef8:	60bb      	str	r3, [r7, #8]
		if (hbldc->channel == _BLDC1)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10b      	bne.n	8001f1a <BLDC_beep+0x4e>
		{
			prescaller = 168000000 / (freq * 4095);
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	4613      	mov	r3, r2
 8001f06:	031b      	lsls	r3, r3, #12
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	4a25      	ldr	r2, [pc, #148]	; (8001fa0 <BLDC_beep+0xd4>)
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	617b      	str	r3, [r7, #20]
			TIM8->PSC = prescaller;
 8001f12:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <BLDC_beep+0xd8>)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	6293      	str	r3, [r2, #40]	; 0x28
 8001f18:	e00a      	b.n	8001f30 <BLDC_beep+0x64>
		}
		else
		{
			prescaller = 168000000 / (freq * 4095);
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	031b      	lsls	r3, r3, #12
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <BLDC_beep+0xd4>)
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
			TIM1->PSC = prescaller;
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <BLDC_beep+0xdc>)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	6293      	str	r3, [r2, #40]	; 0x28
		}
		BLDC_inv_clark_park_trans (hbldc, 0, 0, 0.5);
 8001f30:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001f34:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8001fac <BLDC_beep+0xe0>
 8001f38:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001fac <BLDC_beep+0xe0>
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f7ff fe0b 	bl	8001b58 <BLDC_inv_clark_park_trans>
		BLDC_spwm (hbldc);
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7ff fef0 	bl	8001d28 <BLDC_spwm>
 8001f48:	e00b      	b.n	8001f62 <BLDC_beep+0x96>
	}
	else
	{
		BLDC_inv_clark_park_trans (hbldc, 0, 0, 0);
 8001f4a:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8001fac <BLDC_beep+0xe0>
 8001f4e:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001fac <BLDC_beep+0xe0>
 8001f52:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001fac <BLDC_beep+0xe0>
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f7ff fdfe 	bl	8001b58 <BLDC_inv_clark_park_trans>
		BLDC_spwm (hbldc);
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7ff fee3 	bl	8001d28 <BLDC_spwm>
	}
	HAL_Delay(time_delay);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f003 fbb6 	bl	80056d4 <HAL_Delay>
	BLDC_inv_clark_park_trans (hbldc, 0, 0, 0);
 8001f68:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8001fac <BLDC_beep+0xe0>
 8001f6c:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001fac <BLDC_beep+0xe0>
 8001f70:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001fac <BLDC_beep+0xe0>
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7ff fdef 	bl	8001b58 <BLDC_inv_clark_park_trans>
	BLDC_spwm (hbldc);
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f7ff fed4 	bl	8001d28 <BLDC_spwm>
	if (hbldc->channel == _BLDC1) TIM8->PSC = 1;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d103      	bne.n	8001f90 <BLDC_beep+0xc4>
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <BLDC_beep+0xd8>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
	else TIM1->PSC = 1;
}
 8001f8e:	e002      	b.n	8001f96 <BLDC_beep+0xca>
	else TIM1->PSC = 1;
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <BLDC_beep+0xdc>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f96:	bf00      	nop
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	0a037a00 	.word	0x0a037a00
 8001fa4:	40010400 	.word	0x40010400
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	00000000 	.word	0x00000000

08001fb0 <BLDC_get_sector>:
}

//============================================================================================

void BLDC_get_sector (BLDC_HandleTypeDef *hbldc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	uint8_t raw_hall_data;
//	raw_hall_data = ((GPIOA->IDR & GPIO_PIN_15)>>15) | ((GPIOB->IDR & GPIO_PIN_3)>>2) | ((GPIOB->IDR & GPIO_PIN_10)>>8);
	raw_hall_data = GPIOA->IDR & 0x07;
 8001fb8:	4b93      	ldr	r3, [pc, #588]	; (8002208 <BLDC_get_sector+0x258>)
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	73fb      	strb	r3, [r7, #15]
	switch (raw_hall_data)
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	f200 8114 	bhi.w	80021f6 <BLDC_get_sector+0x246>
 8001fce:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <BLDC_get_sector+0x24>)
 8001fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd4:	08001fed 	.word	0x08001fed
 8001fd8:	08002149 	.word	0x08002149
 8001fdc:	080021a1 	.word	0x080021a1
 8001fe0:	08002099 	.word	0x08002099
 8001fe4:	08002043 	.word	0x08002043
 8001fe8:	080020f1 	.word	0x080020f1
	{
	case 1:
		if (hbldc->sector_theta == 120) 	 hbldc->dir = 1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	4b85      	ldr	r3, [pc, #532]	; (800220c <BLDC_get_sector+0x25c>)
 8001ff8:	f7fe fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d004      	beq.n	800200c <BLDC_get_sector+0x5c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 800200a:	e013      	b.n	8002034 <BLDC_get_sector+0x84>
		else if (hbldc->sector_theta == 240) hbldc->dir = -1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	4b7e      	ldr	r3, [pc, #504]	; (8002210 <BLDC_get_sector+0x260>)
 8002018:	f7fe fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <BLDC_get_sector+0x7c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	22ff      	movs	r2, #255	; 0xff
 8002026:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 800202a:	e003      	b.n	8002034 <BLDC_get_sector+0x84>
		else hbldc->dir = 0;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
		hbldc->sector_theta = 180;
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	4b76      	ldr	r3, [pc, #472]	; (8002214 <BLDC_get_sector+0x264>)
 800203c:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
	break;
 8002040:	e0d9      	b.n	80021f6 <BLDC_get_sector+0x246>
	case 5:
		if (hbldc->sector_theta == 60) 	 	 hbldc->dir = 1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	4b72      	ldr	r3, [pc, #456]	; (8002218 <BLDC_get_sector+0x268>)
 800204e:	f7fe fd3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <BLDC_get_sector+0xb2>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8002060:	e013      	b.n	800208a <BLDC_get_sector+0xda>
		else if (hbldc->sector_theta == 180) hbldc->dir = -1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b69      	ldr	r3, [pc, #420]	; (8002214 <BLDC_get_sector+0x264>)
 800206e:	f7fe fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d004      	beq.n	8002082 <BLDC_get_sector+0xd2>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	22ff      	movs	r2, #255	; 0xff
 800207c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8002080:	e003      	b.n	800208a <BLDC_get_sector+0xda>
		else hbldc->dir = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
		hbldc->sector_theta = 120;
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	4b5e      	ldr	r3, [pc, #376]	; (800220c <BLDC_get_sector+0x25c>)
 8002092:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
	break;
 8002096:	e0ae      	b.n	80021f6 <BLDC_get_sector+0x246>
	case 4:
		if (hbldc->sector_theta == 0) 	 	 hbldc->dir = 1;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	f7fe fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d004      	beq.n	80020ba <BLDC_get_sector+0x10a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 80020b8:	e013      	b.n	80020e2 <BLDC_get_sector+0x132>
		else if (hbldc->sector_theta == 120) hbldc->dir = -1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	4b51      	ldr	r3, [pc, #324]	; (800220c <BLDC_get_sector+0x25c>)
 80020c6:	f7fe fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <BLDC_get_sector+0x12a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	22ff      	movs	r2, #255	; 0xff
 80020d4:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 80020d8:	e003      	b.n	80020e2 <BLDC_get_sector+0x132>
		else hbldc->dir = 0;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
		hbldc->sector_theta = 60;
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <BLDC_get_sector+0x268>)
 80020ea:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
	break;
 80020ee:	e082      	b.n	80021f6 <BLDC_get_sector+0x246>
	case 6:
		if (hbldc->sector_theta == 300) 	 hbldc->dir = 1;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 80020f6:	a342      	add	r3, pc, #264	; (adr r3, 8002200 <BLDC_get_sector+0x250>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <BLDC_get_sector+0x160>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 800210e:	e013      	b.n	8002138 <BLDC_get_sector+0x188>
		else if (hbldc->sector_theta == 60)  hbldc->dir = -1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <BLDC_get_sector+0x268>)
 800211c:	f7fe fcd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <BLDC_get_sector+0x180>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	22ff      	movs	r2, #255	; 0xff
 800212a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 800212e:	e003      	b.n	8002138 <BLDC_get_sector+0x188>
		else hbldc->dir = 0;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
		hbldc->sector_theta = 0;
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
	break;
 8002146:	e056      	b.n	80021f6 <BLDC_get_sector+0x246>
	case 2:
		if (hbldc->sector_theta == 240) 	 hbldc->dir = 1;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <BLDC_get_sector+0x260>)
 8002154:	f7fe fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d004      	beq.n	8002168 <BLDC_get_sector+0x1b8>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8002166:	e014      	b.n	8002192 <BLDC_get_sector+0x1e2>
		else if (hbldc->sector_theta == 0) 	 hbldc->dir = -1;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	f7fe fca7 	bl	8000ac8 <__aeabi_dcmpeq>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <BLDC_get_sector+0x1da>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	22ff      	movs	r2, #255	; 0xff
 8002184:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8002188:	e003      	b.n	8002192 <BLDC_get_sector+0x1e2>
		else hbldc->dir = 0;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
		hbldc->sector_theta = 300;
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	a31a      	add	r3, pc, #104	; (adr r3, 8002200 <BLDC_get_sector+0x250>)
 8002196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219a:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
	break;
 800219e:	e02a      	b.n	80021f6 <BLDC_get_sector+0x246>
	case 3:
		if (hbldc->sector_theta == 180) 	 hbldc->dir = 1;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <BLDC_get_sector+0x264>)
 80021ac:	f7fe fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d004      	beq.n	80021c0 <BLDC_get_sector+0x210>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 80021be:	e013      	b.n	80021e8 <BLDC_get_sector+0x238>
		else if (hbldc->sector_theta == 300) hbldc->dir = -1;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 80021c6:	a30e      	add	r3, pc, #56	; (adr r3, 8002200 <BLDC_get_sector+0x250>)
 80021c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021cc:	f7fe fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d004      	beq.n	80021e0 <BLDC_get_sector+0x230>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	22ff      	movs	r2, #255	; 0xff
 80021da:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 80021de:	e003      	b.n	80021e8 <BLDC_get_sector+0x238>
		else hbldc->dir = 0;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
		hbldc->sector_theta = 240;
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <BLDC_get_sector+0x260>)
 80021f0:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
	break;
 80021f4:	bf00      	nop
	}
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	00000000 	.word	0x00000000
 8002204:	4072c000 	.word	0x4072c000
 8002208:	40020000 	.word	0x40020000
 800220c:	405e0000 	.word	0x405e0000
 8002210:	406e0000 	.word	0x406e0000
 8002214:	40668000 	.word	0x40668000
 8002218:	404e0000 	.word	0x404e0000

0800221c <BLDC_rpm_sens>:

void BLDC_rpm_sens (BLDC_HandleTypeDef *hbldc)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	if (hbldc->dir == 1)
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	f991 12c8 	ldrsb.w	r1, [r1, #712]	; 0x2c8
 800222a:	2901      	cmp	r1, #1
 800222c:	d10f      	bne.n	800224e <BLDC_rpm_sens+0x32>
	{
		hbldc->rpm = hbldc->rpm_abs;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
		hall_sens_count++;
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <BLDC_rpm_sens+0x70>)
 800223c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002240:	b29b      	uxth	r3, r3
 8002242:	3301      	adds	r3, #1
 8002244:	b29b      	uxth	r3, r3
 8002246:	b21a      	sxth	r2, r3
 8002248:	4b10      	ldr	r3, [pc, #64]	; (800228c <BLDC_rpm_sens+0x70>)
 800224a:	801a      	strh	r2, [r3, #0]
	else if (hbldc->dir == -1)
	{
		hbldc->rpm = -hbldc->rpm_abs;
		hall_sens_count--;
	}
}
 800224c:	e017      	b.n	800227e <BLDC_rpm_sens+0x62>
	else if (hbldc->dir == -1)
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	f991 12c8 	ldrsb.w	r1, [r1, #712]	; 0x2c8
 8002254:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002258:	d111      	bne.n	800227e <BLDC_rpm_sens+0x62>
		hbldc->rpm = -hbldc->rpm_abs;
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	e9d1 01a8 	ldrd	r0, r1, [r1, #672]	; 0x2a0
 8002260:	4602      	mov	r2, r0
 8002262:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
		hall_sens_count--;
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <BLDC_rpm_sens+0x70>)
 800226e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29b      	uxth	r3, r3
 8002278:	b21a      	sxth	r2, r3
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <BLDC_rpm_sens+0x70>)
 800227c:	801a      	strh	r2, [r3, #0]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000eb6 	.word	0x20000eb6

08002290 <BLDC_get_rpm>:

//============================================================================================

void BLDC_get_rpm (BLDC_HandleTypeDef *hbldc)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	if (hbldc->channel == _BLDC1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d11a      	bne.n	80022d6 <BLDC_get_rpm+0x46>
	{
		hbldc->rpm_abs = 60.0 / ((float)TIM5->CCR1 * 0.00012);
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <BLDC_get_rpm+0x58>)
 80022a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a4:	ee07 3a90 	vmov	s15, r3
 80022a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ac:	ee17 0a90 	vmov	r0, s15
 80022b0:	f7fe f94a 	bl	8000548 <__aeabi_f2d>
 80022b4:	a30a      	add	r3, pc, #40	; (adr r3, 80022e0 <BLDC_get_rpm+0x50>)
 80022b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ba:	f7fe f99d 	bl	80005f8 <__aeabi_dmul>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	f04f 0000 	mov.w	r0, #0
 80022c6:	4909      	ldr	r1, [pc, #36]	; (80022ec <BLDC_get_rpm+0x5c>)
 80022c8:	f7fe fac0 	bl	800084c <__aeabi_ddiv>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
	}
	else if (hbldc->channel == _BLDC2)
	{
		//----------------------
	}
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	4d551d69 	.word	0x4d551d69
 80022e4:	3f1f7510 	.word	0x3f1f7510
 80022e8:	40000c00 	.word	0x40000c00
 80022ec:	404e0000 	.word	0x404e0000

080022f0 <BLDC_set_speed>:

//============================================================================================

void BLDC_set_speed (double rpm)
{
 80022f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022f4:	b091      	sub	sp, #68	; 0x44
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	ed87 0b04 	vstr	d0, [r7, #16]
	float phase_shft = 90, id_sp = 0;
 80022fc:	49b4      	ldr	r1, [pc, #720]	; (80025d0 <BLDC_set_speed+0x2e0>)
 80022fe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	62f9      	str	r1, [r7, #44]	; 0x2c
	double  t_hall = 0, rpm_abs = fabs(rpm);
 8002306:	f04f 0000 	mov.w	r0, #0
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	6979      	ldr	r1, [r7, #20]
 8002316:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800231a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint32_t tcnt = TIM5->CNT;
 800231e:	4bad      	ldr	r3, [pc, #692]	; (80025d4 <BLDC_set_speed+0x2e4>)
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	61fb      	str	r3, [r7, #28]

	if (hbldc1.rpm != 0) t_hall = (60.0/hbldc1.rpm)/60.0 * 2000000.0;//2000000.0
 8002324:	4bac      	ldr	r3, [pc, #688]	; (80025d8 <BLDC_set_speed+0x2e8>)
 8002326:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	; 0x2a8
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	f7fe fbc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d11d      	bne.n	8002378 <BLDC_set_speed+0x88>
 800233c:	4ba6      	ldr	r3, [pc, #664]	; (80025d8 <BLDC_set_speed+0x2e8>)
 800233e:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 8002342:	f04f 0000 	mov.w	r0, #0
 8002346:	49a5      	ldr	r1, [pc, #660]	; (80025dc <BLDC_set_speed+0x2ec>)
 8002348:	f7fe fa80 	bl	800084c <__aeabi_ddiv>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	4ba0      	ldr	r3, [pc, #640]	; (80025dc <BLDC_set_speed+0x2ec>)
 800235a:	f7fe fa77 	bl	800084c <__aeabi_ddiv>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	a382      	add	r3, pc, #520	; (adr r3, 8002570 <BLDC_set_speed+0x280>)
 8002368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236c:	f7fe f944 	bl	80005f8 <__aeabi_dmul>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (tcnt < fabs(t_hall))
 8002378:	69f8      	ldr	r0, [r7, #28]
 800237a:	f7fe f8c3 	bl	8000504 <__aeabi_ui2d>
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800238e:	f7fe fba5 	bl	8000adc <__aeabi_dcmplt>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01b      	beq.n	80023d0 <BLDC_set_speed+0xe0>
	{
		hbldc1.angle_estimation = (double)tcnt / t_hall * 60.0;
 8002398:	69f8      	ldr	r0, [r7, #28]
 800239a:	f7fe f8b3 	bl	8000504 <__aeabi_ui2d>
 800239e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023a2:	f7fe fa53 	bl	800084c <__aeabi_ddiv>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	4b8a      	ldr	r3, [pc, #552]	; (80025dc <BLDC_set_speed+0x2ec>)
 80023b4:	f7fe f920 	bl	80005f8 <__aeabi_dmul>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4986      	ldr	r1, [pc, #536]	; (80025d8 <BLDC_set_speed+0x2e8>)
 80023be:	e9c1 23ae 	strd	r2, r3, [r1, #696]	; 0x2b8
//		hbldc1.new_sector_theta = hbldc1.sector_theta + hbldc1.angle_estimation;
		hbldc1.new_sector_theta = hbldc1.sector_theta;
 80023c2:	4b85      	ldr	r3, [pc, #532]	; (80025d8 <BLDC_set_speed+0x2e8>)
 80023c4:	e9d3 238c 	ldrd	r2, r3, [r3, #560]	; 0x230
 80023c8:	4983      	ldr	r1, [pc, #524]	; (80025d8 <BLDC_set_speed+0x2e8>)
 80023ca:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240
 80023ce:	e005      	b.n	80023dc <BLDC_set_speed+0xec>
	}
	else
	{
//		hbldc1.rpm = 0;
		hbldc1.new_sector_theta = hbldc1.sector_theta;
 80023d0:	4b81      	ldr	r3, [pc, #516]	; (80025d8 <BLDC_set_speed+0x2e8>)
 80023d2:	e9d3 238c 	ldrd	r2, r3, [r3, #560]	; 0x230
 80023d6:	4980      	ldr	r1, [pc, #512]	; (80025d8 <BLDC_set_speed+0x2e8>)
 80023d8:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240
	}
	if (rpm_abs < 0.001)
 80023dc:	a366      	add	r3, pc, #408	; (adr r3, 8002578 <BLDC_set_speed+0x288>)
 80023de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023e6:	f7fe fb79 	bl	8000adc <__aeabi_dcmplt>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d02c      	beq.n	800244a <BLDC_set_speed+0x15a>
	{
		if (tcnt > fabs(t_hall))
 80023f0:	69f8      	ldr	r0, [r7, #28]
 80023f2:	f7fe f887 	bl	8000504 <__aeabi_ui2d>
 80023f6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80023f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80023fe:	4622      	mov	r2, r4
 8002400:	462b      	mov	r3, r5
 8002402:	f7fe fb89 	bl	8000b18 <__aeabi_dcmpgt>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d006      	beq.n	800241a <BLDC_set_speed+0x12a>
		{
			hbldc1.rpm = 0;
 800240c:	4972      	ldr	r1, [pc, #456]	; (80025d8 <BLDC_set_speed+0x2e8>)
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
		}
		PID_set_konstanta(&hbldc1.hpid_omega, 0.0002, 0.00000002, 0);
 800241a:	ed9f 2b59 	vldr	d2, [pc, #356]	; 8002580 <BLDC_set_speed+0x290>
 800241e:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8002588 <BLDC_set_speed+0x298>
 8002422:	ed9f 0b5b 	vldr	d0, [pc, #364]	; 8002590 <BLDC_set_speed+0x2a0>
 8002426:	486e      	ldr	r0, [pc, #440]	; (80025e0 <BLDC_set_speed+0x2f0>)
 8002428:	f002 ff54 	bl	80052d4 <PID_set_konstanta>
		PID_set_max_value(&hbldc1.hpid_omega, 6.0, 100000000);
 800242c:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8002598 <BLDC_set_speed+0x2a8>
 8002430:	ed9f 0b5b 	vldr	d0, [pc, #364]	; 80025a0 <BLDC_set_speed+0x2b0>
 8002434:	486a      	ldr	r0, [pc, #424]	; (80025e0 <BLDC_set_speed+0x2f0>)
 8002436:	f002 ff6c 	bl	8005312 <PID_set_max_value>
		hbldc1.hpid_omega.int_error = 0;
 800243a:	4967      	ldr	r1, [pc, #412]	; (80025d8 <BLDC_set_speed+0x2e8>)
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
 8002448:	e102      	b.n	8002650 <BLDC_set_speed+0x360>
	}
	else
	{
		if (tcnt > (fabs(t_hall) + 10))//100000
 800244a:	69f8      	ldr	r0, [r7, #28]
 800244c:	f7fe f85a 	bl	8000504 <__aeabi_ui2d>
 8002450:	4604      	mov	r4, r0
 8002452:	460d      	mov	r5, r1
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <BLDC_set_speed+0x2f4>)
 8002466:	e9d7 0100 	ldrd	r0, r1, [r7]
 800246a:	f7fd ff0f 	bl	800028c <__adddf3>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	f7fe fb4f 	bl	8000b18 <__aeabi_dcmpgt>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d006      	beq.n	800248e <BLDC_set_speed+0x19e>
		{
			hbldc1.rpm = 0;
 8002480:	4955      	ldr	r1, [pc, #340]	; (80025d8 <BLDC_set_speed+0x2e8>)
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
		}
		if (rpm_abs <= 100) PID_set_konstanta(&hbldc1.hpid_omega, 0.005, 0.0000001, 0);
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b55      	ldr	r3, [pc, #340]	; (80025e8 <BLDC_set_speed+0x2f8>)
 8002494:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002498:	f7fe fb2a 	bl	8000af0 <__aeabi_dcmple>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <BLDC_set_speed+0x1c6>
 80024a2:	ed9f 2b37 	vldr	d2, [pc, #220]	; 8002580 <BLDC_set_speed+0x290>
 80024a6:	ed9f 1b40 	vldr	d1, [pc, #256]	; 80025a8 <BLDC_set_speed+0x2b8>
 80024aa:	ed9f 0b41 	vldr	d0, [pc, #260]	; 80025b0 <BLDC_set_speed+0x2c0>
 80024ae:	484c      	ldr	r0, [pc, #304]	; (80025e0 <BLDC_set_speed+0x2f0>)
 80024b0:	f002 ff10 	bl	80052d4 <PID_set_konstanta>
 80024b4:	e0c5      	b.n	8002642 <BLDC_set_speed+0x352>
		else if (rpm_abs > 100 && rpm_abs <= 200) PID_set_konstanta(&hbldc1.hpid_omega, 0.01, 0.0000001, 0);
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	4b4b      	ldr	r3, [pc, #300]	; (80025e8 <BLDC_set_speed+0x2f8>)
 80024bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024c0:	f7fe fb2a 	bl	8000b18 <__aeabi_dcmpgt>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d013      	beq.n	80024f2 <BLDC_set_speed+0x202>
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <BLDC_set_speed+0x2fc>)
 80024d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024d4:	f7fe fb0c 	bl	8000af0 <__aeabi_dcmple>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <BLDC_set_speed+0x202>
 80024de:	ed9f 2b28 	vldr	d2, [pc, #160]	; 8002580 <BLDC_set_speed+0x290>
 80024e2:	ed9f 1b31 	vldr	d1, [pc, #196]	; 80025a8 <BLDC_set_speed+0x2b8>
 80024e6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 80025b8 <BLDC_set_speed+0x2c8>
 80024ea:	483d      	ldr	r0, [pc, #244]	; (80025e0 <BLDC_set_speed+0x2f0>)
 80024ec:	f002 fef2 	bl	80052d4 <PID_set_konstanta>
 80024f0:	e0a7      	b.n	8002642 <BLDC_set_speed+0x352>
		else if (rpm_abs > 200 && rpm_abs <= 300) PID_set_konstanta(&hbldc1.hpid_omega, 0.01, 0.0000001, 0);
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <BLDC_set_speed+0x2fc>)
 80024f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024fc:	f7fe fb0c 	bl	8000b18 <__aeabi_dcmpgt>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d013      	beq.n	800252e <BLDC_set_speed+0x23e>
 8002506:	a32e      	add	r3, pc, #184	; (adr r3, 80025c0 <BLDC_set_speed+0x2d0>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002510:	f7fe faee 	bl	8000af0 <__aeabi_dcmple>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <BLDC_set_speed+0x23e>
 800251a:	ed9f 2b19 	vldr	d2, [pc, #100]	; 8002580 <BLDC_set_speed+0x290>
 800251e:	ed9f 1b22 	vldr	d1, [pc, #136]	; 80025a8 <BLDC_set_speed+0x2b8>
 8002522:	ed9f 0b25 	vldr	d0, [pc, #148]	; 80025b8 <BLDC_set_speed+0x2c8>
 8002526:	482e      	ldr	r0, [pc, #184]	; (80025e0 <BLDC_set_speed+0x2f0>)
 8002528:	f002 fed4 	bl	80052d4 <PID_set_konstanta>
 800252c:	e089      	b.n	8002642 <BLDC_set_speed+0x352>
		else if (rpm_abs > 300 && rpm_abs <= 400) PID_set_konstanta(&hbldc1.hpid_omega, 0.015, 0.0000001, 0);
 800252e:	a324      	add	r3, pc, #144	; (adr r3, 80025c0 <BLDC_set_speed+0x2d0>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002538:	f7fe faee 	bl	8000b18 <__aeabi_dcmpgt>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d058      	beq.n	80025f4 <BLDC_set_speed+0x304>
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <BLDC_set_speed+0x300>)
 8002548:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800254c:	f7fe fad0 	bl	8000af0 <__aeabi_dcmple>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d04e      	beq.n	80025f4 <BLDC_set_speed+0x304>
 8002556:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8002580 <BLDC_set_speed+0x290>
 800255a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80025a8 <BLDC_set_speed+0x2b8>
 800255e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80025c8 <BLDC_set_speed+0x2d8>
 8002562:	481f      	ldr	r0, [pc, #124]	; (80025e0 <BLDC_set_speed+0x2f0>)
 8002564:	f002 feb6 	bl	80052d4 <PID_set_konstanta>
 8002568:	e06b      	b.n	8002642 <BLDC_set_speed+0x352>
 800256a:	bf00      	nop
 800256c:	f3af 8000 	nop.w
 8002570:	00000000 	.word	0x00000000
 8002574:	413e8480 	.word	0x413e8480
 8002578:	d2f1a9fc 	.word	0xd2f1a9fc
 800257c:	3f50624d 	.word	0x3f50624d
	...
 8002588:	e2308c3a 	.word	0xe2308c3a
 800258c:	3e55798e 	.word	0x3e55798e
 8002590:	eb1c432d 	.word	0xeb1c432d
 8002594:	3f2a36e2 	.word	0x3f2a36e2
 8002598:	00000000 	.word	0x00000000
 800259c:	4197d784 	.word	0x4197d784
 80025a0:	00000000 	.word	0x00000000
 80025a4:	40180000 	.word	0x40180000
 80025a8:	9abcaf48 	.word	0x9abcaf48
 80025ac:	3e7ad7f2 	.word	0x3e7ad7f2
 80025b0:	47ae147b 	.word	0x47ae147b
 80025b4:	3f747ae1 	.word	0x3f747ae1
 80025b8:	47ae147b 	.word	0x47ae147b
 80025bc:	3f847ae1 	.word	0x3f847ae1
 80025c0:	00000000 	.word	0x00000000
 80025c4:	4072c000 	.word	0x4072c000
 80025c8:	eb851eb8 	.word	0xeb851eb8
 80025cc:	3f8eb851 	.word	0x3f8eb851
 80025d0:	42b40000 	.word	0x42b40000
 80025d4:	40000c00 	.word	0x40000c00
 80025d8:	20000850 	.word	0x20000850
 80025dc:	404e0000 	.word	0x404e0000
 80025e0:	20000938 	.word	0x20000938
 80025e4:	40240000 	.word	0x40240000
 80025e8:	40590000 	.word	0x40590000
 80025ec:	40690000 	.word	0x40690000
 80025f0:	40790000 	.word	0x40790000
		else if (rpm_abs > 400 && rpm_abs <= 500) PID_set_konstanta(&hbldc1.hpid_omega, 0.02, 0.0000001, 0);
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	4b7b      	ldr	r3, [pc, #492]	; (80027e8 <BLDC_set_speed+0x4f8>)
 80025fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025fe:	f7fe fa8b 	bl	8000b18 <__aeabi_dcmpgt>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <BLDC_set_speed+0x340>
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	4b77      	ldr	r3, [pc, #476]	; (80027ec <BLDC_set_speed+0x4fc>)
 800260e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002612:	f7fe fa6d 	bl	8000af0 <__aeabi_dcmple>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d009      	beq.n	8002630 <BLDC_set_speed+0x340>
 800261c:	ed9f 2b68 	vldr	d2, [pc, #416]	; 80027c0 <BLDC_set_speed+0x4d0>
 8002620:	ed9f 1b69 	vldr	d1, [pc, #420]	; 80027c8 <BLDC_set_speed+0x4d8>
 8002624:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 80027d0 <BLDC_set_speed+0x4e0>
 8002628:	4871      	ldr	r0, [pc, #452]	; (80027f0 <BLDC_set_speed+0x500>)
 800262a:	f002 fe53 	bl	80052d4 <PID_set_konstanta>
 800262e:	e008      	b.n	8002642 <BLDC_set_speed+0x352>
		else
		{
			PID_set_konstanta(&hbldc1.hpid_omega, 0.02, 0.0000001, 0);
 8002630:	ed9f 2b63 	vldr	d2, [pc, #396]	; 80027c0 <BLDC_set_speed+0x4d0>
 8002634:	ed9f 1b64 	vldr	d1, [pc, #400]	; 80027c8 <BLDC_set_speed+0x4d8>
 8002638:	ed9f 0b65 	vldr	d0, [pc, #404]	; 80027d0 <BLDC_set_speed+0x4e0>
 800263c:	486c      	ldr	r0, [pc, #432]	; (80027f0 <BLDC_set_speed+0x500>)
 800263e:	f002 fe49 	bl	80052d4 <PID_set_konstanta>
//			id_sp = -2.0;
		}
		PID_set_max_value(&hbldc1.hpid_omega, 6.0, 60000000);
 8002642:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80027d8 <BLDC_set_speed+0x4e8>
 8002646:	ed9f 0b66 	vldr	d0, [pc, #408]	; 80027e0 <BLDC_set_speed+0x4f0>
 800264a:	4869      	ldr	r0, [pc, #420]	; (80027f0 <BLDC_set_speed+0x500>)
 800264c:	f002 fe61 	bl	8005312 <PID_set_max_value>
	}

	hbldc1.c_loop++;
 8002650:	4b68      	ldr	r3, [pc, #416]	; (80027f4 <BLDC_set_speed+0x504>)
 8002652:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002656:	3301      	adds	r3, #1
 8002658:	4a66      	ldr	r2, [pc, #408]	; (80027f4 <BLDC_set_speed+0x504>)
 800265a:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
	if (hbldc1.c_loop >= 2)
 800265e:	4b65      	ldr	r3, [pc, #404]	; (80027f4 <BLDC_set_speed+0x504>)
 8002660:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002664:	2b01      	cmp	r3, #1
 8002666:	d90f      	bls.n	8002688 <BLDC_set_speed+0x398>
	{
		hbldc1.c_loop = 0;
 8002668:	4b62      	ldr	r3, [pc, #392]	; (80027f4 <BLDC_set_speed+0x504>)
 800266a:	2200      	movs	r2, #0
 800266c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		PID_calculate(&hbldc1.hpid_omega, rpm, hbldc1.rpm);
 8002670:	4b60      	ldr	r3, [pc, #384]	; (80027f4 <BLDC_set_speed+0x504>)
 8002672:	ed93 7baa 	vldr	d7, [r3, #680]	; 0x2a8
 8002676:	eeb0 1a47 	vmov.f32	s2, s14
 800267a:	eef0 1a67 	vmov.f32	s3, s15
 800267e:	ed97 0b04 	vldr	d0, [r7, #16]
 8002682:	485b      	ldr	r0, [pc, #364]	; (80027f0 <BLDC_set_speed+0x500>)
 8002684:	f002 fe5e 	bl	8005344 <PID_calculate>
	}
	if (hbldc1.hpid_omega.mv < 0) phase_shft = -90;
 8002688:	4b5a      	ldr	r3, [pc, #360]	; (80027f4 <BLDC_set_speed+0x504>)
 800268a:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	f7fe fa21 	bl	8000adc <__aeabi_dcmplt>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <BLDC_set_speed+0x3b4>
 80026a0:	4b55      	ldr	r3, [pc, #340]	; (80027f8 <BLDC_set_speed+0x508>)
 80026a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	BLDC_get_current_filter(&hbldc1);
 80026a4:	4853      	ldr	r0, [pc, #332]	; (80027f4 <BLDC_set_speed+0x504>)
 80026a6:	f7ff f94f 	bl	8001948 <BLDC_get_current_filter>
	BLDC_clark_park_trans(&hbldc1, hbldc1.new_sector_theta+phase_shft,
 80026aa:	4b52      	ldr	r3, [pc, #328]	; (80027f4 <BLDC_set_speed+0x504>)
 80026ac:	e9d3 4590 	ldrd	r4, r5, [r3, #576]	; 0x240
 80026b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80026b2:	f7fd ff49 	bl	8000548 <__aeabi_f2d>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4620      	mov	r0, r4
 80026bc:	4629      	mov	r1, r5
 80026be:	f7fd fde5 	bl	800028c <__adddf3>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	f7fe fa8d 	bl	8000be8 <__aeabi_d2f>
 80026ce:	4604      	mov	r4, r0
		  hbldc1.hdlpf_current_filt[_u].result,
 80026d0:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <BLDC_set_speed+0x504>)
 80026d2:	e9d3 2372 	ldrd	r2, r3, [r3, #456]	; 0x1c8
	BLDC_clark_park_trans(&hbldc1, hbldc1.new_sector_theta+phase_shft,
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	f7fe fa85 	bl	8000be8 <__aeabi_d2f>
 80026de:	4605      	mov	r5, r0
		  hbldc1.hdlpf_current_filt[_v].result,
 80026e0:	4b44      	ldr	r3, [pc, #272]	; (80027f4 <BLDC_set_speed+0x504>)
 80026e2:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
	BLDC_clark_park_trans(&hbldc1, hbldc1.new_sector_theta+phase_shft,
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f7fe fa7d 	bl	8000be8 <__aeabi_d2f>
 80026ee:	4606      	mov	r6, r0
		  hbldc1.hdlpf_current_filt[_w].result);
 80026f0:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <BLDC_set_speed+0x504>)
 80026f2:	e9d3 237a 	ldrd	r2, r3, [r3, #488]	; 0x1e8
	BLDC_clark_park_trans(&hbldc1, hbldc1.new_sector_theta+phase_shft,
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe fa75 	bl	8000be8 <__aeabi_d2f>
 80026fe:	4603      	mov	r3, r0
 8002700:	ee01 3a90 	vmov	s3, r3
 8002704:	ee01 6a10 	vmov	s2, r6
 8002708:	ee00 5a90 	vmov	s1, r5
 800270c:	ee00 4a10 	vmov	s0, r4
 8002710:	4838      	ldr	r0, [pc, #224]	; (80027f4 <BLDC_set_speed+0x504>)
 8002712:	f7ff f949 	bl	80019a8 <BLDC_clark_park_trans>
	PID_calculate(&hbldc1.hpid_id, id_sp, hbldc1.id_result);
 8002716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002718:	f7fd ff16 	bl	8000548 <__aeabi_f2d>
 800271c:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <BLDC_set_speed+0x504>)
 800271e:	ed93 7b9a 	vldr	d7, [r3, #616]	; 0x268
 8002722:	eeb0 1a47 	vmov.f32	s2, s14
 8002726:	eef0 1a67 	vmov.f32	s3, s15
 800272a:	ec41 0b10 	vmov	d0, r0, r1
 800272e:	4833      	ldr	r0, [pc, #204]	; (80027fc <BLDC_set_speed+0x50c>)
 8002730:	f002 fe08 	bl	8005344 <PID_calculate>
	PID_calculate(&hbldc1.hpid_iq, fabs(hbldc1.hpid_omega.mv), hbldc1.iq_result);
 8002734:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <BLDC_set_speed+0x504>)
 8002736:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800273a:	4690      	mov	r8, r2
 800273c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002740:	4b2c      	ldr	r3, [pc, #176]	; (80027f4 <BLDC_set_speed+0x504>)
 8002742:	ed93 7b9c 	vldr	d7, [r3, #624]	; 0x270
 8002746:	eeb0 1a47 	vmov.f32	s2, s14
 800274a:	eef0 1a67 	vmov.f32	s3, s15
 800274e:	ec49 8b10 	vmov	d0, r8, r9
 8002752:	482b      	ldr	r0, [pc, #172]	; (8002800 <BLDC_set_speed+0x510>)
 8002754:	f002 fdf6 	bl	8005344 <PID_calculate>
	BLDC_inv_clark_park_trans(&hbldc1, hbldc1.new_sector_theta+phase_shft, hbldc1.hpid_id.mv, hbldc1.hpid_iq.mv);
 8002758:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <BLDC_set_speed+0x504>)
 800275a:	e9d3 4590 	ldrd	r4, r5, [r3, #576]	; 0x240
 800275e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002760:	f7fd fef2 	bl	8000548 <__aeabi_f2d>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4620      	mov	r0, r4
 800276a:	4629      	mov	r1, r5
 800276c:	f7fd fd8e 	bl	800028c <__adddf3>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	f7fe fa36 	bl	8000be8 <__aeabi_d2f>
 800277c:	4604      	mov	r4, r0
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <BLDC_set_speed+0x504>)
 8002780:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f7fe fa2e 	bl	8000be8 <__aeabi_d2f>
 800278c:	4605      	mov	r5, r0
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <BLDC_set_speed+0x504>)
 8002790:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	f7fe fa26 	bl	8000be8 <__aeabi_d2f>
 800279c:	4603      	mov	r3, r0
 800279e:	ee01 3a10 	vmov	s2, r3
 80027a2:	ee00 5a90 	vmov	s1, r5
 80027a6:	ee00 4a10 	vmov	s0, r4
 80027aa:	4812      	ldr	r0, [pc, #72]	; (80027f4 <BLDC_set_speed+0x504>)
 80027ac:	f7ff f9d4 	bl	8001b58 <BLDC_inv_clark_park_trans>
	BLDC_spwm(&hbldc1);
 80027b0:	4810      	ldr	r0, [pc, #64]	; (80027f4 <BLDC_set_speed+0x504>)
 80027b2:	f7ff fab9 	bl	8001d28 <BLDC_spwm>
}
 80027b6:	bf00      	nop
 80027b8:	3744      	adds	r7, #68	; 0x44
 80027ba:	46bd      	mov	sp, r7
 80027bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...
 80027c8:	9abcaf48 	.word	0x9abcaf48
 80027cc:	3e7ad7f2 	.word	0x3e7ad7f2
 80027d0:	47ae147b 	.word	0x47ae147b
 80027d4:	3f947ae1 	.word	0x3f947ae1
 80027d8:	00000000 	.word	0x00000000
 80027dc:	418c9c38 	.word	0x418c9c38
 80027e0:	00000000 	.word	0x00000000
 80027e4:	40180000 	.word	0x40180000
 80027e8:	40790000 	.word	0x40790000
 80027ec:	407f4000 	.word	0x407f4000
 80027f0:	20000938 	.word	0x20000938
 80027f4:	20000850 	.word	0x20000850
 80027f8:	c2b40000 	.word	0xc2b40000
 80027fc:	20000858 	.word	0x20000858
 8002800:	200008c8 	.word	0x200008c8
 8002804:	00000000 	.word	0x00000000

08002808 <BLDC_set_angle>:

void BLDC_set_angle (float deg)
{
 8002808:	b5b0      	push	{r4, r5, r7, lr}
 800280a:	ed2d 8b02 	vpush	{d8}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	ed87 0a01 	vstr	s0, [r7, #4]
	float phase_shift = -90;
 8002816:	4b5a      	ldr	r3, [pc, #360]	; (8002980 <BLDC_set_angle+0x178>)
 8002818:	60fb      	str	r3, [r7, #12]
	hbldc2.c_loop++;
 800281a:	4b5a      	ldr	r3, [pc, #360]	; (8002984 <BLDC_set_angle+0x17c>)
 800281c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002820:	3301      	adds	r3, #1
 8002822:	4a58      	ldr	r2, [pc, #352]	; (8002984 <BLDC_set_angle+0x17c>)
 8002824:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
	if (hbldc2.c_loop >= 10)
 8002828:	4b56      	ldr	r3, [pc, #344]	; (8002984 <BLDC_set_angle+0x17c>)
 800282a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800282e:	2b09      	cmp	r3, #9
 8002830:	d912      	bls.n	8002858 <BLDC_set_angle+0x50>
	{
		hbldc2.c_loop = 0;
 8002832:	4b54      	ldr	r3, [pc, #336]	; (8002984 <BLDC_set_angle+0x17c>)
 8002834:	2200      	movs	r2, #0
 8002836:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		PID_calculate(&hbldc2.hpid_theta, deg, angle_sens);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fd fe84 	bl	8000548 <__aeabi_f2d>
 8002840:	4b51      	ldr	r3, [pc, #324]	; (8002988 <BLDC_set_angle+0x180>)
 8002842:	ed93 7b00 	vldr	d7, [r3]
 8002846:	eeb0 1a47 	vmov.f32	s2, s14
 800284a:	eef0 1a67 	vmov.f32	s3, s15
 800284e:	ec41 0b10 	vmov	d0, r0, r1
 8002852:	484e      	ldr	r0, [pc, #312]	; (800298c <BLDC_set_angle+0x184>)
 8002854:	f002 fd76 	bl	8005344 <PID_calculate>
	}
//	if (hbldc2.hpid_theta.mv < 0) phase_shift = 90.0;
	angle_sector = (raw_angle+mag_angle_offset) * 11.0;
 8002858:	4b4d      	ldr	r3, [pc, #308]	; (8002990 <BLDC_set_angle+0x188>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe73 	bl	8000548 <__aeabi_f2d>
 8002862:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <BLDC_set_angle+0x18c>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f7fd fd10 	bl	800028c <__adddf3>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	4b47      	ldr	r3, [pc, #284]	; (8002998 <BLDC_set_angle+0x190>)
 800287a:	f7fd febd 	bl	80005f8 <__aeabi_dmul>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	f7fe f9af 	bl	8000be8 <__aeabi_d2f>
 800288a:	4603      	mov	r3, r0
 800288c:	4a43      	ldr	r2, [pc, #268]	; (800299c <BLDC_set_angle+0x194>)
 800288e:	6013      	str	r3, [r2, #0]
	BLDC_get_current_filter(&hbldc2);
 8002890:	483c      	ldr	r0, [pc, #240]	; (8002984 <BLDC_set_angle+0x17c>)
 8002892:	f7ff f859 	bl	8001948 <BLDC_get_current_filter>
	BLDC_clark_park_trans(&hbldc2, angle_sector+phase_shift,
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <BLDC_set_angle+0x194>)
 8002898:	ed93 7a00 	vldr	s14, [r3]
 800289c:	edd7 7a03 	vldr	s15, [r7, #12]
 80028a0:	ee37 8a27 	vadd.f32	s16, s14, s15
		  hbldc2.hdlpf_current_filt[_u].result,
 80028a4:	4b37      	ldr	r3, [pc, #220]	; (8002984 <BLDC_set_angle+0x17c>)
 80028a6:	e9d3 2372 	ldrd	r2, r3, [r3, #456]	; 0x1c8
	BLDC_clark_park_trans(&hbldc2, angle_sector+phase_shift,
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f7fe f99b 	bl	8000be8 <__aeabi_d2f>
 80028b2:	4604      	mov	r4, r0
		  hbldc2.hdlpf_current_filt[_v].result,
 80028b4:	4b33      	ldr	r3, [pc, #204]	; (8002984 <BLDC_set_angle+0x17c>)
 80028b6:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
	BLDC_clark_park_trans(&hbldc2, angle_sector+phase_shift,
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f7fe f993 	bl	8000be8 <__aeabi_d2f>
 80028c2:	4605      	mov	r5, r0
		  hbldc2.hdlpf_current_filt[_w].result);
 80028c4:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <BLDC_set_angle+0x17c>)
 80028c6:	e9d3 237a 	ldrd	r2, r3, [r3, #488]	; 0x1e8
	BLDC_clark_park_trans(&hbldc2, angle_sector+phase_shift,
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	f7fe f98b 	bl	8000be8 <__aeabi_d2f>
 80028d2:	4603      	mov	r3, r0
 80028d4:	ee01 3a90 	vmov	s3, r3
 80028d8:	ee01 5a10 	vmov	s2, r5
 80028dc:	ee00 4a90 	vmov	s1, r4
 80028e0:	eeb0 0a48 	vmov.f32	s0, s16
 80028e4:	4827      	ldr	r0, [pc, #156]	; (8002984 <BLDC_set_angle+0x17c>)
 80028e6:	f7ff f85f 	bl	80019a8 <BLDC_clark_park_trans>
	PID_calculate(&hbldc2.hpid_id, 0, hbldc2.id_result);
 80028ea:	4b26      	ldr	r3, [pc, #152]	; (8002984 <BLDC_set_angle+0x17c>)
 80028ec:	ed93 7b9a 	vldr	d7, [r3, #616]	; 0x268
 80028f0:	eeb0 1a47 	vmov.f32	s2, s14
 80028f4:	eef0 1a67 	vmov.f32	s3, s15
 80028f8:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8002978 <BLDC_set_angle+0x170>
 80028fc:	4828      	ldr	r0, [pc, #160]	; (80029a0 <BLDC_set_angle+0x198>)
 80028fe:	f002 fd21 	bl	8005344 <PID_calculate>
	PID_calculate(&hbldc2.hpid_iq, (hbldc2.hpid_theta.mv), hbldc2.iq_result);
 8002902:	4b20      	ldr	r3, [pc, #128]	; (8002984 <BLDC_set_angle+0x17c>)
 8002904:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8002908:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <BLDC_set_angle+0x17c>)
 800290a:	ed93 6b9c 	vldr	d6, [r3, #624]	; 0x270
 800290e:	eeb0 1a46 	vmov.f32	s2, s12
 8002912:	eef0 1a66 	vmov.f32	s3, s13
 8002916:	eeb0 0a47 	vmov.f32	s0, s14
 800291a:	eef0 0a67 	vmov.f32	s1, s15
 800291e:	4821      	ldr	r0, [pc, #132]	; (80029a4 <BLDC_set_angle+0x19c>)
 8002920:	f002 fd10 	bl	8005344 <PID_calculate>
	BLDC_inv_clark_park_trans(&hbldc2, angle_sector+phase_shift, hbldc2.hpid_id.mv, hbldc2.hpid_iq.mv);
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <BLDC_set_angle+0x194>)
 8002926:	ed93 7a00 	vldr	s14, [r3]
 800292a:	edd7 7a03 	vldr	s15, [r7, #12]
 800292e:	ee37 8a27 	vadd.f32	s16, s14, s15
 8002932:	4b14      	ldr	r3, [pc, #80]	; (8002984 <BLDC_set_angle+0x17c>)
 8002934:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	f7fe f954 	bl	8000be8 <__aeabi_d2f>
 8002940:	4604      	mov	r4, r0
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <BLDC_set_angle+0x17c>)
 8002944:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f7fe f94c 	bl	8000be8 <__aeabi_d2f>
 8002950:	4603      	mov	r3, r0
 8002952:	ee01 3a10 	vmov	s2, r3
 8002956:	ee00 4a90 	vmov	s1, r4
 800295a:	eeb0 0a48 	vmov.f32	s0, s16
 800295e:	4809      	ldr	r0, [pc, #36]	; (8002984 <BLDC_set_angle+0x17c>)
 8002960:	f7ff f8fa 	bl	8001b58 <BLDC_inv_clark_park_trans>
	BLDC_spwm(&hbldc2);
 8002964:	4807      	ldr	r0, [pc, #28]	; (8002984 <BLDC_set_angle+0x17c>)
 8002966:	f7ff f9df 	bl	8001d28 <BLDC_spwm>
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	ecbd 8b02 	vpop	{d8}
 8002974:	bdb0      	pop	{r4, r5, r7, pc}
 8002976:	bf00      	nop
	...
 8002980:	c2b40000 	.word	0xc2b40000
 8002984:	20000b20 	.word	0x20000b20
 8002988:	20000ed0 	.word	0x20000ed0
 800298c:	20000c78 	.word	0x20000c78
 8002990:	20000eb8 	.word	0x20000eb8
 8002994:	20000ef0 	.word	0x20000ef0
 8002998:	40260000 	.word	0x40260000
 800299c:	20000ec0 	.word	0x20000ec0
 80029a0:	20000b28 	.word	0x20000b28
 80029a4:	20000b98 	.word	0x20000b98

080029a8 <CAN_get_z>:
	z_offset = z_lift;
	BLDC_set_z (0);
}

void CAN_get_z (void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
	int16_t z_temp;

	z_temp = (int16_t)(can_rx_buff[1] | can_rx_buff[2]<<8);
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <CAN_get_z+0x40>)
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <CAN_get_z+0x40>)
 80029b6:	789b      	ldrb	r3, [r3, #2]
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	b21b      	sxth	r3, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	80fb      	strh	r3, [r7, #6]
	z_cm = (float)z_temp / 10.0;
 80029c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029c4:	ee07 3a90 	vmov	s15, r3
 80029c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029cc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80029d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <CAN_get_z+0x44>)
 80029d6:	edc3 7a00 	vstr	s15, [r3]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000ea4 	.word	0x20000ea4
 80029ec:	20000ecc 	.word	0x20000ecc

080029f0 <BLDC2_zero_cal>:
}

void zero_mosfet ();

void BLDC2_zero_cal ()
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
	zero_mosfet ();
 80029f6:	f000 fa63 	bl	8002ec0 <zero_mosfet>
	uint32_t time = HAL_GetTick();
 80029fa:	f002 fe5f 	bl	80056bc <HAL_GetTick>
 80029fe:	6078      	str	r0, [r7, #4]
	while (HAL_GetTick() - time < 1000)
 8002a00:	e015      	b.n	8002a2e <BLDC2_zero_cal+0x3e>
	{
		BLDC_inv_clark_park_trans(&hbldc2, 0, 0, 0.4);
 8002a02:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8002a98 <BLDC2_zero_cal+0xa8>
 8002a06:	eddf 0a25 	vldr	s1, [pc, #148]	; 8002a9c <BLDC2_zero_cal+0xac>
 8002a0a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8002a9c <BLDC2_zero_cal+0xac>
 8002a0e:	4824      	ldr	r0, [pc, #144]	; (8002aa0 <BLDC2_zero_cal+0xb0>)
 8002a10:	f7ff f8a2 	bl	8001b58 <BLDC_inv_clark_park_trans>
		BLDC_spwm(&hbldc2);
 8002a14:	4822      	ldr	r0, [pc, #136]	; (8002aa0 <BLDC2_zero_cal+0xb0>)
 8002a16:	f7ff f987 	bl	8001d28 <BLDC_spwm>
		mag_angle_offset = raw_angle;
 8002a1a:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <BLDC2_zero_cal+0xb4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fd92 	bl	8000548 <__aeabi_f2d>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	491f      	ldr	r1, [pc, #124]	; (8002aa8 <BLDC2_zero_cal+0xb8>)
 8002a2a:	e9c1 2300 	strd	r2, r3, [r1]
	while (HAL_GetTick() - time < 1000)
 8002a2e:	f002 fe45 	bl	80056bc <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a3c:	d3e1      	bcc.n	8002a02 <BLDC2_zero_cal+0x12>
	}
	zero_mosfet ();
 8002a3e:	f000 fa3f 	bl	8002ec0 <zero_mosfet>
	flash_data_buff[0] = (int32_t)(mag_angle_offset*100000);
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <BLDC2_zero_cal+0xb8>)
 8002a44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a48:	a311      	add	r3, pc, #68	; (adr r3, 8002a90 <BLDC2_zero_cal+0xa0>)
 8002a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4e:	f7fd fdd3 	bl	80005f8 <__aeabi_dmul>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f7fe f87d 	bl	8000b58 <__aeabi_d2iz>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <BLDC2_zero_cal+0xbc>)
 8002a64:	601a      	str	r2, [r3, #0]
	FLASH_write(0, flash_data_buff, 2, DATA_TYPE_32);
 8002a66:	2302      	movs	r3, #2
 8002a68:	2202      	movs	r2, #2
 8002a6a:	4910      	ldr	r1, [pc, #64]	; (8002aac <BLDC2_zero_cal+0xbc>)
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f002 fb5b 	bl	8005128 <FLASH_write>

	uint32_t ln = sprintf ((char*)usb_tx_buff,
 8002a72:	490f      	ldr	r1, [pc, #60]	; (8002ab0 <BLDC2_zero_cal+0xc0>)
 8002a74:	480f      	ldr	r0, [pc, #60]	; (8002ab4 <BLDC2_zero_cal+0xc4>)
 8002a76:	f00d fee3 	bl	8010840 <siprintf>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	603b      	str	r3, [r7, #0]
			"motor calibration successful\nplease reset the device!\n");
	CDC_Transmit_FS (usb_tx_buff, ln);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	480b      	ldr	r0, [pc, #44]	; (8002ab4 <BLDC2_zero_cal+0xc4>)
 8002a86:	f00c fde3 	bl	800f650 <CDC_Transmit_FS>
	while (1) ;
 8002a8a:	e7fe      	b.n	8002a8a <BLDC2_zero_cal+0x9a>
 8002a8c:	f3af 8000 	nop.w
 8002a90:	00000000 	.word	0x00000000
 8002a94:	40f86a00 	.word	0x40f86a00
 8002a98:	3ecccccd 	.word	0x3ecccccd
 8002a9c:	00000000 	.word	0x00000000
 8002aa0:	20000b20 	.word	0x20000b20
 8002aa4:	20000eb8 	.word	0x20000eb8
 8002aa8:	20000ef0 	.word	0x20000ef0
 8002aac:	20000e20 	.word	0x20000e20
 8002ab0:	08013e94 	.word	0x08013e94
 8002ab4:	20000e40 	.word	0x20000e40

08002ab8 <str2float>:
}

double str2float (char *str, uint8_t ln)
{
 8002ab8:	b5b0      	push	{r4, r5, r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	70fb      	strb	r3, [r7, #3]
	double result;
	double num[2]={0, 0}, num2_dev = 10;
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	4b60      	ldr	r3, [pc, #384]	; (8002c64 <str2float+0x1ac>)
 8002ae2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint8_t start_num2;
	_Bool coma_det = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (uint8_t i = 0; i < ln; i++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002af2:	e094      	b.n	8002c1e <str2float+0x166>
	{
		if (!coma_det)
 8002af4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002af8:	f083 0301 	eor.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d049      	beq.n	8002b96 <str2float+0xde>
		{
			if (str[i] >= '0' && str[i] <= '9')
 8002b02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b2f      	cmp	r3, #47	; 0x2f
 8002b0e:	d92b      	bls.n	8002b68 <str2float+0xb0>
 8002b10:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	4413      	add	r3, r2
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b39      	cmp	r3, #57	; 0x39
 8002b1c:	d824      	bhi.n	8002b68 <str2float+0xb0>
			{
				if (i != 0) num[0] *= 10;
 8002b1e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <str2float+0x84>
 8002b26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	4b4d      	ldr	r3, [pc, #308]	; (8002c64 <str2float+0x1ac>)
 8002b30:	f7fd fd62 	bl	80005f8 <__aeabi_dmul>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	e9c7 2302 	strd	r2, r3, [r7, #8]
				num[0] += (str[i] - '0');
 8002b3c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b40:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	3b30      	subs	r3, #48	; 0x30
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fce9 	bl	8000524 <__aeabi_i2d>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4620      	mov	r0, r4
 8002b58:	4629      	mov	r1, r5
 8002b5a:	f7fd fb97 	bl	800028c <__adddf3>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002b66:	e055      	b.n	8002c14 <str2float+0x15c>
			}
			else if (str[i] == '.' || str[i] == ',')
 8002b68:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b2e      	cmp	r3, #46	; 0x2e
 8002b74:	d006      	beq.n	8002b84 <str2float+0xcc>
 8002b76:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b2c      	cmp	r3, #44	; 0x2c
 8002b82:	d147      	bne.n	8002c14 <str2float+0x15c>
			{
				coma_det = 1;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				start_num2 = i+1;
 8002b8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b94:	e03e      	b.n	8002c14 <str2float+0x15c>
			}
		}
		else
		{
			if (str[i] >= '0' && str[i] <= '9')
 8002b96:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b2f      	cmp	r3, #47	; 0x2f
 8002ba2:	d937      	bls.n	8002c14 <str2float+0x15c>
 8002ba4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b39      	cmp	r3, #57	; 0x39
 8002bb0:	d830      	bhi.n	8002c14 <str2float+0x15c>
			{
				if (i != start_num2)
 8002bb2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d015      	beq.n	8002bea <str2float+0x132>
				{
					num[1] *= 10;
 8002bbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <str2float+0x1ac>)
 8002bc8:	f7fd fd16 	bl	80005f8 <__aeabi_dmul>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
					num2_dev *= 10;
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <str2float+0x1ac>)
 8002bda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bde:	f7fd fd0b 	bl	80005f8 <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				}
				num[1] += (str[i] - '0');
 8002bea:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002bee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	3b30      	subs	r3, #48	; 0x30
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fc92 	bl	8000524 <__aeabi_i2d>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4620      	mov	r0, r4
 8002c06:	4629      	mov	r1, r5
 8002c08:	f7fd fb40 	bl	800028c <__adddf3>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (uint8_t i = 0; i < ln; i++)
 8002c14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002c1e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	f4ff af65 	bcc.w	8002af4 <str2float+0x3c>
			}
		}
	}
	result = num[0] + num[1]/num2_dev;
 8002c2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c36:	f7fd fe09 	bl	800084c <__aeabi_ddiv>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4620      	mov	r0, r4
 8002c40:	4629      	mov	r1, r5
 8002c42:	f7fd fb23 	bl	800028c <__adddf3>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	return result;
 8002c4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c52:	ec43 2b17 	vmov	d7, r2, r3
}
 8002c56:	eeb0 0a47 	vmov.f32	s0, s14
 8002c5a:	eef0 0a67 	vmov.f32	s1, s15
 8002c5e:	3730      	adds	r7, #48	; 0x30
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bdb0      	pop	{r4, r5, r7, pc}
 8002c64:	40240000 	.word	0x40240000

08002c68 <str_compare>:

_Bool str_compare (char *str1, char *str2, uint32_t ln)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
	_Bool result = 1;
 8002c74:	2301      	movs	r3, #1
 8002c76:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < ln; i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	e00f      	b.n	8002c9e <str_compare+0x36>
	{
		if (str1[i] != str2[i]){
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	440b      	add	r3, r1
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d002      	beq.n	8002c98 <str_compare+0x30>
			result = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	75fb      	strb	r3, [r7, #23]
			break;
 8002c96:	e006      	b.n	8002ca6 <str_compare+0x3e>
	for (uint32_t i = 0; i < ln; i++)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d3eb      	bcc.n	8002c7e <str_compare+0x16>
		}
	}
	return result;
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <usb_motor_calibrate>:

void usb_motor_calibrate (char *cmd)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	if (str_compare (cmd, "M2+CAL", 6))
 8002cbc:	2206      	movs	r2, #6
 8002cbe:	4907      	ldr	r1, [pc, #28]	; (8002cdc <usb_motor_calibrate+0x28>)
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ffd1 	bl	8002c68 <str_compare>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <usb_motor_calibrate+0x1e>
	{
		mag_zero_set_flag = 1;
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <usb_motor_calibrate+0x2c>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
	}
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	08013ecc 	.word	0x08013ecc
 8002ce0:	20000efb 	.word	0x20000efb

08002ce4 <pid_setting>:

void pid_setting (char *cmd)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	uint8_t ln_num = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]
	if (cmd[0] == 'M')
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b4d      	cmp	r3, #77	; 0x4d
 8002cf6:	f040 80bd 	bne.w	8002e74 <pid_setting+0x190>
	{
		for (uint8_t n = 2; cmd[n] != 0; n++)
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	73bb      	strb	r3, [r7, #14]
 8002cfe:	e0b1      	b.n	8002e64 <pid_setting+0x180>
		{
			if (cmd[n] == '+')
 8002d00:	7bbb      	ldrb	r3, [r7, #14]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b2b      	cmp	r3, #43	; 0x2b
 8002d0a:	f040 80a8 	bne.w	8002e5e <pid_setting+0x17a>
			{
				if (cmd[n+1] == 'K')
 8002d0e:	7bbb      	ldrb	r3, [r7, #14]
 8002d10:	3301      	adds	r3, #1
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b4b      	cmp	r3, #75	; 0x4b
 8002d1a:	f040 80a0 	bne.w	8002e5e <pid_setting+0x17a>
				{
					ln_num = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
					for (uint8_t i = n+3; (cmd[i] >= '0' && cmd[i] <= '9') || cmd[i]=='.' || cmd[i]==','; i++)
 8002d22:	7bbb      	ldrb	r3, [r7, #14]
 8002d24:	3303      	adds	r3, #3
 8002d26:	737b      	strb	r3, [r7, #13]
 8002d28:	e005      	b.n	8002d36 <pid_setting+0x52>
					{
						ln_num++;
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
					for (uint8_t i = n+3; (cmd[i] >= '0' && cmd[i] <= '9') || cmd[i]=='.' || cmd[i]==','; i++)
 8002d30:	7b7b      	ldrb	r3, [r7, #13]
 8002d32:	3301      	adds	r3, #1
 8002d34:	737b      	strb	r3, [r7, #13]
 8002d36:	7b7b      	ldrb	r3, [r7, #13]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b2f      	cmp	r3, #47	; 0x2f
 8002d40:	d905      	bls.n	8002d4e <pid_setting+0x6a>
 8002d42:	7b7b      	ldrb	r3, [r7, #13]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b39      	cmp	r3, #57	; 0x39
 8002d4c:	d9ed      	bls.n	8002d2a <pid_setting+0x46>
 8002d4e:	7b7b      	ldrb	r3, [r7, #13]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b2e      	cmp	r3, #46	; 0x2e
 8002d58:	d0e7      	beq.n	8002d2a <pid_setting+0x46>
 8002d5a:	7b7b      	ldrb	r3, [r7, #13]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b2c      	cmp	r3, #44	; 0x2c
 8002d64:	d0e1      	beq.n	8002d2a <pid_setting+0x46>
					}
					switch (cmd[n+2])
 8002d66:	7bbb      	ldrb	r3, [r7, #14]
 8002d68:	3302      	adds	r3, #2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b50      	cmp	r3, #80	; 0x50
 8002d72:	d006      	beq.n	8002d82 <pid_setting+0x9e>
 8002d74:	2b50      	cmp	r3, #80	; 0x50
 8002d76:	dc37      	bgt.n	8002de8 <pid_setting+0x104>
 8002d78:	2b44      	cmp	r3, #68	; 0x44
 8002d7a:	d024      	beq.n	8002dc6 <pid_setting+0xe2>
 8002d7c:	2b49      	cmp	r3, #73	; 0x49
 8002d7e:	d011      	beq.n	8002da4 <pid_setting+0xc0>
 8002d80:	e032      	b.n	8002de8 <pid_setting+0x104>
					{
					case 'P':
						x_kp = str2float(cmd+n+3, ln_num);
 8002d82:	7bbb      	ldrb	r3, [r7, #14]
 8002d84:	3303      	adds	r3, #3
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fe92 	bl	8002ab8 <str2float>
 8002d94:	eeb0 7a40 	vmov.f32	s14, s0
 8002d98:	eef0 7a60 	vmov.f32	s15, s1
 8002d9c:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <pid_setting+0x1c0>)
 8002d9e:	ed83 7b00 	vstr	d7, [r3]
						break;
 8002da2:	e021      	b.n	8002de8 <pid_setting+0x104>
					case 'I':
						x_ki = str2float(cmd+n+3, ln_num);
 8002da4:	7bbb      	ldrb	r3, [r7, #14]
 8002da6:	3303      	adds	r3, #3
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fe81 	bl	8002ab8 <str2float>
 8002db6:	eeb0 7a40 	vmov.f32	s14, s0
 8002dba:	eef0 7a60 	vmov.f32	s15, s1
 8002dbe:	4b3a      	ldr	r3, [pc, #232]	; (8002ea8 <pid_setting+0x1c4>)
 8002dc0:	ed83 7b00 	vstr	d7, [r3]
						break;
 8002dc4:	e010      	b.n	8002de8 <pid_setting+0x104>
					case 'D':
						x_kd = str2float(cmd+n+3, ln_num);
 8002dc6:	7bbb      	ldrb	r3, [r7, #14]
 8002dc8:	3303      	adds	r3, #3
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fe70 	bl	8002ab8 <str2float>
 8002dd8:	eeb0 7a40 	vmov.f32	s14, s0
 8002ddc:	eef0 7a60 	vmov.f32	s15, s1
 8002de0:	4b32      	ldr	r3, [pc, #200]	; (8002eac <pid_setting+0x1c8>)
 8002de2:	ed83 7b00 	vstr	d7, [r3]
						break;
 8002de6:	bf00      	nop
					}
					if (cmd[1] == '1')
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3301      	adds	r3, #1
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b31      	cmp	r3, #49	; 0x31
 8002df0:	d118      	bne.n	8002e24 <pid_setting+0x140>
					{

						PID_set_konstanta(&hbldc1.hpid_omega, x_kp, x_ki, x_kd);
 8002df2:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <pid_setting+0x1c0>)
 8002df4:	ed93 7b00 	vldr	d7, [r3]
 8002df8:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <pid_setting+0x1c4>)
 8002dfa:	ed93 6b00 	vldr	d6, [r3]
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <pid_setting+0x1c8>)
 8002e00:	ed93 5b00 	vldr	d5, [r3]
 8002e04:	eeb0 2a45 	vmov.f32	s4, s10
 8002e08:	eef0 2a65 	vmov.f32	s5, s11
 8002e0c:	eeb0 1a46 	vmov.f32	s2, s12
 8002e10:	eef0 1a66 	vmov.f32	s3, s13
 8002e14:	eeb0 0a47 	vmov.f32	s0, s14
 8002e18:	eef0 0a67 	vmov.f32	s1, s15
 8002e1c:	4824      	ldr	r0, [pc, #144]	; (8002eb0 <pid_setting+0x1cc>)
 8002e1e:	f002 fa59 	bl	80052d4 <PID_set_konstanta>
 8002e22:	e01c      	b.n	8002e5e <pid_setting+0x17a>
//						PID_set_konstanta(&hbldc1.hpid_id, x_kp, x_ki, 0);
//						PID_set_konstanta(&hbldc1.hpid_iq, x_kp, x_ki, 0);
					}
					else if (cmd[1] == '2')
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3301      	adds	r3, #1
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b32      	cmp	r3, #50	; 0x32
 8002e2c:	d117      	bne.n	8002e5e <pid_setting+0x17a>
					{
						PID_set_konstanta(&hbldc2.hpid_theta, x_kp, x_ki, x_kd);
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <pid_setting+0x1c0>)
 8002e30:	ed93 7b00 	vldr	d7, [r3]
 8002e34:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <pid_setting+0x1c4>)
 8002e36:	ed93 6b00 	vldr	d6, [r3]
 8002e3a:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <pid_setting+0x1c8>)
 8002e3c:	ed93 5b00 	vldr	d5, [r3]
 8002e40:	eeb0 2a45 	vmov.f32	s4, s10
 8002e44:	eef0 2a65 	vmov.f32	s5, s11
 8002e48:	eeb0 1a46 	vmov.f32	s2, s12
 8002e4c:	eef0 1a66 	vmov.f32	s3, s13
 8002e50:	eeb0 0a47 	vmov.f32	s0, s14
 8002e54:	eef0 0a67 	vmov.f32	s1, s15
 8002e58:	4816      	ldr	r0, [pc, #88]	; (8002eb4 <pid_setting+0x1d0>)
 8002e5a:	f002 fa3b 	bl	80052d4 <PID_set_konstanta>
		for (uint8_t n = 2; cmd[n] != 0; n++)
 8002e5e:	7bbb      	ldrb	r3, [r7, #14]
 8002e60:	3301      	adds	r3, #1
 8002e62:	73bb      	strb	r3, [r7, #14]
 8002e64:	7bbb      	ldrb	r3, [r7, #14]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f47f af47 	bne.w	8002d00 <pid_setting+0x1c>
	}
	else if (cmd[0] == '0')
	{
		start_checking_mosfet = 1;
	}
}
 8002e72:	e012      	b.n	8002e9a <pid_setting+0x1b6>
	else if (cmd[0] == 'N' || cmd[0] == 'n')
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b4e      	cmp	r3, #78	; 0x4e
 8002e7a:	d003      	beq.n	8002e84 <pid_setting+0x1a0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b6e      	cmp	r3, #110	; 0x6e
 8002e82:	d103      	bne.n	8002e8c <pid_setting+0x1a8>
		next_change_param = 1;
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <pid_setting+0x1d4>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
}
 8002e8a:	e006      	b.n	8002e9a <pid_setting+0x1b6>
	else if (cmd[0] == '0')
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b30      	cmp	r3, #48	; 0x30
 8002e92:	d102      	bne.n	8002e9a <pid_setting+0x1b6>
		start_checking_mosfet = 1;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <pid_setting+0x1d8>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000f08 	.word	0x20000f08
 8002ea8:	20000f10 	.word	0x20000f10
 8002eac:	20000f18 	.word	0x20000f18
 8002eb0:	20000938 	.word	0x20000938
 8002eb4:	20000c78 	.word	0x20000c78
 8002eb8:	20000f20 	.word	0x20000f20
 8002ebc:	20000f21 	.word	0x20000f21

08002ec0 <zero_mosfet>:

void zero_mosfet ()
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
	hbldc1.ia = 0;
 8002ec4:	4918      	ldr	r1, [pc, #96]	; (8002f28 <zero_mosfet+0x68>)
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280
	hbldc1.ib = 0;
 8002ed2:	4915      	ldr	r1, [pc, #84]	; (8002f28 <zero_mosfet+0x68>)
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9c1 23a2 	strd	r2, r3, [r1, #648]	; 0x288
	hbldc1.ic = 0;
 8002ee0:	4911      	ldr	r1, [pc, #68]	; (8002f28 <zero_mosfet+0x68>)
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9c1 23a4 	strd	r2, r3, [r1, #656]	; 0x290
	hbldc2.ia = 0;
 8002eee:	490f      	ldr	r1, [pc, #60]	; (8002f2c <zero_mosfet+0x6c>)
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280
	hbldc2.ib = 0;
 8002efc:	490b      	ldr	r1, [pc, #44]	; (8002f2c <zero_mosfet+0x6c>)
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9c1 23a2 	strd	r2, r3, [r1, #648]	; 0x288
	hbldc2.ic = 0;
 8002f0a:	4908      	ldr	r1, [pc, #32]	; (8002f2c <zero_mosfet+0x6c>)
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9c1 23a4 	strd	r2, r3, [r1, #656]	; 0x290
	BLDC_spwm(&hbldc1);
 8002f18:	4803      	ldr	r0, [pc, #12]	; (8002f28 <zero_mosfet+0x68>)
 8002f1a:	f7fe ff05 	bl	8001d28 <BLDC_spwm>
	BLDC_spwm(&hbldc2);
 8002f1e:	4803      	ldr	r0, [pc, #12]	; (8002f2c <zero_mosfet+0x6c>)
 8002f20:	f7fe ff02 	bl	8001d28 <BLDC_spwm>
}
 8002f24:	bf00      	nop
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000850 	.word	0x20000850
 8002f2c:	20000b20 	.word	0x20000b20

08002f30 <zero_steer>:


//============================================================================================

void zero_steer ()
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
	float angle_steer_call = angle_sens;
 8002f36:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <zero_steer+0xb8>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7fd fe52 	bl	8000be8 <__aeabi_d2f>
 8002f44:	4603      	mov	r3, r0
 8002f46:	60fb      	str	r3, [r7, #12]
	uint32_t t_steer_call = HAL_GetTick(), t_validate;
 8002f48:	f002 fbb8 	bl	80056bc <HAL_GetTick>
 8002f4c:	60b8      	str	r0, [r7, #8]
	t_validate = HAL_GetTick();
 8002f4e:	f002 fbb5 	bl	80056bc <HAL_GetTick>
 8002f52:	6078      	str	r0, [r7, #4]
	wheel_state = 1;
 8002f54:	4b25      	ldr	r3, [pc, #148]	; (8002fec <zero_steer+0xbc>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]
	while (wheel_state)
 8002f5a:	e032      	b.n	8002fc2 <zero_steer+0x92>
	{
		if (HAL_GetTick() != t_steer_call)
 8002f5c:	f002 fbae 	bl	80056bc <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d012      	beq.n	8002f8e <zero_steer+0x5e>
		{
		  t_steer_call = HAL_GetTick();
 8002f68:	f002 fba8 	bl	80056bc <HAL_GetTick>
 8002f6c:	60b8      	str	r0, [r7, #8]
		  angle_steer_call+=0.1;
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f7fd faea 	bl	8000548 <__aeabi_f2d>
 8002f74:	a318      	add	r3, pc, #96	; (adr r3, 8002fd8 <zero_steer+0xa8>)
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	f7fd f987 	bl	800028c <__adddf3>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	f7fd fe2f 	bl	8000be8 <__aeabi_d2f>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	60fb      	str	r3, [r7, #12]
		}
		if (!steer_call_ready)
 8002f8e:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <zero_steer+0xc0>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	f083 0301 	eor.w	r3, r3, #1
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <zero_steer+0x82>
		{
		  if (HAL_GetTick() - t_validate > 1000) steer_call_ready = 1;
 8002f9c:	f002 fb8e 	bl	80056bc <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002faa:	d902      	bls.n	8002fb2 <zero_steer+0x82>
 8002fac:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <zero_steer+0xc0>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
		}
		BLDC_set_angle (angle_steer_call);
 8002fb2:	ed97 0a03 	vldr	s0, [r7, #12]
 8002fb6:	f7ff fc27 	bl	8002808 <BLDC_set_angle>
		BLDC_set_speed (0);
 8002fba:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8002fe0 <zero_steer+0xb0>
 8002fbe:	f7ff f997 	bl	80022f0 <BLDC_set_speed>
	while (wheel_state)
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <zero_steer+0xbc>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1c8      	bne.n	8002f5c <zero_steer+0x2c>

	}
}
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	f3af 8000 	nop.w
 8002fd8:	9999999a 	.word	0x9999999a
 8002fdc:	3fb99999 	.word	0x3fb99999
	...
 8002fe8:	20000ed0 	.word	0x20000ed0
 8002fec:	20000efa 	.word	0x20000efa
 8002ff0:	20000efc 	.word	0x20000efc
 8002ff4:	00000000 	.word	0x00000000

08002ff8 <wheel_init>:
//		}

//============================================================================================

void wheel_init ()
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	wheel_addr = 0x200;
	zero_offset = -55.0;
	mag_angle_offset = -2.4;
#else
#ifdef WHEEL_1
	wheel_addr = 0x211;
 8002ffc:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <wheel_init+0x80>)
 8002ffe:	f240 2211 	movw	r2, #529	; 0x211
 8003002:	801a      	strh	r2, [r3, #0]
	zero_offset = 64.0; //-175.0
 8003004:	491d      	ldr	r1, [pc, #116]	; (800307c <wheel_init+0x84>)
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <wheel_init+0x88>)
 800300c:	e9c1 2300 	strd	r2, r3, [r1]
	mag_angle_offset = -50.6;//-42.0
 8003010:	491c      	ldr	r1, [pc, #112]	; (8003084 <wheel_init+0x8c>)
 8003012:	a317      	add	r3, pc, #92	; (adr r3, 8003070 <wheel_init+0x78>)
 8003014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003018:	e9c1 2300 	strd	r2, r3, [r1]
#endif
#endif
#endif
#endif

	hbldc1.channel = _BLDC1;
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <wheel_init+0x90>)
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
	hbldc2.channel = _BLDC2;
 8003022:	4b1a      	ldr	r3, [pc, #104]	; (800308c <wheel_init+0x94>)
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
	hbldc1.last_sector_theta = hbldc1.sector_theta;
 8003028:	4b17      	ldr	r3, [pc, #92]	; (8003088 <wheel_init+0x90>)
 800302a:	e9d3 238c 	ldrd	r2, r3, [r3, #560]	; 0x230
 800302e:	4916      	ldr	r1, [pc, #88]	; (8003088 <wheel_init+0x90>)
 8003030:	e9c1 238e 	strd	r2, r3, [r1, #568]	; 0x238

	CAN_filter_config ();
 8003034:	f7fd ffaa 	bl	8000f8c <CAN_filter_config>
	HAL_CAN_Start(&hcan1);
 8003038:	4815      	ldr	r0, [pc, #84]	; (8003090 <wheel_init+0x98>)
 800303a:	f003 fb7b 	bl	8006734 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800303e:	2102      	movs	r1, #2
 8003040:	4813      	ldr	r0, [pc, #76]	; (8003090 <wheel_init+0x98>)
 8003042:	f003 fda8 	bl	8006b96 <HAL_CAN_ActivateNotification>
	TxHeader.IDE = CAN_ID_STD;
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <wheel_init+0x9c>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <wheel_init+0x9c>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]

	HAL_Delay(200);
 8003052:	20c8      	movs	r0, #200	; 0xc8
 8003054:	f002 fb3e 	bl	80056d4 <HAL_Delay>
	FLASH_set_sector_addrs (FLASH_SECTOR_11, 0x080E0000);
 8003058:	490f      	ldr	r1, [pc, #60]	; (8003098 <wheel_init+0xa0>)
 800305a:	200b      	movs	r0, #11
 800305c:	f002 f84e 	bl	80050fc <FLASH_set_sector_addrs>
	//  flash_data_buff[0] = (int32_t)(a*100000);
	//  flash_data_buff[1] = (int32_t)(b*100000);
	//  FLASH_write(0, flash_data_buff, 2, DATA_TYPE_32);
	FLASH_read(0, flash_data_buff, 2, DATA_TYPE_32);
 8003060:	2302      	movs	r3, #2
 8003062:	2202      	movs	r2, #2
 8003064:	490d      	ldr	r1, [pc, #52]	; (800309c <wheel_init+0xa4>)
 8003066:	2000      	movs	r0, #0
 8003068:	f002 f8d8 	bl	800521c <FLASH_read>
//	mag_angle_offset =  (float)(int32_t)flash_data_buff[0] / 100000;
//	b =  (float)(int32_t)flash_data_buff[1] / 100000;
}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}
 8003070:	cccccccd 	.word	0xcccccccd
 8003074:	c0494ccc 	.word	0xc0494ccc
 8003078:	20000efe 	.word	0x20000efe
 800307c:	20000ee8 	.word	0x20000ee8
 8003080:	40500000 	.word	0x40500000
 8003084:	20000ef0 	.word	0x20000ef0
 8003088:	20000850 	.word	0x20000850
 800308c:	20000b20 	.word	0x20000b20
 8003090:	200004e4 	.word	0x200004e4
 8003094:	2000081c 	.word	0x2000081c
 8003098:	080e0000 	.word	0x080e0000
 800309c:	20000e20 	.word	0x20000e20

080030a0 <HAL_ADCEx_InjectedConvCpltCallback>:

//============================================================================================

uint32_t tcnt1, tcnt2;
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a20      	ldr	r2, [pc, #128]	; (8003130 <HAL_ADCEx_InjectedConvCpltCallback+0x90>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d11a      	bne.n	80030e8 <HAL_ADCEx_InjectedConvCpltCallback+0x48>
	{
		hbldc1.adc_buff[0] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80030b2:	2101      	movs	r1, #1
 80030b4:	481f      	ldr	r0, [pc, #124]	; (8003134 <HAL_ADCEx_InjectedConvCpltCallback+0x94>)
 80030b6:	f002 ff93 	bl	8005fe0 <HAL_ADCEx_InjectedGetValue>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4a1e      	ldr	r2, [pc, #120]	; (8003138 <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 80030be:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
		hbldc1.adc_buff[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 80030c2:	2102      	movs	r1, #2
 80030c4:	481b      	ldr	r0, [pc, #108]	; (8003134 <HAL_ADCEx_InjectedConvCpltCallback+0x94>)
 80030c6:	f002 ff8b 	bl	8005fe0 <HAL_ADCEx_InjectedGetValue>
 80030ca:	4603      	mov	r3, r0
 80030cc:	4a1a      	ldr	r2, [pc, #104]	; (8003138 <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 80030ce:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		hbldc1.adc_buff[2] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3);
 80030d2:	2103      	movs	r1, #3
 80030d4:	4817      	ldr	r0, [pc, #92]	; (8003134 <HAL_ADCEx_InjectedConvCpltCallback+0x94>)
 80030d6:	f002 ff83 	bl	8005fe0 <HAL_ADCEx_InjectedGetValue>
 80030da:	4603      	mov	r3, r0
 80030dc:	4a16      	ldr	r2, [pc, #88]	; (8003138 <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 80030de:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
		BLDC_get_current (&hbldc1);
 80030e2:	4815      	ldr	r0, [pc, #84]	; (8003138 <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 80030e4:	f7fe fb34 	bl	8001750 <BLDC_get_current>
	}
	if (hadc->Instance == ADC3)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a13      	ldr	r2, [pc, #76]	; (800313c <HAL_ADCEx_InjectedConvCpltCallback+0x9c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d11a      	bne.n	8003128 <HAL_ADCEx_InjectedConvCpltCallback+0x88>
	{
		hbldc2.adc_buff[0] = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 80030f2:	2101      	movs	r1, #1
 80030f4:	4812      	ldr	r0, [pc, #72]	; (8003140 <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 80030f6:	f002 ff73 	bl	8005fe0 <HAL_ADCEx_InjectedGetValue>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4a11      	ldr	r2, [pc, #68]	; (8003144 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>)
 80030fe:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
		hbldc2.adc_buff[1] = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_2);
 8003102:	2102      	movs	r1, #2
 8003104:	480e      	ldr	r0, [pc, #56]	; (8003140 <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 8003106:	f002 ff6b 	bl	8005fe0 <HAL_ADCEx_InjectedGetValue>
 800310a:	4603      	mov	r3, r0
 800310c:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>)
 800310e:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		hbldc2.adc_buff[2] = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_3);
 8003112:	2103      	movs	r1, #3
 8003114:	480a      	ldr	r0, [pc, #40]	; (8003140 <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 8003116:	f002 ff63 	bl	8005fe0 <HAL_ADCEx_InjectedGetValue>
 800311a:	4603      	mov	r3, r0
 800311c:	4a09      	ldr	r2, [pc, #36]	; (8003144 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>)
 800311e:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
		BLDC_get_current (&hbldc2);
 8003122:	4808      	ldr	r0, [pc, #32]	; (8003144 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>)
 8003124:	f7fe fb14 	bl	8001750 <BLDC_get_current>
	}
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40012100 	.word	0x40012100
 8003134:	20000334 	.word	0x20000334
 8003138:	20000850 	.word	0x20000850
 800313c:	40012200 	.word	0x40012200
 8003140:	2000037c 	.word	0x2000037c
 8003144:	20000b20 	.word	0x20000b20

08003148 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <HAL_TIM_IC_CaptureCallback+0x40>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d112      	bne.n	8003180 <HAL_TIM_IC_CaptureCallback+0x38>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7f1b      	ldrb	r3, [r3, #28]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d10e      	bne.n	8003180 <HAL_TIM_IC_CaptureCallback+0x38>
		{
			BLDC_get_rpm (&hbldc1);
 8003162:	480a      	ldr	r0, [pc, #40]	; (800318c <HAL_TIM_IC_CaptureCallback+0x44>)
 8003164:	f7ff f894 	bl	8002290 <BLDC_get_rpm>
			BLDC_get_sector (&hbldc1);
 8003168:	4808      	ldr	r0, [pc, #32]	; (800318c <HAL_TIM_IC_CaptureCallback+0x44>)
 800316a:	f7fe ff21 	bl	8001fb0 <BLDC_get_sector>
			BLDC_rpm_sens (&hbldc1);
 800316e:	4807      	ldr	r0, [pc, #28]	; (800318c <HAL_TIM_IC_CaptureCallback+0x44>)
 8003170:	f7ff f854 	bl	800221c <BLDC_rpm_sens>
			hbldc1.zero_det_t = HAL_GetTick();
 8003174:	f002 faa2 	bl	80056bc <HAL_GetTick>
 8003178:	4603      	mov	r3, r0
 800317a:	4a04      	ldr	r2, [pc, #16]	; (800318c <HAL_TIM_IC_CaptureCallback+0x44>)
 800317c:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
		}
	}
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40000c00 	.word	0x40000c00
 800318c:	20000850 	.word	0x20000850

08003190 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a13      	ldr	r2, [pc, #76]	; (80031ec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d104      	bne.n	80031ac <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		cnt_ovf++;
 80031a2:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3301      	adds	r3, #1
 80031a8:	4a11      	ldr	r2, [pc, #68]	; (80031f0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80031aa:	6013      	str	r3, [r2, #0]
	}
	if (htim->Instance == TIM7)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d10f      	bne.n	80031d6 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		if (read_ready)
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_TIM_PeriodElapsedCallback+0x46>
		{
//			HAL_TIM_Base_Stop_IT(&htim7);
		  if (AS5048A_send_data (1, 1, 0x3fff) == HAL_OK)
 80031be:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80031c2:	2101      	movs	r1, #1
 80031c4:	2001      	movs	r0, #1
 80031c6:	f7fe f909 	bl	80013dc <AS5048A_send_data>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <HAL_TIM_PeriodElapsedCallback+0x46>
			  read_ready = 0;
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
		}
	}
	if (htim->Instance == TIM4)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a08      	ldr	r2, [pc, #32]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d101      	bne.n	80031e4 <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		counting_time ();
 80031e0:	f002 f9cc 	bl	800557c <counting_time>
	}
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40000400 	.word	0x40000400
 80031f0:	20000e2c 	.word	0x20000e2c
 80031f4:	40001400 	.word	0x40001400
 80031f8:	20000ef9 	.word	0x20000ef9
 80031fc:	40000800 	.word	0x40000800

08003200 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003200:	b5b0      	push	{r4, r5, r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a7e      	ldr	r2, [pc, #504]	; (8003408 <HAL_SPI_TxRxCpltCallback+0x208>)
 800320e:	4293      	cmp	r3, r2
 8003210:	f040 80e9 	bne.w	80033e6 <HAL_SPI_TxRxCpltCallback+0x1e6>
	{
		encd_data_rx = spi_rx[0] << 8 | spi_rx[1];
 8003214:	4b7d      	ldr	r3, [pc, #500]	; (800340c <HAL_SPI_TxRxCpltCallback+0x20c>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	b21a      	sxth	r2, r3
 800321c:	4b7b      	ldr	r3, [pc, #492]	; (800340c <HAL_SPI_TxRxCpltCallback+0x20c>)
 800321e:	785b      	ldrb	r3, [r3, #1]
 8003220:	b21b      	sxth	r3, r3
 8003222:	4313      	orrs	r3, r2
 8003224:	b21b      	sxth	r3, r3
 8003226:	b29a      	uxth	r2, r3
 8003228:	4b79      	ldr	r3, [pc, #484]	; (8003410 <HAL_SPI_TxRxCpltCallback+0x210>)
 800322a:	801a      	strh	r2, [r3, #0]
		error_flag = (encd_data_rx>>14) & 1;
 800322c:	4b78      	ldr	r3, [pc, #480]	; (8003410 <HAL_SPI_TxRxCpltCallback+0x210>)
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	0b9b      	lsrs	r3, r3, #14
 8003232:	b29b      	uxth	r3, r3
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf14      	ite	ne
 800323c:	2301      	movne	r3, #1
 800323e:	2300      	moveq	r3, #0
 8003240:	b2da      	uxtb	r2, r3
 8003242:	4b74      	ldr	r3, [pc, #464]	; (8003414 <HAL_SPI_TxRxCpltCallback+0x214>)
 8003244:	701a      	strb	r2, [r3, #0]
		if (!error_flag)
 8003246:	4b73      	ldr	r3, [pc, #460]	; (8003414 <HAL_SPI_TxRxCpltCallback+0x214>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	f083 0301 	eor.w	r3, r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80bf 	beq.w	80033d4 <HAL_SPI_TxRxCpltCallback+0x1d4>
		{
			uint16_t val = (encd_data_rx & (0x3fff))>>0;//4
 8003256:	4b6e      	ldr	r3, [pc, #440]	; (8003410 <HAL_SPI_TxRxCpltCallback+0x210>)
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800325e:	81fb      	strh	r3, [r7, #14]
//			raw_angle = val * 720.0 / 1023.0;
			raw_angle = (double)val * 720.0 / (double)0x3fff;//1023.0
 8003260:	89fb      	ldrh	r3, [r7, #14]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd f94e 	bl	8000504 <__aeabi_ui2d>
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <HAL_SPI_TxRxCpltCallback+0x218>)
 800326e:	f7fd f9c3 	bl	80005f8 <__aeabi_dmul>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4610      	mov	r0, r2
 8003278:	4619      	mov	r1, r3
 800327a:	a35d      	add	r3, pc, #372	; (adr r3, 80033f0 <HAL_SPI_TxRxCpltCallback+0x1f0>)
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f7fd fae4 	bl	800084c <__aeabi_ddiv>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	f7fd fcac 	bl	8000be8 <__aeabi_d2f>
 8003290:	4603      	mov	r3, r0
 8003292:	4a62      	ldr	r2, [pc, #392]	; (800341c <HAL_SPI_TxRxCpltCallback+0x21c>)
 8003294:	6013      	str	r3, [r2, #0]
			if (raw_angle - last_raw_angle < -300)
 8003296:	4b61      	ldr	r3, [pc, #388]	; (800341c <HAL_SPI_TxRxCpltCallback+0x21c>)
 8003298:	ed93 7a00 	vldr	s14, [r3]
 800329c:	4b60      	ldr	r3, [pc, #384]	; (8003420 <HAL_SPI_TxRxCpltCallback+0x220>)
 800329e:	edd3 7a00 	vldr	s15, [r3]
 80032a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003424 <HAL_SPI_TxRxCpltCallback+0x224>
 80032aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b2:	d50d      	bpl.n	80032d0 <HAL_SPI_TxRxCpltCallback+0xd0>
			{
				raw_angle_ovf++;
 80032b4:	4b5c      	ldr	r3, [pc, #368]	; (8003428 <HAL_SPI_TxRxCpltCallback+0x228>)
 80032b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	4b5b      	ldr	r3, [pc, #364]	; (800342c <HAL_SPI_TxRxCpltCallback+0x22c>)
 80032c0:	f7fc ffe4 	bl	800028c <__adddf3>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4957      	ldr	r1, [pc, #348]	; (8003428 <HAL_SPI_TxRxCpltCallback+0x228>)
 80032ca:	e9c1 2300 	strd	r2, r3, [r1]
 80032ce:	e01b      	b.n	8003308 <HAL_SPI_TxRxCpltCallback+0x108>
			}
			else if (raw_angle - last_raw_angle > 300)
 80032d0:	4b52      	ldr	r3, [pc, #328]	; (800341c <HAL_SPI_TxRxCpltCallback+0x21c>)
 80032d2:	ed93 7a00 	vldr	s14, [r3]
 80032d6:	4b52      	ldr	r3, [pc, #328]	; (8003420 <HAL_SPI_TxRxCpltCallback+0x220>)
 80032d8:	edd3 7a00 	vldr	s15, [r3]
 80032dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003430 <HAL_SPI_TxRxCpltCallback+0x230>
 80032e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ec:	dd0c      	ble.n	8003308 <HAL_SPI_TxRxCpltCallback+0x108>
			{
				raw_angle_ovf--;
 80032ee:	4b4e      	ldr	r3, [pc, #312]	; (8003428 <HAL_SPI_TxRxCpltCallback+0x228>)
 80032f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	4b4c      	ldr	r3, [pc, #304]	; (800342c <HAL_SPI_TxRxCpltCallback+0x22c>)
 80032fa:	f7fc ffc5 	bl	8000288 <__aeabi_dsub>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4949      	ldr	r1, [pc, #292]	; (8003428 <HAL_SPI_TxRxCpltCallback+0x228>)
 8003304:	e9c1 2300 	strd	r2, r3, [r1]
			}
			angle_sens = (raw_angle + raw_angle_ovf * 360.0)*-0.1172108178559791463 - steer_angle_offset;
 8003308:	4b44      	ldr	r3, [pc, #272]	; (800341c <HAL_SPI_TxRxCpltCallback+0x21c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd f91b 	bl	8000548 <__aeabi_f2d>
 8003312:	4604      	mov	r4, r0
 8003314:	460d      	mov	r5, r1
 8003316:	4b44      	ldr	r3, [pc, #272]	; (8003428 <HAL_SPI_TxRxCpltCallback+0x228>)
 8003318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	4b44      	ldr	r3, [pc, #272]	; (8003434 <HAL_SPI_TxRxCpltCallback+0x234>)
 8003322:	f7fd f969 	bl	80005f8 <__aeabi_dmul>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4620      	mov	r0, r4
 800332c:	4629      	mov	r1, r5
 800332e:	f7fc ffad 	bl	800028c <__adddf3>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4610      	mov	r0, r2
 8003338:	4619      	mov	r1, r3
 800333a:	a32f      	add	r3, pc, #188	; (adr r3, 80033f8 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f7fd f95a 	bl	80005f8 <__aeabi_dmul>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	4b3a      	ldr	r3, [pc, #232]	; (8003438 <HAL_SPI_TxRxCpltCallback+0x238>)
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f7fc ff99 	bl	8000288 <__aeabi_dsub>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4938      	ldr	r1, [pc, #224]	; (800343c <HAL_SPI_TxRxCpltCallback+0x23c>)
 800335c:	e9c1 2300 	strd	r2, r3, [r1]
			z_lift = (raw_angle + raw_angle_ovf * 360.0)*0.00222222222222222222222222222222 - z_offset;
 8003360:	4b2e      	ldr	r3, [pc, #184]	; (800341c <HAL_SPI_TxRxCpltCallback+0x21c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd f8ef 	bl	8000548 <__aeabi_f2d>
 800336a:	4604      	mov	r4, r0
 800336c:	460d      	mov	r5, r1
 800336e:	4b2e      	ldr	r3, [pc, #184]	; (8003428 <HAL_SPI_TxRxCpltCallback+0x228>)
 8003370:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	4b2e      	ldr	r3, [pc, #184]	; (8003434 <HAL_SPI_TxRxCpltCallback+0x234>)
 800337a:	f7fd f93d 	bl	80005f8 <__aeabi_dmul>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4620      	mov	r0, r4
 8003384:	4629      	mov	r1, r5
 8003386:	f7fc ff81 	bl	800028c <__adddf3>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	a31b      	add	r3, pc, #108	; (adr r3, 8003400 <HAL_SPI_TxRxCpltCallback+0x200>)
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f7fd f92e 	bl	80005f8 <__aeabi_dmul>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4614      	mov	r4, r2
 80033a2:	461d      	mov	r5, r3
 80033a4:	4b26      	ldr	r3, [pc, #152]	; (8003440 <HAL_SPI_TxRxCpltCallback+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd f8cd 	bl	8000548 <__aeabi_f2d>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	f7fc ff67 	bl	8000288 <__aeabi_dsub>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	f7fd fc11 	bl	8000be8 <__aeabi_d2f>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4a1e      	ldr	r2, [pc, #120]	; (8003444 <HAL_SPI_TxRxCpltCallback+0x244>)
 80033ca:	6013      	str	r3, [r2, #0]
			last_raw_angle = raw_angle;
 80033cc:	4b13      	ldr	r3, [pc, #76]	; (800341c <HAL_SPI_TxRxCpltCallback+0x21c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a13      	ldr	r2, [pc, #76]	; (8003420 <HAL_SPI_TxRxCpltCallback+0x220>)
 80033d2:	6013      	str	r3, [r2, #0]
		}
		TIM7->CNT = 0;
 80033d4:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <HAL_SPI_TxRxCpltCallback+0x248>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24
		read_ready = 1;
 80033da:	4b1c      	ldr	r3, [pc, #112]	; (800344c <HAL_SPI_TxRxCpltCallback+0x24c>)
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
		SPI_CS_GPIO_Port->BSRR = SPI_CS_Pin;
 80033e0:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <HAL_SPI_TxRxCpltCallback+0x250>)
 80033e2:	2210      	movs	r2, #16
 80033e4:	619a      	str	r2, [r3, #24]
	}
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bdb0      	pop	{r4, r5, r7, pc}
 80033ee:	bf00      	nop
 80033f0:	00000000 	.word	0x00000000
 80033f4:	40cfff80 	.word	0x40cfff80
 80033f8:	356dc8ac 	.word	0x356dc8ac
 80033fc:	bfbe0187 	.word	0xbfbe0187
 8003400:	789abcdf 	.word	0x789abcdf
 8003404:	3f623456 	.word	0x3f623456
 8003408:	40013000 	.word	0x40013000
 800340c:	20000e3c 	.word	0x20000e3c
 8003410:	20000e38 	.word	0x20000e38
 8003414:	20000ef8 	.word	0x20000ef8
 8003418:	40868000 	.word	0x40868000
 800341c:	20000eb8 	.word	0x20000eb8
 8003420:	20000ebc 	.word	0x20000ebc
 8003424:	c3960000 	.word	0xc3960000
 8003428:	20000ed8 	.word	0x20000ed8
 800342c:	3ff00000 	.word	0x3ff00000
 8003430:	43960000 	.word	0x43960000
 8003434:	40768000 	.word	0x40768000
 8003438:	20000ee0 	.word	0x20000ee0
 800343c:	20000ed0 	.word	0x20000ed0
 8003440:	20000ec8 	.word	0x20000ec8
 8003444:	20000ec4 	.word	0x20000ec4
 8003448:	40001400 	.word	0x40001400
 800344c:	20000ef9 	.word	0x20000ef9
 8003450:	40020000 	.word	0x40020000

08003454 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Z_STEER_DET_Pin)
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003464:	d117      	bne.n	8003496 <HAL_GPIO_EXTI_Callback+0x42>
	{
		if (wheel_state && steer_call_ready)
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d013      	beq.n	8003496 <HAL_GPIO_EXTI_Callback+0x42>
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x50>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00f      	beq.n	8003496 <HAL_GPIO_EXTI_Callback+0x42>
		{
			steer_angle_offset = angle_sens + zero_offset;
 8003476:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <HAL_GPIO_EXTI_Callback+0x54>)
 8003478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_GPIO_EXTI_Callback+0x58>)
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f7fc ff03 	bl	800028c <__adddf3>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4909      	ldr	r1, [pc, #36]	; (80034b0 <HAL_GPIO_EXTI_Callback+0x5c>)
 800348c:	e9c1 2300 	strd	r2, r3, [r1]
			wheel_state = 0;
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000efa 	.word	0x20000efa
 80034a4:	20000efc 	.word	0x20000efc
 80034a8:	20000ed0 	.word	0x20000ed0
 80034ac:	20000ee8 	.word	0x20000ee8
 80034b0:	20000ee0 	.word	0x20000ee0

080034b4 <HAL_CAN_RxFifo0MsgPendingCallback>:

//==================================================================================

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, can_rx_buff);
 80034bc:	4b21      	ldr	r3, [pc, #132]	; (8003544 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80034be:	4a22      	ldr	r2, [pc, #136]	; (8003548 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80034c0:	2100      	movs	r1, #0
 80034c2:	4822      	ldr	r0, [pc, #136]	; (800354c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80034c4:	f003 fa55 	bl	8006972 <HAL_CAN_GetRxMessage>
	if (RxHeader.StdId == wheel_addr)
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a20      	ldr	r2, [pc, #128]	; (8003550 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80034ce:	8812      	ldrh	r2, [r2, #0]
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d132      	bne.n	800353a <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
	{
		switch (can_rx_buff[0])
 80034d4:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2bb0      	cmp	r3, #176	; 0xb0
 80034da:	d01f      	beq.n	800351c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
 80034dc:	2bb0      	cmp	r3, #176	; 0xb0
 80034de:	dc28      	bgt.n	8003532 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
 80034e0:	2b12      	cmp	r3, #18
 80034e2:	d023      	beq.n	800352c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 80034e4:	2ba0      	cmp	r3, #160	; 0xa0
 80034e6:	d124      	bne.n	8003532 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
		{
		case _SET_WHEEL:
			CAN_get_wheel ();
 80034e8:	f7fd fd78 	bl	8000fdc <CAN_get_wheel>
			CAN_send_wheel (wheel_addr, angle_sens, hall_sens_count);
 80034ec:	4b18      	ldr	r3, [pc, #96]	; (8003550 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	461c      	mov	r4, r3
 80034f2:	4b18      	ldr	r3, [pc, #96]	; (8003554 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	f7fd fb74 	bl	8000be8 <__aeabi_d2f>
 8003500:	4602      	mov	r2, r0
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8003504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003508:	4619      	mov	r1, r3
 800350a:	ee00 2a10 	vmov	s0, r2
 800350e:	4620      	mov	r0, r4
 8003510:	f7fd fe56 	bl	80011c0 <CAN_send_wheel>
			hall_sens_count = 0;
 8003514:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8003516:	2200      	movs	r2, #0
 8003518:	801a      	strh	r2, [r3, #0]
			break;
 800351a:	e00a      	b.n	8003532 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
		case _SET_ZERO_OFFSET:
			CAN_get_zero_offset ();
 800351c:	f7fd fe2c 	bl	8001178 <CAN_get_zero_offset>
			CAN_send_ok (wheel_addr);
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fd febb 	bl	80012a0 <CAN_send_ok>
			break;
 800352a:	e002      	b.n	8003532 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
		case 0x12:
			CAN_get_z ();
 800352c:	f7ff fa3c 	bl	80029a8 <CAN_get_z>
			break;
 8003530:	bf00      	nop
		}
		led_can_respone = can_rx_buff[0];
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8003534:	781a      	ldrb	r2, [r3, #0]
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8003538:	701a      	strb	r2, [r3, #0]
	}
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bd90      	pop	{r4, r7, pc}
 8003542:	bf00      	nop
 8003544:	20000ea4 	.word	0x20000ea4
 8003548:	20000834 	.word	0x20000834
 800354c:	200004e4 	.word	0x200004e4
 8003550:	20000efe 	.word	0x20000efe
 8003554:	20000ed0 	.word	0x20000ed0
 8003558:	20000eb6 	.word	0x20000eb6
 800355c:	20000eb4 	.word	0x20000eb4

08003560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003564:	f002 f844 	bl	80055f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003568:	f000 f884 	bl	8003674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800356c:	f000 fe76 	bl	800425c <MX_GPIO_Init>
  MX_DMA_Init();
 8003570:	f000 fe34 	bl	80041dc <MX_DMA_Init>
  MX_ADC1_Init();
 8003574:	f000 f8e8 	bl	8003748 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003578:	f000 f938 	bl	80037ec <MX_ADC2_Init>
  MX_ADC3_Init();
 800357c:	f000 f9e8 	bl	8003950 <MX_ADC3_Init>
  MX_CAN1_Init();
 8003580:	f000 fa98 	bl	8003ab4 <MX_CAN1_Init>
  MX_SPI1_Init();
 8003584:	f000 face 	bl	8003b24 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003588:	f000 fb02 	bl	8003b90 <MX_TIM1_Init>
  MX_TIM5_Init();
 800358c:	f000 fcc6 	bl	8003f1c <MX_TIM5_Init>
  MX_TIM8_Init();
 8003590:	f000 fd60 	bl	8004054 <MX_TIM8_Init>
  MX_TIM2_Init();
 8003594:	f000 fbc0 	bl	8003d18 <MX_TIM2_Init>
  MX_TIM7_Init();
 8003598:	f000 fd28 	bl	8003fec <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 800359c:	f00b ff94 	bl	800f4c8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80035a0:	f000 fc20 	bl	8003de4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80035a4:	f000 fc6c 	bl	8003e80 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  wheel_init ();
 80035a8:	f7ff fd26 	bl	8002ff8 <wheel_init>

  BLDC_init (&hbldc1);
 80035ac:	4829      	ldr	r0, [pc, #164]	; (8003654 <main+0xf4>)
 80035ae:	f7fd ff4b 	bl	8001448 <BLDC_init>
  BLDC_init (&hbldc2);
 80035b2:	4829      	ldr	r0, [pc, #164]	; (8003658 <main+0xf8>)
 80035b4:	f7fd ff48 	bl	8001448 <BLDC_init>
  BLDC_get_sector (&hbldc1);
 80035b8:	4826      	ldr	r0, [pc, #152]	; (8003654 <main+0xf4>)
 80035ba:	f7fe fcf9 	bl	8001fb0 <BLDC_get_sector>

  HAL_TIM_Base_Start_IT(&htim3);
 80035be:	4827      	ldr	r0, [pc, #156]	; (800365c <main+0xfc>)
 80035c0:	f007 f97c 	bl	800a8bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80035c4:	4826      	ldr	r0, [pc, #152]	; (8003660 <main+0x100>)
 80035c6:	f007 f979 	bl	800a8bc <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start_IT(&htim7);
 80035ca:	4826      	ldr	r0, [pc, #152]	; (8003664 <main+0x104>)
 80035cc:	f007 f976 	bl	800a8bc <HAL_TIM_Base_Start_IT>
  AS5048A_send_data (1, 1, 0x3fff);
 80035d0:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80035d4:	2101      	movs	r1, #1
 80035d6:	2001      	movs	r0, #1
 80035d8:	f7fd ff00 	bl	80013dc <AS5048A_send_data>
  BLDC_beep(&hbldc2, 3136, 100);
 80035dc:	2264      	movs	r2, #100	; 0x64
 80035de:	f44f 6144 	mov.w	r1, #3136	; 0xc40
 80035e2:	481d      	ldr	r0, [pc, #116]	; (8003658 <main+0xf8>)
 80035e4:	f7fe fc72 	bl	8001ecc <BLDC_beep>
  HAL_Delay(100);
 80035e8:	2064      	movs	r0, #100	; 0x64
 80035ea:	f002 f873 	bl	80056d4 <HAL_Delay>
  BLDC_beep(&hbldc2, 3136, 100);
 80035ee:	2264      	movs	r2, #100	; 0x64
 80035f0:	f44f 6144 	mov.w	r1, #3136	; 0xc40
 80035f4:	4818      	ldr	r0, [pc, #96]	; (8003658 <main+0xf8>)
 80035f6:	f7fe fc69 	bl	8001ecc <BLDC_beep>
  HAL_Delay(100);
 80035fa:	2064      	movs	r0, #100	; 0x64
 80035fc:	f002 f86a 	bl	80056d4 <HAL_Delay>
  BLDC_beep(&hbldc2, 3136, 100);
 8003600:	2264      	movs	r2, #100	; 0x64
 8003602:	f44f 6144 	mov.w	r1, #3136	; 0xc40
 8003606:	4814      	ldr	r0, [pc, #80]	; (8003658 <main+0xf8>)
 8003608:	f7fe fc60 	bl	8001ecc <BLDC_beep>
  HAL_Delay(100);
 800360c:	2064      	movs	r0, #100	; 0x64
 800360e:	f002 f861 	bl	80056d4 <HAL_Delay>
//  BLDC1_testing (_speed_test);
//  BLDC2_testing (_angle_test);//_dq_test
#ifdef WHEEL_Z
  lifter_goto_zero ();
#else
  zero_steer ();
 8003612:	f7ff fc8d 	bl	8002f30 <zero_steer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  zero_mosfet ();
	  blink_respone ();
 8003616:	f7fd fe65 	bl	80012e4 <blink_respone>

	  if (mag_zero_set_flag)
 800361a:	4b13      	ldr	r3, [pc, #76]	; (8003668 <main+0x108>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <main+0xcc>
	  {
		  mag_zero_set_flag = 0;
 8003622:	4b11      	ldr	r3, [pc, #68]	; (8003668 <main+0x108>)
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
		  BLDC2_zero_cal ();
 8003628:	f7ff f9e2 	bl	80029f0 <BLDC2_zero_cal>
	  }
#else
//	  angle_sector = (raw_angle+mag_angle_offset) * 11.0;
//	  BLDC_current_control (&hbldc2, 0, 1.0, 0);

	  BLDC_set_angle (data_angle);//data_angle
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <main+0x10c>)
 800362e:	edd3 7a00 	vldr	s15, [r3]
 8003632:	eeb0 0a67 	vmov.f32	s0, s15
 8003636:	f7ff f8e7 	bl	8002808 <BLDC_set_angle>
	  BLDC_set_speed (data_rpm);//data_rpm
 800363a:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <main+0x110>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7fc ff82 	bl	8000548 <__aeabi_f2d>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	ec43 2b10 	vmov	d0, r2, r3
 800364c:	f7fe fe50 	bl	80022f0 <BLDC_set_speed>
	  blink_respone ();
 8003650:	e7e1      	b.n	8003616 <main+0xb6>
 8003652:	bf00      	nop
 8003654:	20000850 	.word	0x20000850
 8003658:	20000b20 	.word	0x20000b20
 800365c:	200006b4 	.word	0x200006b4
 8003660:	200006fc 	.word	0x200006fc
 8003664:	2000078c 	.word	0x2000078c
 8003668:	20000efb 	.word	0x20000efb
 800366c:	20000f00 	.word	0x20000f00
 8003670:	20000f04 	.word	0x20000f04

08003674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b094      	sub	sp, #80	; 0x50
 8003678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800367a:	f107 0320 	add.w	r3, r7, #32
 800367e:	2230      	movs	r2, #48	; 0x30
 8003680:	2100      	movs	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f00c fc6a 	bl	800ff5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003688:	f107 030c 	add.w	r3, r7, #12
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003698:	2300      	movs	r3, #0
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	4b28      	ldr	r3, [pc, #160]	; (8003740 <SystemClock_Config+0xcc>)
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	4a27      	ldr	r2, [pc, #156]	; (8003740 <SystemClock_Config+0xcc>)
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a6:	6413      	str	r3, [r2, #64]	; 0x40
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <SystemClock_Config+0xcc>)
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036b4:	2300      	movs	r3, #0
 80036b6:	607b      	str	r3, [r7, #4]
 80036b8:	4b22      	ldr	r3, [pc, #136]	; (8003744 <SystemClock_Config+0xd0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a21      	ldr	r2, [pc, #132]	; (8003744 <SystemClock_Config+0xd0>)
 80036be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <SystemClock_Config+0xd0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036cc:	607b      	str	r3, [r7, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036d0:	2301      	movs	r3, #1
 80036d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036da:	2302      	movs	r3, #2
 80036dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80036e4:	2306      	movs	r3, #6
 80036e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80036e8:	23a8      	movs	r3, #168	; 0xa8
 80036ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036ec:	2302      	movs	r3, #2
 80036ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80036f0:	2307      	movs	r3, #7
 80036f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036f4:	f107 0320 	add.w	r3, r7, #32
 80036f8:	4618      	mov	r0, r3
 80036fa:	f005 ff8f 	bl	800961c <HAL_RCC_OscConfig>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003704:	f000 fe5a 	bl	80043bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003708:	230f      	movs	r3, #15
 800370a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800370c:	2302      	movs	r3, #2
 800370e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003714:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800371a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800371e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003720:	f107 030c 	add.w	r3, r7, #12
 8003724:	2105      	movs	r1, #5
 8003726:	4618      	mov	r0, r3
 8003728:	f006 f9f0 	bl	8009b0c <HAL_RCC_ClockConfig>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003732:	f000 fe43 	bl	80043bc <Error_Handler>
  }
}
 8003736:	bf00      	nop
 8003738:	3750      	adds	r7, #80	; 0x50
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40023800 	.word	0x40023800
 8003744:	40007000 	.word	0x40007000

08003748 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800374e:	463b      	mov	r3, r7
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800375a:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <MX_ADC1_Init+0x98>)
 800375c:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <MX_ADC1_Init+0x9c>)
 800375e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003760:	4b1f      	ldr	r3, [pc, #124]	; (80037e0 <MX_ADC1_Init+0x98>)
 8003762:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003766:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003768:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <MX_ADC1_Init+0x98>)
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800376e:	4b1c      	ldr	r3, [pc, #112]	; (80037e0 <MX_ADC1_Init+0x98>)
 8003770:	2201      	movs	r2, #1
 8003772:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <MX_ADC1_Init+0x98>)
 8003776:	2201      	movs	r2, #1
 8003778:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800377a:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <MX_ADC1_Init+0x98>)
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003782:	4b17      	ldr	r3, [pc, #92]	; (80037e0 <MX_ADC1_Init+0x98>)
 8003784:	2200      	movs	r2, #0
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <MX_ADC1_Init+0x98>)
 800378a:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <MX_ADC1_Init+0xa0>)
 800378c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800378e:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <MX_ADC1_Init+0x98>)
 8003790:	2200      	movs	r2, #0
 8003792:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <MX_ADC1_Init+0x98>)
 8003796:	2201      	movs	r2, #1
 8003798:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800379a:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <MX_ADC1_Init+0x98>)
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037a2:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <MX_ADC1_Init+0x98>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037a8:	480d      	ldr	r0, [pc, #52]	; (80037e0 <MX_ADC1_Init+0x98>)
 80037aa:	f001 ffb7 	bl	800571c <HAL_ADC_Init>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80037b4:	f000 fe02 	bl	80043bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80037b8:	230e      	movs	r3, #14
 80037ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80037bc:	2301      	movs	r3, #1
 80037be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80037c0:	2307      	movs	r3, #7
 80037c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037c4:	463b      	mov	r3, r7
 80037c6:	4619      	mov	r1, r3
 80037c8:	4805      	ldr	r0, [pc, #20]	; (80037e0 <MX_ADC1_Init+0x98>)
 80037ca:	f002 f919 	bl	8005a00 <HAL_ADC_ConfigChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80037d4:	f000 fdf2 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	200002ec 	.word	0x200002ec
 80037e4:	40012000 	.word	0x40012000
 80037e8:	0f000001 	.word	0x0f000001

080037ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08c      	sub	sp, #48	; 0x30
 80037f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037f2:	f107 0320 	add.w	r3, r7, #32
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003800:	463b      	mov	r3, r7
 8003802:	2220      	movs	r2, #32
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f00c fba8 	bl	800ff5c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800380c:	4b4d      	ldr	r3, [pc, #308]	; (8003944 <MX_ADC2_Init+0x158>)
 800380e:	4a4e      	ldr	r2, [pc, #312]	; (8003948 <MX_ADC2_Init+0x15c>)
 8003810:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003812:	4b4c      	ldr	r3, [pc, #304]	; (8003944 <MX_ADC2_Init+0x158>)
 8003814:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003818:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800381a:	4b4a      	ldr	r3, [pc, #296]	; (8003944 <MX_ADC2_Init+0x158>)
 800381c:	2200      	movs	r2, #0
 800381e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003820:	4b48      	ldr	r3, [pc, #288]	; (8003944 <MX_ADC2_Init+0x158>)
 8003822:	2201      	movs	r2, #1
 8003824:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003826:	4b47      	ldr	r3, [pc, #284]	; (8003944 <MX_ADC2_Init+0x158>)
 8003828:	2201      	movs	r2, #1
 800382a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800382c:	4b45      	ldr	r3, [pc, #276]	; (8003944 <MX_ADC2_Init+0x158>)
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003834:	4b43      	ldr	r3, [pc, #268]	; (8003944 <MX_ADC2_Init+0x158>)
 8003836:	2200      	movs	r2, #0
 8003838:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800383a:	4b42      	ldr	r3, [pc, #264]	; (8003944 <MX_ADC2_Init+0x158>)
 800383c:	4a43      	ldr	r2, [pc, #268]	; (800394c <MX_ADC2_Init+0x160>)
 800383e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003840:	4b40      	ldr	r3, [pc, #256]	; (8003944 <MX_ADC2_Init+0x158>)
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8003846:	4b3f      	ldr	r3, [pc, #252]	; (8003944 <MX_ADC2_Init+0x158>)
 8003848:	2203      	movs	r2, #3
 800384a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800384c:	4b3d      	ldr	r3, [pc, #244]	; (8003944 <MX_ADC2_Init+0x158>)
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003854:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <MX_ADC2_Init+0x158>)
 8003856:	2201      	movs	r2, #1
 8003858:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800385a:	483a      	ldr	r0, [pc, #232]	; (8003944 <MX_ADC2_Init+0x158>)
 800385c:	f001 ff5e 	bl	800571c <HAL_ADC_Init>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8003866:	f000 fda9 	bl	80043bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800386a:	230d      	movs	r3, #13
 800386c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800386e:	2301      	movs	r3, #1
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003872:	2307      	movs	r3, #7
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003876:	f107 0320 	add.w	r3, r7, #32
 800387a:	4619      	mov	r1, r3
 800387c:	4831      	ldr	r0, [pc, #196]	; (8003944 <MX_ADC2_Init+0x158>)
 800387e:	f002 f8bf 	bl	8005a00 <HAL_ADC_ConfigChannel>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_ADC2_Init+0xa0>
  {
    Error_Handler();
 8003888:	f000 fd98 	bl	80043bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800388c:	2303      	movs	r3, #3
 800388e:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8003890:	2302      	movs	r3, #2
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003894:	f107 0320 	add.w	r3, r7, #32
 8003898:	4619      	mov	r1, r3
 800389a:	482a      	ldr	r0, [pc, #168]	; (8003944 <MX_ADC2_Init+0x158>)
 800389c:	f002 f8b0 	bl	8005a00 <HAL_ADC_ConfigChannel>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 80038a6:	f000 fd89 	bl	80043bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80038aa:	2306      	movs	r3, #6
 80038ac:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 80038ae:	2303      	movs	r3, #3
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038b2:	f107 0320 	add.w	r3, r7, #32
 80038b6:	4619      	mov	r1, r3
 80038b8:	4822      	ldr	r0, [pc, #136]	; (8003944 <MX_ADC2_Init+0x158>)
 80038ba:	f002 f8a1 	bl	8005a00 <HAL_ADC_ConfigChannel>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_ADC2_Init+0xdc>
  {
    Error_Handler();
 80038c4:	f000 fd7a 	bl	80043bc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 80038c8:	230d      	movs	r3, #13
 80038ca:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80038cc:	2301      	movs	r3, #1
 80038ce:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80038d0:	2303      	movs	r3, #3
 80038d2:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 80038d4:	2301      	movs	r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_FALLING;
 80038d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038dc:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T8_CC4;
 80038de:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80038e2:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 80038e8:	2301      	movs	r3, #1
 80038ea:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80038f0:	463b      	mov	r3, r7
 80038f2:	4619      	mov	r1, r3
 80038f4:	4813      	ldr	r0, [pc, #76]	; (8003944 <MX_ADC2_Init+0x158>)
 80038f6:	f002 fbab 	bl	8006050 <HAL_ADCEx_InjectedConfigChannel>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <MX_ADC2_Init+0x118>
  {
    Error_Handler();
 8003900:	f000 fd5c 	bl	80043bc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8003904:	2303      	movs	r3, #3
 8003906:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8003908:	2302      	movs	r3, #2
 800390a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800390c:	463b      	mov	r3, r7
 800390e:	4619      	mov	r1, r3
 8003910:	480c      	ldr	r0, [pc, #48]	; (8003944 <MX_ADC2_Init+0x158>)
 8003912:	f002 fb9d 	bl	8006050 <HAL_ADCEx_InjectedConfigChannel>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <MX_ADC2_Init+0x134>
  {
    Error_Handler();
 800391c:	f000 fd4e 	bl	80043bc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8003920:	2306      	movs	r3, #6
 8003922:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8003924:	2303      	movs	r3, #3
 8003926:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8003928:	463b      	mov	r3, r7
 800392a:	4619      	mov	r1, r3
 800392c:	4805      	ldr	r0, [pc, #20]	; (8003944 <MX_ADC2_Init+0x158>)
 800392e:	f002 fb8f 	bl	8006050 <HAL_ADCEx_InjectedConfigChannel>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <MX_ADC2_Init+0x150>
  {
    Error_Handler();
 8003938:	f000 fd40 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800393c:	bf00      	nop
 800393e:	3730      	adds	r7, #48	; 0x30
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000334 	.word	0x20000334
 8003948:	40012100 	.word	0x40012100
 800394c:	0f000001 	.word	0x0f000001

08003950 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08c      	sub	sp, #48	; 0x30
 8003954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003956:	f107 0320 	add.w	r3, r7, #32
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	609a      	str	r2, [r3, #8]
 8003962:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003964:	463b      	mov	r3, r7
 8003966:	2220      	movs	r2, #32
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f00c faf6 	bl	800ff5c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8003970:	4b4d      	ldr	r3, [pc, #308]	; (8003aa8 <MX_ADC3_Init+0x158>)
 8003972:	4a4e      	ldr	r2, [pc, #312]	; (8003aac <MX_ADC3_Init+0x15c>)
 8003974:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003976:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <MX_ADC3_Init+0x158>)
 8003978:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800397c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800397e:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <MX_ADC3_Init+0x158>)
 8003980:	2200      	movs	r2, #0
 8003982:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8003984:	4b48      	ldr	r3, [pc, #288]	; (8003aa8 <MX_ADC3_Init+0x158>)
 8003986:	2201      	movs	r2, #1
 8003988:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <MX_ADC3_Init+0x158>)
 800398c:	2201      	movs	r2, #1
 800398e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003990:	4b45      	ldr	r3, [pc, #276]	; (8003aa8 <MX_ADC3_Init+0x158>)
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003998:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <MX_ADC3_Init+0x158>)
 800399a:	2200      	movs	r2, #0
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800399e:	4b42      	ldr	r3, [pc, #264]	; (8003aa8 <MX_ADC3_Init+0x158>)
 80039a0:	4a43      	ldr	r2, [pc, #268]	; (8003ab0 <MX_ADC3_Init+0x160>)
 80039a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039a4:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <MX_ADC3_Init+0x158>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 80039aa:	4b3f      	ldr	r3, [pc, #252]	; (8003aa8 <MX_ADC3_Init+0x158>)
 80039ac:	2203      	movs	r2, #3
 80039ae:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80039b0:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <MX_ADC3_Init+0x158>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039b8:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <MX_ADC3_Init+0x158>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80039be:	483a      	ldr	r0, [pc, #232]	; (8003aa8 <MX_ADC3_Init+0x158>)
 80039c0:	f001 feac 	bl	800571c <HAL_ADC_Init>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80039ca:	f000 fcf7 	bl	80043bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80039ce:	230a      	movs	r3, #10
 80039d0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80039d2:	2301      	movs	r3, #1
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80039d6:	2307      	movs	r3, #7
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80039da:	f107 0320 	add.w	r3, r7, #32
 80039de:	4619      	mov	r1, r3
 80039e0:	4831      	ldr	r0, [pc, #196]	; (8003aa8 <MX_ADC3_Init+0x158>)
 80039e2:	f002 f80d 	bl	8005a00 <HAL_ADC_ConfigChannel>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 80039ec:	f000 fce6 	bl	80043bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80039f0:	230b      	movs	r3, #11
 80039f2:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 80039f4:	2302      	movs	r3, #2
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80039f8:	f107 0320 	add.w	r3, r7, #32
 80039fc:	4619      	mov	r1, r3
 80039fe:	482a      	ldr	r0, [pc, #168]	; (8003aa8 <MX_ADC3_Init+0x158>)
 8003a00:	f001 fffe 	bl	8005a00 <HAL_ADC_ConfigChannel>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 8003a0a:	f000 fcd7 	bl	80043bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003a0e:	230c      	movs	r3, #12
 8003a10:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 8003a12:	2303      	movs	r3, #3
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003a16:	f107 0320 	add.w	r3, r7, #32
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4822      	ldr	r0, [pc, #136]	; (8003aa8 <MX_ADC3_Init+0x158>)
 8003a1e:	f001 ffef 	bl	8005a00 <HAL_ADC_ConfigChannel>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8003a28:	f000 fcc8 	bl	80043bc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8003a2c:	230a      	movs	r3, #10
 8003a2e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8003a30:	2301      	movs	r3, #1
 8003a32:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8003a34:	2303      	movs	r3, #3
 8003a36:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_FALLING;
 8003a3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a40:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8003a52:	463b      	mov	r3, r7
 8003a54:	4619      	mov	r1, r3
 8003a56:	4814      	ldr	r0, [pc, #80]	; (8003aa8 <MX_ADC3_Init+0x158>)
 8003a58:	f002 fafa 	bl	8006050 <HAL_ADCEx_InjectedConfigChannel>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_ADC3_Init+0x116>
  {
    Error_Handler();
 8003a62:	f000 fcab 	bl	80043bc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8003a66:	230b      	movs	r3, #11
 8003a68:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8003a6e:	463b      	mov	r3, r7
 8003a70:	4619      	mov	r1, r3
 8003a72:	480d      	ldr	r0, [pc, #52]	; (8003aa8 <MX_ADC3_Init+0x158>)
 8003a74:	f002 faec 	bl	8006050 <HAL_ADCEx_InjectedConfigChannel>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 8003a7e:	f000 fc9d 	bl	80043bc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8003a82:	230c      	movs	r3, #12
 8003a84:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8003a86:	2303      	movs	r3, #3
 8003a88:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8003a8a:	463b      	mov	r3, r7
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4806      	ldr	r0, [pc, #24]	; (8003aa8 <MX_ADC3_Init+0x158>)
 8003a90:	f002 fade 	bl	8006050 <HAL_ADCEx_InjectedConfigChannel>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <MX_ADC3_Init+0x14e>
  {
    Error_Handler();
 8003a9a:	f000 fc8f 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003a9e:	bf00      	nop
 8003aa0:	3730      	adds	r7, #48	; 0x30
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	2000037c 	.word	0x2000037c
 8003aac:	40012200 	.word	0x40012200
 8003ab0:	0f000001 	.word	0x0f000001

08003ab4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003ab8:	4b18      	ldr	r3, [pc, #96]	; (8003b1c <MX_CAN1_Init+0x68>)
 8003aba:	4a19      	ldr	r2, [pc, #100]	; (8003b20 <MX_CAN1_Init+0x6c>)
 8003abc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8003abe:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <MX_CAN1_Init+0x68>)
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003ac4:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <MX_CAN1_Init+0x68>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8003aca:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <MX_CAN1_Init+0x68>)
 8003acc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ad0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <MX_CAN1_Init+0x68>)
 8003ad4:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8003ad8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <MX_CAN1_Init+0x68>)
 8003adc:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8003ae0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <MX_CAN1_Init+0x68>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <MX_CAN1_Init+0x68>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <MX_CAN1_Init+0x68>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <MX_CAN1_Init+0x68>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <MX_CAN1_Init+0x68>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <MX_CAN1_Init+0x68>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003b06:	4805      	ldr	r0, [pc, #20]	; (8003b1c <MX_CAN1_Init+0x68>)
 8003b08:	f002 fc38 	bl	800637c <HAL_CAN_Init>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8003b12:	f000 fc53 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200004e4 	.word	0x200004e4
 8003b20:	40006400 	.word	0x40006400

08003b24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003b28:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <MX_SPI1_Init+0x64>)
 8003b2a:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <MX_SPI1_Init+0x68>)
 8003b2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b2e:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <MX_SPI1_Init+0x64>)
 8003b30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b36:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <MX_SPI1_Init+0x64>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b3c:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <MX_SPI1_Init+0x64>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <MX_SPI1_Init+0x64>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <MX_SPI1_Init+0x64>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <MX_SPI1_Init+0x64>)
 8003b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b56:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <MX_SPI1_Init+0x64>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <MX_SPI1_Init+0x64>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <MX_SPI1_Init+0x64>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b68:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <MX_SPI1_Init+0x64>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <MX_SPI1_Init+0x64>)
 8003b70:	220a      	movs	r2, #10
 8003b72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b74:	4804      	ldr	r0, [pc, #16]	; (8003b88 <MX_SPI1_Init+0x64>)
 8003b76:	f006 f981 	bl	8009e7c <HAL_SPI_Init>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b80:	f000 fc1c 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	2000050c 	.word	0x2000050c
 8003b8c:	40013000 	.word	0x40013000

08003b90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b096      	sub	sp, #88	; 0x58
 8003b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	609a      	str	r2, [r3, #8]
 8003ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ba4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	60da      	str	r2, [r3, #12]
 8003bbc:	611a      	str	r2, [r3, #16]
 8003bbe:	615a      	str	r2, [r3, #20]
 8003bc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bc2:	1d3b      	adds	r3, r7, #4
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f00c f9c7 	bl	800ff5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003bce:	4b50      	ldr	r3, [pc, #320]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003bd0:	4a50      	ldr	r2, [pc, #320]	; (8003d14 <MX_TIM1_Init+0x184>)
 8003bd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003bd4:	4b4e      	ldr	r3, [pc, #312]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8003bda:	4b4d      	ldr	r3, [pc, #308]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003bdc:	2240      	movs	r2, #64	; 0x40
 8003bde:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8003be0:	4b4b      	ldr	r3, [pc, #300]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003be2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003be6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003be8:	4b49      	ldr	r3, [pc, #292]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003bee:	4b48      	ldr	r3, [pc, #288]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bf4:	4b46      	ldr	r3, [pc, #280]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003bfa:	4845      	ldr	r0, [pc, #276]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003bfc:	f006 fe0e 	bl	800a81c <HAL_TIM_Base_Init>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003c06:	f000 fbd9 	bl	80043bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c14:	4619      	mov	r1, r3
 8003c16:	483e      	ldr	r0, [pc, #248]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003c18:	f007 f9ac 	bl	800af74 <HAL_TIM_ConfigClockSource>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003c22:	f000 fbcb 	bl	80043bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003c26:	483a      	ldr	r0, [pc, #232]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003c28:	f006 feb8 	bl	800a99c <HAL_TIM_PWM_Init>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003c32:	f000 fbc3 	bl	80043bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8003c36:	2370      	movs	r3, #112	; 0x70
 8003c38:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c42:	4619      	mov	r1, r3
 8003c44:	4832      	ldr	r0, [pc, #200]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003c46:	f007 ff47 	bl	800bad8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003c50:	f000 fbb4 	bl	80043bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c54:	2360      	movs	r3, #96	; 0x60
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c60:	2300      	movs	r3, #0
 8003c62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003c64:	2304      	movs	r3, #4
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c74:	2200      	movs	r2, #0
 8003c76:	4619      	mov	r1, r3
 8003c78:	4825      	ldr	r0, [pc, #148]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003c7a:	f007 f8b9 	bl	800adf0 <HAL_TIM_PWM_ConfigChannel>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003c84:	f000 fb9a 	bl	80043bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	4619      	mov	r1, r3
 8003c90:	481f      	ldr	r0, [pc, #124]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003c92:	f007 f8ad 	bl	800adf0 <HAL_TIM_PWM_ConfigChannel>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003c9c:	f000 fb8e 	bl	80043bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4819      	ldr	r0, [pc, #100]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003caa:	f007 f8a1 	bl	800adf0 <HAL_TIM_PWM_ConfigChannel>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003cb4:	f000 fb82 	bl	80043bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cbc:	220c      	movs	r2, #12
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4813      	ldr	r0, [pc, #76]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003cc2:	f007 f895 	bl	800adf0 <HAL_TIM_PWM_ConfigChannel>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003ccc:	f000 fb76 	bl	80043bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003cec:	1d3b      	adds	r3, r7, #4
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4807      	ldr	r0, [pc, #28]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003cf2:	f007 ff6d 	bl	800bbd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8003cfc:	f000 fb5e 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003d00:	4803      	ldr	r0, [pc, #12]	; (8003d10 <MX_TIM1_Init+0x180>)
 8003d02:	f000 ff67 	bl	8004bd4 <HAL_TIM_MspPostInit>

}
 8003d06:	bf00      	nop
 8003d08:	3758      	adds	r7, #88	; 0x58
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000624 	.word	0x20000624
 8003d14:	40010000 	.word	0x40010000

08003d18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d1e:	f107 0318 	add.w	r3, r7, #24
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8003d2c:	f107 0308 	add.w	r3, r7, #8
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d3a:	463b      	mov	r3, r7
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d42:	4b27      	ldr	r3, [pc, #156]	; (8003de0 <MX_TIM2_Init+0xc8>)
 8003d44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8003d4a:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <MX_TIM2_Init+0xc8>)
 8003d4c:	22a7      	movs	r2, #167	; 0xa7
 8003d4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d50:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <MX_TIM2_Init+0xc8>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <MX_TIM2_Init+0xc8>)
 8003d58:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d5e:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <MX_TIM2_Init+0xc8>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d64:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <MX_TIM2_Init+0xc8>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d6a:	481d      	ldr	r0, [pc, #116]	; (8003de0 <MX_TIM2_Init+0xc8>)
 8003d6c:	f006 fd56 	bl	800a81c <HAL_TIM_Base_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8003d76:	f000 fb21 	bl	80043bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d7e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d80:	f107 0318 	add.w	r3, r7, #24
 8003d84:	4619      	mov	r1, r3
 8003d86:	4816      	ldr	r0, [pc, #88]	; (8003de0 <MX_TIM2_Init+0xc8>)
 8003d88:	f007 f8f4 	bl	800af74 <HAL_TIM_ConfigClockSource>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003d92:	f000 fb13 	bl	80043bc <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 15;
 8003d9e:	230f      	movs	r3, #15
 8003da0:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8003da6:	f107 0308 	add.w	r3, r7, #8
 8003daa:	4619      	mov	r1, r3
 8003dac:	480c      	ldr	r0, [pc, #48]	; (8003de0 <MX_TIM2_Init+0xc8>)
 8003dae:	f007 fd4a 	bl	800b846 <HAL_TIMEx_HallSensor_Init>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8003db8:	f000 fb00 	bl	80043bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8003dbc:	2350      	movs	r3, #80	; 0x50
 8003dbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003dc4:	463b      	mov	r3, r7
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4805      	ldr	r0, [pc, #20]	; (8003de0 <MX_TIM2_Init+0xc8>)
 8003dca:	f007 fe85 	bl	800bad8 <HAL_TIMEx_MasterConfigSynchronization>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8003dd4:	f000 faf2 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003dd8:	bf00      	nop
 8003dda:	3728      	adds	r7, #40	; 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	2000066c 	.word	0x2000066c

08003de4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dea:	f107 0308 	add.w	r3, r7, #8
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003df8:	463b      	mov	r3, r7
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <MX_TIM3_Init+0x94>)
 8003e02:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <MX_TIM3_Init+0x98>)
 8003e04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8003e06:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <MX_TIM3_Init+0x94>)
 8003e08:	22a7      	movs	r2, #167	; 0xa7
 8003e0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <MX_TIM3_Init+0x94>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e12:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <MX_TIM3_Init+0x94>)
 8003e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e1a:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <MX_TIM3_Init+0x94>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e20:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <MX_TIM3_Init+0x94>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e26:	4814      	ldr	r0, [pc, #80]	; (8003e78 <MX_TIM3_Init+0x94>)
 8003e28:	f006 fcf8 	bl	800a81c <HAL_TIM_Base_Init>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003e32:	f000 fac3 	bl	80043bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e3c:	f107 0308 	add.w	r3, r7, #8
 8003e40:	4619      	mov	r1, r3
 8003e42:	480d      	ldr	r0, [pc, #52]	; (8003e78 <MX_TIM3_Init+0x94>)
 8003e44:	f007 f896 	bl	800af74 <HAL_TIM_ConfigClockSource>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003e4e:	f000 fab5 	bl	80043bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e52:	2300      	movs	r3, #0
 8003e54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e5a:	463b      	mov	r3, r7
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4806      	ldr	r0, [pc, #24]	; (8003e78 <MX_TIM3_Init+0x94>)
 8003e60:	f007 fe3a 	bl	800bad8 <HAL_TIMEx_MasterConfigSynchronization>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003e6a:	f000 faa7 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003e6e:	bf00      	nop
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200006b4 	.word	0x200006b4
 8003e7c:	40000400 	.word	0x40000400

08003e80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e86:	f107 0308 	add.w	r3, r7, #8
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	605a      	str	r2, [r3, #4]
 8003e90:	609a      	str	r2, [r3, #8]
 8003e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e94:	463b      	mov	r3, r7
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <MX_TIM4_Init+0x94>)
 8003e9e:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <MX_TIM4_Init+0x98>)
 8003ea0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <MX_TIM4_Init+0x94>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea8:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <MX_TIM4_Init+0x94>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003eae:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <MX_TIM4_Init+0x94>)
 8003eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eb6:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <MX_TIM4_Init+0x94>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ebc:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <MX_TIM4_Init+0x94>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003ec2:	4814      	ldr	r0, [pc, #80]	; (8003f14 <MX_TIM4_Init+0x94>)
 8003ec4:	f006 fcaa 	bl	800a81c <HAL_TIM_Base_Init>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003ece:	f000 fa75 	bl	80043bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ed6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ed8:	f107 0308 	add.w	r3, r7, #8
 8003edc:	4619      	mov	r1, r3
 8003ede:	480d      	ldr	r0, [pc, #52]	; (8003f14 <MX_TIM4_Init+0x94>)
 8003ee0:	f007 f848 	bl	800af74 <HAL_TIM_ConfigClockSource>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003eea:	f000 fa67 	bl	80043bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ef6:	463b      	mov	r3, r7
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4806      	ldr	r0, [pc, #24]	; (8003f14 <MX_TIM4_Init+0x94>)
 8003efc:	f007 fdec 	bl	800bad8 <HAL_TIMEx_MasterConfigSynchronization>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003f06:	f000 fa59 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f0a:	bf00      	nop
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	200006fc 	.word	0x200006fc
 8003f18:	40000800 	.word	0x40000800

08003f1c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f22:	f107 0318 	add.w	r3, r7, #24
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
 8003f2e:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8003f30:	f107 0308 	add.w	r3, r7, #8
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f3e:	463b      	mov	r3, r7
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003f46:	4b27      	ldr	r3, [pc, #156]	; (8003fe4 <MX_TIM5_Init+0xc8>)
 8003f48:	4a27      	ldr	r2, [pc, #156]	; (8003fe8 <MX_TIM5_Init+0xcc>)
 8003f4a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 167;
 8003f4c:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <MX_TIM5_Init+0xc8>)
 8003f4e:	22a7      	movs	r2, #167	; 0xa7
 8003f50:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f52:	4b24      	ldr	r3, [pc, #144]	; (8003fe4 <MX_TIM5_Init+0xc8>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003f58:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <MX_TIM5_Init+0xc8>)
 8003f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f60:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <MX_TIM5_Init+0xc8>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f66:	4b1f      	ldr	r3, [pc, #124]	; (8003fe4 <MX_TIM5_Init+0xc8>)
 8003f68:	2280      	movs	r2, #128	; 0x80
 8003f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003f6c:	481d      	ldr	r0, [pc, #116]	; (8003fe4 <MX_TIM5_Init+0xc8>)
 8003f6e:	f006 fc55 	bl	800a81c <HAL_TIM_Base_Init>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8003f78:	f000 fa20 	bl	80043bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f80:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003f82:	f107 0318 	add.w	r3, r7, #24
 8003f86:	4619      	mov	r1, r3
 8003f88:	4816      	ldr	r0, [pc, #88]	; (8003fe4 <MX_TIM5_Init+0xc8>)
 8003f8a:	f006 fff3 	bl	800af74 <HAL_TIM_ConfigClockSource>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003f94:	f000 fa12 	bl	80043bc <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 15;
 8003fa0:	230f      	movs	r3, #15
 8003fa2:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim5, &sConfig) != HAL_OK)
 8003fa8:	f107 0308 	add.w	r3, r7, #8
 8003fac:	4619      	mov	r1, r3
 8003fae:	480d      	ldr	r0, [pc, #52]	; (8003fe4 <MX_TIM5_Init+0xc8>)
 8003fb0:	f007 fc49 	bl	800b846 <HAL_TIMEx_HallSensor_Init>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_TIM5_Init+0xa2>
  {
    Error_Handler();
 8003fba:	f000 f9ff 	bl	80043bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8003fbe:	2350      	movs	r3, #80	; 0x50
 8003fc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003fc6:	463b      	mov	r3, r7
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4806      	ldr	r0, [pc, #24]	; (8003fe4 <MX_TIM5_Init+0xc8>)
 8003fcc:	f007 fd84 	bl	800bad8 <HAL_TIMEx_MasterConfigSynchronization>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8003fd6:	f000 f9f1 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003fda:	bf00      	nop
 8003fdc:	3728      	adds	r7, #40	; 0x28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000744 	.word	0x20000744
 8003fe8:	40000c00 	.word	0x40000c00

08003fec <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ff2:	463b      	mov	r3, r7
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003ffa:	4b14      	ldr	r3, [pc, #80]	; (800404c <MX_TIM7_Init+0x60>)
 8003ffc:	4a14      	ldr	r2, [pc, #80]	; (8004050 <MX_TIM7_Init+0x64>)
 8003ffe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8004000:	4b12      	ldr	r3, [pc, #72]	; (800404c <MX_TIM7_Init+0x60>)
 8004002:	2253      	movs	r2, #83	; 0x53
 8004004:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004006:	4b11      	ldr	r3, [pc, #68]	; (800404c <MX_TIM7_Init+0x60>)
 8004008:	2200      	movs	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 199;
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <MX_TIM7_Init+0x60>)
 800400e:	22c7      	movs	r2, #199	; 0xc7
 8004010:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004012:	4b0e      	ldr	r3, [pc, #56]	; (800404c <MX_TIM7_Init+0x60>)
 8004014:	2200      	movs	r2, #0
 8004016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004018:	480c      	ldr	r0, [pc, #48]	; (800404c <MX_TIM7_Init+0x60>)
 800401a:	f006 fbff 	bl	800a81c <HAL_TIM_Base_Init>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004024:	f000 f9ca 	bl	80043bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004028:	2300      	movs	r3, #0
 800402a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800402c:	2300      	movs	r3, #0
 800402e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004030:	463b      	mov	r3, r7
 8004032:	4619      	mov	r1, r3
 8004034:	4805      	ldr	r0, [pc, #20]	; (800404c <MX_TIM7_Init+0x60>)
 8004036:	f007 fd4f 	bl	800bad8 <HAL_TIMEx_MasterConfigSynchronization>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004040:	f000 f9bc 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	2000078c 	.word	0x2000078c
 8004050:	40001400 	.word	0x40001400

08004054 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b096      	sub	sp, #88	; 0x58
 8004058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800405a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	605a      	str	r2, [r3, #4]
 8004064:	609a      	str	r2, [r3, #8]
 8004066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004068:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	60da      	str	r2, [r3, #12]
 8004080:	611a      	str	r2, [r3, #16]
 8004082:	615a      	str	r2, [r3, #20]
 8004084:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004086:	1d3b      	adds	r3, r7, #4
 8004088:	2220      	movs	r2, #32
 800408a:	2100      	movs	r1, #0
 800408c:	4618      	mov	r0, r3
 800408e:	f00b ff65 	bl	800ff5c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004092:	4b50      	ldr	r3, [pc, #320]	; (80041d4 <MX_TIM8_Init+0x180>)
 8004094:	4a50      	ldr	r2, [pc, #320]	; (80041d8 <MX_TIM8_Init+0x184>)
 8004096:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004098:	4b4e      	ldr	r3, [pc, #312]	; (80041d4 <MX_TIM8_Init+0x180>)
 800409a:	2200      	movs	r2, #0
 800409c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800409e:	4b4d      	ldr	r3, [pc, #308]	; (80041d4 <MX_TIM8_Init+0x180>)
 80040a0:	2240      	movs	r2, #64	; 0x40
 80040a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4095;
 80040a4:	4b4b      	ldr	r3, [pc, #300]	; (80041d4 <MX_TIM8_Init+0x180>)
 80040a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80040aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ac:	4b49      	ldr	r3, [pc, #292]	; (80041d4 <MX_TIM8_Init+0x180>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80040b2:	4b48      	ldr	r3, [pc, #288]	; (80041d4 <MX_TIM8_Init+0x180>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040b8:	4b46      	ldr	r3, [pc, #280]	; (80041d4 <MX_TIM8_Init+0x180>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80040be:	4845      	ldr	r0, [pc, #276]	; (80041d4 <MX_TIM8_Init+0x180>)
 80040c0:	f006 fbac 	bl	800a81c <HAL_TIM_Base_Init>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80040ca:	f000 f977 	bl	80043bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80040d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040d8:	4619      	mov	r1, r3
 80040da:	483e      	ldr	r0, [pc, #248]	; (80041d4 <MX_TIM8_Init+0x180>)
 80040dc:	f006 ff4a 	bl	800af74 <HAL_TIM_ConfigClockSource>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80040e6:	f000 f969 	bl	80043bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80040ea:	483a      	ldr	r0, [pc, #232]	; (80041d4 <MX_TIM8_Init+0x180>)
 80040ec:	f006 fc56 	bl	800a99c <HAL_TIM_PWM_Init>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80040f6:	f000 f961 	bl	80043bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80040fa:	2370      	movs	r3, #112	; 0x70
 80040fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040fe:	2300      	movs	r3, #0
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004102:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004106:	4619      	mov	r1, r3
 8004108:	4832      	ldr	r0, [pc, #200]	; (80041d4 <MX_TIM8_Init+0x180>)
 800410a:	f007 fce5 	bl	800bad8 <HAL_TIMEx_MasterConfigSynchronization>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004114:	f000 f952 	bl	80043bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004118:	2360      	movs	r3, #96	; 0x60
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004120:	2300      	movs	r3, #0
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004124:	2300      	movs	r3, #0
 8004126:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004128:	2304      	movs	r3, #4
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800412c:	2300      	movs	r3, #0
 800412e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004130:	2300      	movs	r3, #0
 8004132:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004138:	2200      	movs	r2, #0
 800413a:	4619      	mov	r1, r3
 800413c:	4825      	ldr	r0, [pc, #148]	; (80041d4 <MX_TIM8_Init+0x180>)
 800413e:	f006 fe57 	bl	800adf0 <HAL_TIM_PWM_ConfigChannel>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8004148:	f000 f938 	bl	80043bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800414c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004150:	2204      	movs	r2, #4
 8004152:	4619      	mov	r1, r3
 8004154:	481f      	ldr	r0, [pc, #124]	; (80041d4 <MX_TIM8_Init+0x180>)
 8004156:	f006 fe4b 	bl	800adf0 <HAL_TIM_PWM_ConfigChannel>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8004160:	f000 f92c 	bl	80043bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004168:	2208      	movs	r2, #8
 800416a:	4619      	mov	r1, r3
 800416c:	4819      	ldr	r0, [pc, #100]	; (80041d4 <MX_TIM8_Init+0x180>)
 800416e:	f006 fe3f 	bl	800adf0 <HAL_TIM_PWM_ConfigChannel>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8004178:	f000 f920 	bl	80043bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800417c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004180:	220c      	movs	r2, #12
 8004182:	4619      	mov	r1, r3
 8004184:	4813      	ldr	r0, [pc, #76]	; (80041d4 <MX_TIM8_Init+0x180>)
 8004186:	f006 fe33 	bl	800adf0 <HAL_TIM_PWM_ConfigChannel>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8004190:	f000 f914 	bl	80043bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004194:	2300      	movs	r3, #0
 8004196:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004198:	2300      	movs	r3, #0
 800419a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80041b2:	1d3b      	adds	r3, r7, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4807      	ldr	r0, [pc, #28]	; (80041d4 <MX_TIM8_Init+0x180>)
 80041b8:	f007 fd0a 	bl	800bbd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80041c2:	f000 f8fb 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80041c6:	4803      	ldr	r0, [pc, #12]	; (80041d4 <MX_TIM8_Init+0x180>)
 80041c8:	f000 fd04 	bl	8004bd4 <HAL_TIM_MspPostInit>

}
 80041cc:	bf00      	nop
 80041ce:	3758      	adds	r7, #88	; 0x58
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	200007d4 	.word	0x200007d4
 80041d8:	40010400 	.word	0x40010400

080041dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <MX_DMA_Init+0x7c>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	4a1b      	ldr	r2, [pc, #108]	; (8004258 <MX_DMA_Init+0x7c>)
 80041ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041f0:	6313      	str	r3, [r2, #48]	; 0x30
 80041f2:	4b19      	ldr	r3, [pc, #100]	; (8004258 <MX_DMA_Init+0x7c>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80041fe:	2200      	movs	r2, #0
 8004200:	2100      	movs	r1, #0
 8004202:	2038      	movs	r0, #56	; 0x38
 8004204:	f002 fff7 	bl	80071f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004208:	2038      	movs	r0, #56	; 0x38
 800420a:	f003 f810 	bl	800722e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 800420e:	2200      	movs	r2, #0
 8004210:	2101      	movs	r1, #1
 8004212:	203a      	movs	r0, #58	; 0x3a
 8004214:	f002 ffef 	bl	80071f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004218:	203a      	movs	r0, #58	; 0x3a
 800421a:	f003 f808 	bl	800722e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800421e:	2200      	movs	r2, #0
 8004220:	2100      	movs	r1, #0
 8004222:	203b      	movs	r0, #59	; 0x3b
 8004224:	f002 ffe7 	bl	80071f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004228:	203b      	movs	r0, #59	; 0x3b
 800422a:	f003 f800 	bl	800722e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 6, 0);
 800422e:	2200      	movs	r2, #0
 8004230:	2106      	movs	r1, #6
 8004232:	203c      	movs	r0, #60	; 0x3c
 8004234:	f002 ffdf 	bl	80071f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004238:	203c      	movs	r0, #60	; 0x3c
 800423a:	f002 fff8 	bl	800722e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 1, 0);
 800423e:	2200      	movs	r2, #0
 8004240:	2101      	movs	r1, #1
 8004242:	2044      	movs	r0, #68	; 0x44
 8004244:	f002 ffd7 	bl	80071f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8004248:	2044      	movs	r0, #68	; 0x44
 800424a:	f002 fff0 	bl	800722e <HAL_NVIC_EnableIRQ>

}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800

0800425c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004262:	f107 0314 	add.w	r3, r7, #20
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	605a      	str	r2, [r3, #4]
 800426c:	609a      	str	r2, [r3, #8]
 800426e:	60da      	str	r2, [r3, #12]
 8004270:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	4b4d      	ldr	r3, [pc, #308]	; (80043ac <MX_GPIO_Init+0x150>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	4a4c      	ldr	r2, [pc, #304]	; (80043ac <MX_GPIO_Init+0x150>)
 800427c:	f043 0304 	orr.w	r3, r3, #4
 8004280:	6313      	str	r3, [r2, #48]	; 0x30
 8004282:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <MX_GPIO_Init+0x150>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	4b46      	ldr	r3, [pc, #280]	; (80043ac <MX_GPIO_Init+0x150>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	4a45      	ldr	r2, [pc, #276]	; (80043ac <MX_GPIO_Init+0x150>)
 8004298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429c:	6313      	str	r3, [r2, #48]	; 0x30
 800429e:	4b43      	ldr	r3, [pc, #268]	; (80043ac <MX_GPIO_Init+0x150>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	4b3f      	ldr	r3, [pc, #252]	; (80043ac <MX_GPIO_Init+0x150>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	4a3e      	ldr	r2, [pc, #248]	; (80043ac <MX_GPIO_Init+0x150>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ba:	4b3c      	ldr	r3, [pc, #240]	; (80043ac <MX_GPIO_Init+0x150>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c6:	2300      	movs	r3, #0
 80042c8:	607b      	str	r3, [r7, #4]
 80042ca:	4b38      	ldr	r3, [pc, #224]	; (80043ac <MX_GPIO_Init+0x150>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	4a37      	ldr	r2, [pc, #220]	; (80043ac <MX_GPIO_Init+0x150>)
 80042d0:	f043 0302 	orr.w	r3, r3, #2
 80042d4:	6313      	str	r3, [r2, #48]	; 0x30
 80042d6:	4b35      	ldr	r3, [pc, #212]	; (80043ac <MX_GPIO_Init+0x150>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80042e2:	2200      	movs	r2, #0
 80042e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042e8:	4831      	ldr	r0, [pc, #196]	; (80043b0 <MX_GPIO_Init+0x154>)
 80042ea:	f003 fee7 	bl	80080bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|M2_EN_U_Pin, GPIO_PIN_RESET);
 80042ee:	2200      	movs	r2, #0
 80042f0:	2190      	movs	r1, #144	; 0x90
 80042f2:	4830      	ldr	r0, [pc, #192]	; (80043b4 <MX_GPIO_Init+0x158>)
 80042f4:	f003 fee2 	bl	80080bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_EN_V_Pin|M2_EN_W_Pin|M1_EN_U_Pin|M1_EN_V_Pin
 80042f8:	2200      	movs	r2, #0
 80042fa:	f24e 0103 	movw	r1, #57347	; 0xe003
 80042fe:	482e      	ldr	r0, [pc, #184]	; (80043b8 <MX_GPIO_Init+0x15c>)
 8004300:	f003 fedc 	bl	80080bc <HAL_GPIO_WritePin>
                          |M1_EN_W_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8004304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800430a:	2301      	movs	r3, #1
 800430c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004312:	2300      	movs	r3, #0
 8004314:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8004316:	f107 0314 	add.w	r3, r7, #20
 800431a:	4619      	mov	r1, r3
 800431c:	4824      	ldr	r0, [pc, #144]	; (80043b0 <MX_GPIO_Init+0x154>)
 800431e:	f003 fd31 	bl	8007d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin M2_EN_U_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|M2_EN_U_Pin;
 8004322:	2390      	movs	r3, #144	; 0x90
 8004324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004326:	2301      	movs	r3, #1
 8004328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800432e:	2303      	movs	r3, #3
 8004330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004332:	f107 0314 	add.w	r3, r7, #20
 8004336:	4619      	mov	r1, r3
 8004338:	481e      	ldr	r0, [pc, #120]	; (80043b4 <MX_GPIO_Init+0x158>)
 800433a:	f003 fd23 	bl	8007d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_EN_V_Pin M2_EN_W_Pin M1_EN_U_Pin M1_EN_V_Pin
                           M1_EN_W_Pin */
  GPIO_InitStruct.Pin = M2_EN_V_Pin|M2_EN_W_Pin|M1_EN_U_Pin|M1_EN_V_Pin
 800433e:	f24e 0303 	movw	r3, #57347	; 0xe003
 8004342:	617b      	str	r3, [r7, #20]
                          |M1_EN_W_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004344:	2301      	movs	r3, #1
 8004346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004348:	2300      	movs	r3, #0
 800434a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800434c:	2303      	movs	r3, #3
 800434e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004350:	f107 0314 	add.w	r3, r7, #20
 8004354:	4619      	mov	r1, r3
 8004356:	4818      	ldr	r0, [pc, #96]	; (80043b8 <MX_GPIO_Init+0x15c>)
 8004358:	f003 fd14 	bl	8007d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_STEER_DET_Pin */
  GPIO_InitStruct.Pin = Z_STEER_DET_Pin;
 800435c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004362:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004368:	2301      	movs	r3, #1
 800436a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Z_STEER_DET_GPIO_Port, &GPIO_InitStruct);
 800436c:	f107 0314 	add.w	r3, r7, #20
 8004370:	4619      	mov	r1, r3
 8004372:	4811      	ldr	r0, [pc, #68]	; (80043b8 <MX_GPIO_Init+0x15c>)
 8004374:	f003 fd06 	bl	8007d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_LIMIT_Pin */
  GPIO_InitStruct.Pin = Z_LIMIT_Pin;
 8004378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800437c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004382:	2301      	movs	r3, #1
 8004384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Z_LIMIT_GPIO_Port, &GPIO_InitStruct);
 8004386:	f107 0314 	add.w	r3, r7, #20
 800438a:	4619      	mov	r1, r3
 800438c:	4808      	ldr	r0, [pc, #32]	; (80043b0 <MX_GPIO_Init+0x154>)
 800438e:	f003 fcf9 	bl	8007d84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8004392:	2200      	movs	r2, #0
 8004394:	2104      	movs	r1, #4
 8004396:	2028      	movs	r0, #40	; 0x28
 8004398:	f002 ff2d 	bl	80071f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800439c:	2028      	movs	r0, #40	; 0x28
 800439e:	f002 ff46 	bl	800722e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80043a2:	bf00      	nop
 80043a4:	3728      	adds	r7, #40	; 0x28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800
 80043b0:	40020800 	.word	0x40020800
 80043b4:	40020000 	.word	0x40020000
 80043b8:	40020400 	.word	0x40020400

080043bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043c0:	b672      	cpsid	i
}
 80043c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043c4:	e7fe      	b.n	80043c4 <Error_Handler+0x8>
	...

080043c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	607b      	str	r3, [r7, #4]
 80043d2:	4b10      	ldr	r3, [pc, #64]	; (8004414 <HAL_MspInit+0x4c>)
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	4a0f      	ldr	r2, [pc, #60]	; (8004414 <HAL_MspInit+0x4c>)
 80043d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043dc:	6453      	str	r3, [r2, #68]	; 0x44
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <HAL_MspInit+0x4c>)
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e6:	607b      	str	r3, [r7, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	603b      	str	r3, [r7, #0]
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_MspInit+0x4c>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <HAL_MspInit+0x4c>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_MspInit+0x4c>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800

08004418 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08e      	sub	sp, #56	; 0x38
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	60da      	str	r2, [r3, #12]
 800442e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a73      	ldr	r2, [pc, #460]	; (8004604 <HAL_ADC_MspInit+0x1ec>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d160      	bne.n	80044fc <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	4b72      	ldr	r3, [pc, #456]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	4a71      	ldr	r2, [pc, #452]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	6453      	str	r3, [r2, #68]	; 0x44
 800444a:	4b6f      	ldr	r3, [pc, #444]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	623b      	str	r3, [r7, #32]
 8004454:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	4b6b      	ldr	r3, [pc, #428]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	4a6a      	ldr	r2, [pc, #424]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 8004460:	f043 0304 	orr.w	r3, r3, #4
 8004464:	6313      	str	r3, [r2, #48]	; 0x30
 8004466:	4b68      	ldr	r3, [pc, #416]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = VBAT_SENS_Pin;
 8004472:	2310      	movs	r3, #16
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004476:	2303      	movs	r3, #3
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447a:	2300      	movs	r3, #0
 800447c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VBAT_SENS_GPIO_Port, &GPIO_InitStruct);
 800447e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004482:	4619      	mov	r1, r3
 8004484:	4861      	ldr	r0, [pc, #388]	; (800460c <HAL_ADC_MspInit+0x1f4>)
 8004486:	f003 fc7d 	bl	8007d84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800448a:	4b61      	ldr	r3, [pc, #388]	; (8004610 <HAL_ADC_MspInit+0x1f8>)
 800448c:	4a61      	ldr	r2, [pc, #388]	; (8004614 <HAL_ADC_MspInit+0x1fc>)
 800448e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004490:	4b5f      	ldr	r3, [pc, #380]	; (8004610 <HAL_ADC_MspInit+0x1f8>)
 8004492:	2200      	movs	r2, #0
 8004494:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004496:	4b5e      	ldr	r3, [pc, #376]	; (8004610 <HAL_ADC_MspInit+0x1f8>)
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800449c:	4b5c      	ldr	r3, [pc, #368]	; (8004610 <HAL_ADC_MspInit+0x1f8>)
 800449e:	2200      	movs	r2, #0
 80044a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80044a2:	4b5b      	ldr	r3, [pc, #364]	; (8004610 <HAL_ADC_MspInit+0x1f8>)
 80044a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80044aa:	4b59      	ldr	r3, [pc, #356]	; (8004610 <HAL_ADC_MspInit+0x1f8>)
 80044ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80044b2:	4b57      	ldr	r3, [pc, #348]	; (8004610 <HAL_ADC_MspInit+0x1f8>)
 80044b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80044ba:	4b55      	ldr	r3, [pc, #340]	; (8004610 <HAL_ADC_MspInit+0x1f8>)
 80044bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80044c2:	4b53      	ldr	r3, [pc, #332]	; (8004610 <HAL_ADC_MspInit+0x1f8>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044c8:	4b51      	ldr	r3, [pc, #324]	; (8004610 <HAL_ADC_MspInit+0x1f8>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80044ce:	4850      	ldr	r0, [pc, #320]	; (8004610 <HAL_ADC_MspInit+0x1f8>)
 80044d0:	f002 fec8 	bl	8007264 <HAL_DMA_Init>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80044da:	f7ff ff6f 	bl	80043bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a4b      	ldr	r2, [pc, #300]	; (8004610 <HAL_ADC_MspInit+0x1f8>)
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38
 80044e4:	4a4a      	ldr	r2, [pc, #296]	; (8004610 <HAL_ADC_MspInit+0x1f8>)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	2100      	movs	r1, #0
 80044ee:	2012      	movs	r0, #18
 80044f0:	f002 fe81 	bl	80071f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80044f4:	2012      	movs	r0, #18
 80044f6:	f002 fe9a 	bl	800722e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80044fa:	e0fc      	b.n	80046f6 <HAL_ADC_MspInit+0x2de>
  else if(hadc->Instance==ADC2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a45      	ldr	r2, [pc, #276]	; (8004618 <HAL_ADC_MspInit+0x200>)
 8004502:	4293      	cmp	r3, r2
 8004504:	f040 8090 	bne.w	8004628 <HAL_ADC_MspInit+0x210>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	4b3e      	ldr	r3, [pc, #248]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 800450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004510:	4a3d      	ldr	r2, [pc, #244]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 8004512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004516:	6453      	str	r3, [r2, #68]	; 0x44
 8004518:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	4b37      	ldr	r3, [pc, #220]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	4a36      	ldr	r2, [pc, #216]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	6313      	str	r3, [r2, #48]	; 0x30
 8004534:	4b34      	ldr	r3, [pc, #208]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004540:	2300      	movs	r3, #0
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	4b30      	ldr	r3, [pc, #192]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	4a2f      	ldr	r2, [pc, #188]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6313      	str	r3, [r2, #48]	; 0x30
 8004550:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <HAL_ADC_MspInit+0x1f0>)
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M2_ISENS_U_Pin;
 800455c:	2308      	movs	r3, #8
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004560:	2303      	movs	r3, #3
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004564:	2300      	movs	r3, #0
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2_ISENS_U_GPIO_Port, &GPIO_InitStruct);
 8004568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800456c:	4619      	mov	r1, r3
 800456e:	4827      	ldr	r0, [pc, #156]	; (800460c <HAL_ADC_MspInit+0x1f4>)
 8004570:	f003 fc08 	bl	8007d84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2_ISENS_V_Pin|M2_ISENS_W_Pin;
 8004574:	2348      	movs	r3, #72	; 0x48
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004578:	2303      	movs	r3, #3
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004584:	4619      	mov	r1, r3
 8004586:	4825      	ldr	r0, [pc, #148]	; (800461c <HAL_ADC_MspInit+0x204>)
 8004588:	f003 fbfc 	bl	8007d84 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream3;
 800458c:	4b24      	ldr	r3, [pc, #144]	; (8004620 <HAL_ADC_MspInit+0x208>)
 800458e:	4a25      	ldr	r2, [pc, #148]	; (8004624 <HAL_ADC_MspInit+0x20c>)
 8004590:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004592:	4b23      	ldr	r3, [pc, #140]	; (8004620 <HAL_ADC_MspInit+0x208>)
 8004594:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004598:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800459a:	4b21      	ldr	r3, [pc, #132]	; (8004620 <HAL_ADC_MspInit+0x208>)
 800459c:	2200      	movs	r2, #0
 800459e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80045a0:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <HAL_ADC_MspInit+0x208>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80045a6:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <HAL_ADC_MspInit+0x208>)
 80045a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ac:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <HAL_ADC_MspInit+0x208>)
 80045b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045b4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <HAL_ADC_MspInit+0x208>)
 80045b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045bc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80045be:	4b18      	ldr	r3, [pc, #96]	; (8004620 <HAL_ADC_MspInit+0x208>)
 80045c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045c4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80045c6:	4b16      	ldr	r3, [pc, #88]	; (8004620 <HAL_ADC_MspInit+0x208>)
 80045c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80045cc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045ce:	4b14      	ldr	r3, [pc, #80]	; (8004620 <HAL_ADC_MspInit+0x208>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80045d4:	4812      	ldr	r0, [pc, #72]	; (8004620 <HAL_ADC_MspInit+0x208>)
 80045d6:	f002 fe45 	bl	8007264 <HAL_DMA_Init>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_ADC_MspInit+0x1cc>
      Error_Handler();
 80045e0:	f7ff feec 	bl	80043bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a0e      	ldr	r2, [pc, #56]	; (8004620 <HAL_ADC_MspInit+0x208>)
 80045e8:	639a      	str	r2, [r3, #56]	; 0x38
 80045ea:	4a0d      	ldr	r2, [pc, #52]	; (8004620 <HAL_ADC_MspInit+0x208>)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80045f0:	2200      	movs	r2, #0
 80045f2:	2100      	movs	r1, #0
 80045f4:	2012      	movs	r0, #18
 80045f6:	f002 fdfe 	bl	80071f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80045fa:	2012      	movs	r0, #18
 80045fc:	f002 fe17 	bl	800722e <HAL_NVIC_EnableIRQ>
}
 8004600:	e079      	b.n	80046f6 <HAL_ADC_MspInit+0x2de>
 8004602:	bf00      	nop
 8004604:	40012000 	.word	0x40012000
 8004608:	40023800 	.word	0x40023800
 800460c:	40020800 	.word	0x40020800
 8004610:	200003c4 	.word	0x200003c4
 8004614:	40026470 	.word	0x40026470
 8004618:	40012100 	.word	0x40012100
 800461c:	40020000 	.word	0x40020000
 8004620:	20000424 	.word	0x20000424
 8004624:	40026458 	.word	0x40026458
  else if(hadc->Instance==ADC3)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a34      	ldr	r2, [pc, #208]	; (8004700 <HAL_ADC_MspInit+0x2e8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d161      	bne.n	80046f6 <HAL_ADC_MspInit+0x2de>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	4b33      	ldr	r3, [pc, #204]	; (8004704 <HAL_ADC_MspInit+0x2ec>)
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	4a32      	ldr	r2, [pc, #200]	; (8004704 <HAL_ADC_MspInit+0x2ec>)
 800463c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004640:	6453      	str	r3, [r2, #68]	; 0x44
 8004642:	4b30      	ldr	r3, [pc, #192]	; (8004704 <HAL_ADC_MspInit+0x2ec>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	4b2c      	ldr	r3, [pc, #176]	; (8004704 <HAL_ADC_MspInit+0x2ec>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	4a2b      	ldr	r2, [pc, #172]	; (8004704 <HAL_ADC_MspInit+0x2ec>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	6313      	str	r3, [r2, #48]	; 0x30
 800465e:	4b29      	ldr	r3, [pc, #164]	; (8004704 <HAL_ADC_MspInit+0x2ec>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_ISENS_U_Pin|M1_ISENS_V_Pin|M1_ISENS_W_Pin;
 800466a:	2307      	movs	r3, #7
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800466e:	2303      	movs	r3, #3
 8004670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004672:	2300      	movs	r3, #0
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800467a:	4619      	mov	r1, r3
 800467c:	4822      	ldr	r0, [pc, #136]	; (8004708 <HAL_ADC_MspInit+0x2f0>)
 800467e:	f003 fb81 	bl	8007d84 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8004682:	4b22      	ldr	r3, [pc, #136]	; (800470c <HAL_ADC_MspInit+0x2f4>)
 8004684:	4a22      	ldr	r2, [pc, #136]	; (8004710 <HAL_ADC_MspInit+0x2f8>)
 8004686:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8004688:	4b20      	ldr	r3, [pc, #128]	; (800470c <HAL_ADC_MspInit+0x2f4>)
 800468a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800468e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004690:	4b1e      	ldr	r3, [pc, #120]	; (800470c <HAL_ADC_MspInit+0x2f4>)
 8004692:	2200      	movs	r2, #0
 8004694:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004696:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_ADC_MspInit+0x2f4>)
 8004698:	2200      	movs	r2, #0
 800469a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800469c:	4b1b      	ldr	r3, [pc, #108]	; (800470c <HAL_ADC_MspInit+0x2f4>)
 800469e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046a2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80046a4:	4b19      	ldr	r3, [pc, #100]	; (800470c <HAL_ADC_MspInit+0x2f4>)
 80046a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046aa:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80046ac:	4b17      	ldr	r3, [pc, #92]	; (800470c <HAL_ADC_MspInit+0x2f4>)
 80046ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046b2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80046b4:	4b15      	ldr	r3, [pc, #84]	; (800470c <HAL_ADC_MspInit+0x2f4>)
 80046b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046ba:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80046bc:	4b13      	ldr	r3, [pc, #76]	; (800470c <HAL_ADC_MspInit+0x2f4>)
 80046be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80046c2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046c4:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_ADC_MspInit+0x2f4>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80046ca:	4810      	ldr	r0, [pc, #64]	; (800470c <HAL_ADC_MspInit+0x2f4>)
 80046cc:	f002 fdca 	bl	8007264 <HAL_DMA_Init>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_ADC_MspInit+0x2c2>
      Error_Handler();
 80046d6:	f7ff fe71 	bl	80043bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a0b      	ldr	r2, [pc, #44]	; (800470c <HAL_ADC_MspInit+0x2f4>)
 80046de:	639a      	str	r2, [r3, #56]	; 0x38
 80046e0:	4a0a      	ldr	r2, [pc, #40]	; (800470c <HAL_ADC_MspInit+0x2f4>)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80046e6:	2200      	movs	r2, #0
 80046e8:	2100      	movs	r1, #0
 80046ea:	2012      	movs	r0, #18
 80046ec:	f002 fd83 	bl	80071f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80046f0:	2012      	movs	r0, #18
 80046f2:	f002 fd9c 	bl	800722e <HAL_NVIC_EnableIRQ>
}
 80046f6:	bf00      	nop
 80046f8:	3738      	adds	r7, #56	; 0x38
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40012200 	.word	0x40012200
 8004704:	40023800 	.word	0x40023800
 8004708:	40020800 	.word	0x40020800
 800470c:	20000484 	.word	0x20000484
 8004710:	40026410 	.word	0x40026410

08004714 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800471c:	f107 0314 	add.w	r3, r7, #20
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <HAL_CAN_MspInit+0xa4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d13c      	bne.n	80047b0 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <HAL_CAN_MspInit+0xa8>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	4a1f      	ldr	r2, [pc, #124]	; (80047bc <HAL_CAN_MspInit+0xa8>)
 8004740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004744:	6413      	str	r3, [r2, #64]	; 0x40
 8004746:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <HAL_CAN_MspInit+0xa8>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	4b19      	ldr	r3, [pc, #100]	; (80047bc <HAL_CAN_MspInit+0xa8>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	4a18      	ldr	r2, [pc, #96]	; (80047bc <HAL_CAN_MspInit+0xa8>)
 800475c:	f043 0302 	orr.w	r3, r3, #2
 8004760:	6313      	str	r3, [r2, #48]	; 0x30
 8004762:	4b16      	ldr	r3, [pc, #88]	; (80047bc <HAL_CAN_MspInit+0xa8>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800476e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004774:	2302      	movs	r3, #2
 8004776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800477c:	2303      	movs	r3, #3
 800477e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004780:	2309      	movs	r3, #9
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004784:	f107 0314 	add.w	r3, r7, #20
 8004788:	4619      	mov	r1, r3
 800478a:	480d      	ldr	r0, [pc, #52]	; (80047c0 <HAL_CAN_MspInit+0xac>)
 800478c:	f003 fafa 	bl	8007d84 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8004790:	2200      	movs	r2, #0
 8004792:	2105      	movs	r1, #5
 8004794:	2014      	movs	r0, #20
 8004796:	f002 fd2e 	bl	80071f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800479a:	2014      	movs	r0, #20
 800479c:	f002 fd47 	bl	800722e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80047a0:	2200      	movs	r2, #0
 80047a2:	2105      	movs	r1, #5
 80047a4:	2015      	movs	r0, #21
 80047a6:	f002 fd26 	bl	80071f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80047aa:	2015      	movs	r0, #21
 80047ac:	f002 fd3f 	bl	800722e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80047b0:	bf00      	nop
 80047b2:	3728      	adds	r7, #40	; 0x28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40006400 	.word	0x40006400
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40020400 	.word	0x40020400

080047c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	; 0x28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047cc:	f107 0314 	add.w	r3, r7, #20
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a5b      	ldr	r2, [pc, #364]	; (8004950 <HAL_SPI_MspInit+0x18c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	f040 80b0 	bne.w	8004948 <HAL_SPI_MspInit+0x184>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80047e8:	2300      	movs	r3, #0
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	4b59      	ldr	r3, [pc, #356]	; (8004954 <HAL_SPI_MspInit+0x190>)
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	4a58      	ldr	r2, [pc, #352]	; (8004954 <HAL_SPI_MspInit+0x190>)
 80047f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047f6:	6453      	str	r3, [r2, #68]	; 0x44
 80047f8:	4b56      	ldr	r3, [pc, #344]	; (8004954 <HAL_SPI_MspInit+0x190>)
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	4b52      	ldr	r3, [pc, #328]	; (8004954 <HAL_SPI_MspInit+0x190>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	4a51      	ldr	r2, [pc, #324]	; (8004954 <HAL_SPI_MspInit+0x190>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6313      	str	r3, [r2, #48]	; 0x30
 8004814:	4b4f      	ldr	r3, [pc, #316]	; (8004954 <HAL_SPI_MspInit+0x190>)
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004820:	2300      	movs	r3, #0
 8004822:	60bb      	str	r3, [r7, #8]
 8004824:	4b4b      	ldr	r3, [pc, #300]	; (8004954 <HAL_SPI_MspInit+0x190>)
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	4a4a      	ldr	r2, [pc, #296]	; (8004954 <HAL_SPI_MspInit+0x190>)
 800482a:	f043 0302 	orr.w	r3, r3, #2
 800482e:	6313      	str	r3, [r2, #48]	; 0x30
 8004830:	4b48      	ldr	r3, [pc, #288]	; (8004954 <HAL_SPI_MspInit+0x190>)
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800483c:	2320      	movs	r3, #32
 800483e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004840:	2302      	movs	r3, #2
 8004842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004848:	2303      	movs	r3, #3
 800484a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800484c:	2305      	movs	r3, #5
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004850:	f107 0314 	add.w	r3, r7, #20
 8004854:	4619      	mov	r1, r3
 8004856:	4840      	ldr	r0, [pc, #256]	; (8004958 <HAL_SPI_MspInit+0x194>)
 8004858:	f003 fa94 	bl	8007d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800485c:	2330      	movs	r3, #48	; 0x30
 800485e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004860:	2302      	movs	r3, #2
 8004862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004864:	2300      	movs	r3, #0
 8004866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004868:	2303      	movs	r3, #3
 800486a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800486c:	2305      	movs	r3, #5
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004870:	f107 0314 	add.w	r3, r7, #20
 8004874:	4619      	mov	r1, r3
 8004876:	4839      	ldr	r0, [pc, #228]	; (800495c <HAL_SPI_MspInit+0x198>)
 8004878:	f003 fa84 	bl	8007d84 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800487c:	4b38      	ldr	r3, [pc, #224]	; (8004960 <HAL_SPI_MspInit+0x19c>)
 800487e:	4a39      	ldr	r2, [pc, #228]	; (8004964 <HAL_SPI_MspInit+0x1a0>)
 8004880:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_SPI_MspInit+0x19c>)
 8004884:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004888:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800488a:	4b35      	ldr	r3, [pc, #212]	; (8004960 <HAL_SPI_MspInit+0x19c>)
 800488c:	2200      	movs	r2, #0
 800488e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004890:	4b33      	ldr	r3, [pc, #204]	; (8004960 <HAL_SPI_MspInit+0x19c>)
 8004892:	2200      	movs	r2, #0
 8004894:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004896:	4b32      	ldr	r3, [pc, #200]	; (8004960 <HAL_SPI_MspInit+0x19c>)
 8004898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800489c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800489e:	4b30      	ldr	r3, [pc, #192]	; (8004960 <HAL_SPI_MspInit+0x19c>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048a4:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <HAL_SPI_MspInit+0x19c>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80048aa:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <HAL_SPI_MspInit+0x19c>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80048b0:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <HAL_SPI_MspInit+0x19c>)
 80048b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80048b6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048b8:	4b29      	ldr	r3, [pc, #164]	; (8004960 <HAL_SPI_MspInit+0x19c>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80048be:	4828      	ldr	r0, [pc, #160]	; (8004960 <HAL_SPI_MspInit+0x19c>)
 80048c0:	f002 fcd0 	bl	8007264 <HAL_DMA_Init>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 80048ca:	f7ff fd77 	bl	80043bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a23      	ldr	r2, [pc, #140]	; (8004960 <HAL_SPI_MspInit+0x19c>)
 80048d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80048d4:	4a22      	ldr	r2, [pc, #136]	; (8004960 <HAL_SPI_MspInit+0x19c>)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80048da:	4b23      	ldr	r3, [pc, #140]	; (8004968 <HAL_SPI_MspInit+0x1a4>)
 80048dc:	4a23      	ldr	r2, [pc, #140]	; (800496c <HAL_SPI_MspInit+0x1a8>)
 80048de:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80048e0:	4b21      	ldr	r3, [pc, #132]	; (8004968 <HAL_SPI_MspInit+0x1a4>)
 80048e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80048e6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048e8:	4b1f      	ldr	r3, [pc, #124]	; (8004968 <HAL_SPI_MspInit+0x1a4>)
 80048ea:	2240      	movs	r2, #64	; 0x40
 80048ec:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048ee:	4b1e      	ldr	r3, [pc, #120]	; (8004968 <HAL_SPI_MspInit+0x1a4>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048f4:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <HAL_SPI_MspInit+0x1a4>)
 80048f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048fa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048fc:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <HAL_SPI_MspInit+0x1a4>)
 80048fe:	2200      	movs	r2, #0
 8004900:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004902:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_SPI_MspInit+0x1a4>)
 8004904:	2200      	movs	r2, #0
 8004906:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004908:	4b17      	ldr	r3, [pc, #92]	; (8004968 <HAL_SPI_MspInit+0x1a4>)
 800490a:	2200      	movs	r2, #0
 800490c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800490e:	4b16      	ldr	r3, [pc, #88]	; (8004968 <HAL_SPI_MspInit+0x1a4>)
 8004910:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004914:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004916:	4b14      	ldr	r3, [pc, #80]	; (8004968 <HAL_SPI_MspInit+0x1a4>)
 8004918:	2200      	movs	r2, #0
 800491a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800491c:	4812      	ldr	r0, [pc, #72]	; (8004968 <HAL_SPI_MspInit+0x1a4>)
 800491e:	f002 fca1 	bl	8007264 <HAL_DMA_Init>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 8004928:	f7ff fd48 	bl	80043bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a0e      	ldr	r2, [pc, #56]	; (8004968 <HAL_SPI_MspInit+0x1a4>)
 8004930:	649a      	str	r2, [r3, #72]	; 0x48
 8004932:	4a0d      	ldr	r2, [pc, #52]	; (8004968 <HAL_SPI_MspInit+0x1a4>)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8004938:	2200      	movs	r2, #0
 800493a:	2101      	movs	r1, #1
 800493c:	2023      	movs	r0, #35	; 0x23
 800493e:	f002 fc5a 	bl	80071f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004942:	2023      	movs	r0, #35	; 0x23
 8004944:	f002 fc73 	bl	800722e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004948:	bf00      	nop
 800494a:	3728      	adds	r7, #40	; 0x28
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40013000 	.word	0x40013000
 8004954:	40023800 	.word	0x40023800
 8004958:	40020000 	.word	0x40020000
 800495c:	40020400 	.word	0x40020400
 8004960:	20000564 	.word	0x20000564
 8004964:	40026440 	.word	0x40026440
 8004968:	200005c4 	.word	0x200005c4
 800496c:	40026488 	.word	0x40026488

08004970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b092      	sub	sp, #72	; 0x48
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004978:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	609a      	str	r2, [r3, #8]
 8004984:	60da      	str	r2, [r3, #12]
 8004986:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a88      	ldr	r2, [pc, #544]	; (8004bb0 <HAL_TIM_Base_MspInit+0x240>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d10e      	bne.n	80049b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	633b      	str	r3, [r7, #48]	; 0x30
 8004996:	4b87      	ldr	r3, [pc, #540]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499a:	4a86      	ldr	r2, [pc, #536]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	6453      	str	r3, [r2, #68]	; 0x44
 80049a2:	4b84      	ldr	r3, [pc, #528]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 80049a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	633b      	str	r3, [r7, #48]	; 0x30
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80049ae:	e0fa      	b.n	8004ba6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b8:	d154      	bne.n	8004a64 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049be:	4b7d      	ldr	r3, [pc, #500]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	4a7c      	ldr	r2, [pc, #496]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6413      	str	r3, [r2, #64]	; 0x40
 80049ca:	4b7a      	ldr	r3, [pc, #488]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049da:	4b76      	ldr	r3, [pc, #472]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	4a75      	ldr	r2, [pc, #468]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	6313      	str	r3, [r2, #48]	; 0x30
 80049e6:	4b73      	ldr	r3, [pc, #460]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
 80049f6:	4b6f      	ldr	r3, [pc, #444]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	4a6e      	ldr	r2, [pc, #440]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	6313      	str	r3, [r2, #48]	; 0x30
 8004a02:	4b6c      	ldr	r3, [pc, #432]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8004a0e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8004a12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a14:	2302      	movs	r3, #2
 8004a16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a20:	2301      	movs	r3, #1
 8004a22:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4863      	ldr	r0, [pc, #396]	; (8004bb8 <HAL_TIM_Base_MspInit+0x248>)
 8004a2c:	f003 f9aa 	bl	8007d84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004a30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a36:	2302      	movs	r3, #2
 8004a38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a42:	2301      	movs	r3, #1
 8004a44:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	485b      	ldr	r0, [pc, #364]	; (8004bbc <HAL_TIM_Base_MspInit+0x24c>)
 8004a4e:	f003 f999 	bl	8007d84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8004a52:	2200      	movs	r2, #0
 8004a54:	2104      	movs	r1, #4
 8004a56:	201c      	movs	r0, #28
 8004a58:	f002 fbcd 	bl	80071f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004a5c:	201c      	movs	r0, #28
 8004a5e:	f002 fbe6 	bl	800722e <HAL_NVIC_EnableIRQ>
}
 8004a62:	e0a0      	b.n	8004ba6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM3)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a55      	ldr	r2, [pc, #340]	; (8004bc0 <HAL_TIM_Base_MspInit+0x250>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d116      	bne.n	8004a9c <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	623b      	str	r3, [r7, #32]
 8004a72:	4b50      	ldr	r3, [pc, #320]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	4a4f      	ldr	r2, [pc, #316]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004a78:	f043 0302 	orr.w	r3, r3, #2
 8004a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7e:	4b4d      	ldr	r3, [pc, #308]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	623b      	str	r3, [r7, #32]
 8004a88:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 14, 0);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	210e      	movs	r1, #14
 8004a8e:	201d      	movs	r0, #29
 8004a90:	f002 fbb1 	bl	80071f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a94:	201d      	movs	r0, #29
 8004a96:	f002 fbca 	bl	800722e <HAL_NVIC_EnableIRQ>
}
 8004a9a:	e084      	b.n	8004ba6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM4)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a48      	ldr	r2, [pc, #288]	; (8004bc4 <HAL_TIM_Base_MspInit+0x254>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d116      	bne.n	8004ad4 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a41      	ldr	r2, [pc, #260]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004ab0:	f043 0304 	orr.w	r3, r3, #4
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab6:	4b3f      	ldr	r3, [pc, #252]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2103      	movs	r1, #3
 8004ac6:	201e      	movs	r0, #30
 8004ac8:	f002 fb95 	bl	80071f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004acc:	201e      	movs	r0, #30
 8004ace:	f002 fbae 	bl	800722e <HAL_NVIC_EnableIRQ>
}
 8004ad2:	e068      	b.n	8004ba6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a3b      	ldr	r2, [pc, #236]	; (8004bc8 <HAL_TIM_Base_MspInit+0x258>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d134      	bne.n	8004b48 <HAL_TIM_Base_MspInit+0x1d8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	4b34      	ldr	r3, [pc, #208]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	4a33      	ldr	r2, [pc, #204]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004ae8:	f043 0308 	orr.w	r3, r3, #8
 8004aec:	6413      	str	r3, [r2, #64]	; 0x40
 8004aee:	4b31      	ldr	r3, [pc, #196]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	61bb      	str	r3, [r7, #24]
 8004af8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	4b2d      	ldr	r3, [pc, #180]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	4a2c      	ldr	r2, [pc, #176]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	6313      	str	r3, [r2, #48]	; 0x30
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M2_HALL_SENS_A_Pin|M2_HALL_SENS_B_Pin|M2_HALL_SENS_C_Pin;
 8004b16:	2307      	movs	r3, #7
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b22:	2300      	movs	r3, #0
 8004b24:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004b26:	2302      	movs	r3, #2
 8004b28:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4822      	ldr	r0, [pc, #136]	; (8004bbc <HAL_TIM_Base_MspInit+0x24c>)
 8004b32:	f003 f927 	bl	8007d84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8004b36:	2200      	movs	r2, #0
 8004b38:	2101      	movs	r1, #1
 8004b3a:	2032      	movs	r0, #50	; 0x32
 8004b3c:	f002 fb5b 	bl	80071f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004b40:	2032      	movs	r0, #50	; 0x32
 8004b42:	f002 fb74 	bl	800722e <HAL_NVIC_EnableIRQ>
}
 8004b46:	e02e      	b.n	8004ba6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <HAL_TIM_Base_MspInit+0x25c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d116      	bne.n	8004b80 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	4b17      	ldr	r3, [pc, #92]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	4a16      	ldr	r2, [pc, #88]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004b5c:	f043 0320 	orr.w	r3, r3, #32
 8004b60:	6413      	str	r3, [r2, #64]	; 0x40
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2101      	movs	r1, #1
 8004b72:	2037      	movs	r0, #55	; 0x37
 8004b74:	f002 fb3f 	bl	80071f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004b78:	2037      	movs	r0, #55	; 0x37
 8004b7a:	f002 fb58 	bl	800722e <HAL_NVIC_EnableIRQ>
}
 8004b7e:	e012      	b.n	8004ba6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a12      	ldr	r2, [pc, #72]	; (8004bd0 <HAL_TIM_Base_MspInit+0x260>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d10d      	bne.n	8004ba6 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004b94:	f043 0302 	orr.w	r3, r3, #2
 8004b98:	6453      	str	r3, [r2, #68]	; 0x44
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <HAL_TIM_Base_MspInit+0x244>)
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
}
 8004ba6:	bf00      	nop
 8004ba8:	3748      	adds	r7, #72	; 0x48
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	40020400 	.word	0x40020400
 8004bbc:	40020000 	.word	0x40020000
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800
 8004bc8:	40000c00 	.word	0x40000c00
 8004bcc:	40001400 	.word	0x40001400
 8004bd0:	40010400 	.word	0x40010400

08004bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	; 0x28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bdc:	f107 0314 	add.w	r3, r7, #20
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a25      	ldr	r2, [pc, #148]	; (8004c88 <HAL_TIM_MspPostInit+0xb4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d11f      	bne.n	8004c36 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <HAL_TIM_MspPostInit+0xb8>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <HAL_TIM_MspPostInit+0xb8>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6313      	str	r3, [r2, #48]	; 0x30
 8004c06:	4b21      	ldr	r3, [pc, #132]	; (8004c8c <HAL_TIM_MspPostInit+0xb8>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M1_PWM_U_Pin|M1_PWM_V_Pin|M1_PWM_W_Pin;
 8004c12:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c20:	2300      	movs	r3, #0
 8004c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c24:	2301      	movs	r3, #1
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c28:	f107 0314 	add.w	r3, r7, #20
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4818      	ldr	r0, [pc, #96]	; (8004c90 <HAL_TIM_MspPostInit+0xbc>)
 8004c30:	f003 f8a8 	bl	8007d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004c34:	e023      	b.n	8004c7e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a16      	ldr	r2, [pc, #88]	; (8004c94 <HAL_TIM_MspPostInit+0xc0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d11e      	bne.n	8004c7e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <HAL_TIM_MspPostInit+0xb8>)
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <HAL_TIM_MspPostInit+0xb8>)
 8004c4a:	f043 0304 	orr.w	r3, r3, #4
 8004c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c50:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <HAL_TIM_MspPostInit+0xb8>)
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2_PWM_U_Pin|M2_PWM_V_Pin|M2_PWM_W_Pin;
 8004c5c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c62:	2302      	movs	r3, #2
 8004c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c72:	f107 0314 	add.w	r3, r7, #20
 8004c76:	4619      	mov	r1, r3
 8004c78:	4807      	ldr	r0, [pc, #28]	; (8004c98 <HAL_TIM_MspPostInit+0xc4>)
 8004c7a:	f003 f883 	bl	8007d84 <HAL_GPIO_Init>
}
 8004c7e:	bf00      	nop
 8004c80:	3728      	adds	r7, #40	; 0x28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40020000 	.word	0x40020000
 8004c94:	40010400 	.word	0x40010400
 8004c98:	40020800 	.word	0x40020800

08004c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ca0:	e7fe      	b.n	8004ca0 <NMI_Handler+0x4>

08004ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ca6:	e7fe      	b.n	8004ca6 <HardFault_Handler+0x4>

08004ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cac:	e7fe      	b.n	8004cac <MemManage_Handler+0x4>

08004cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cb2:	e7fe      	b.n	8004cb2 <BusFault_Handler+0x4>

08004cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cb8:	e7fe      	b.n	8004cb8 <UsageFault_Handler+0x4>

08004cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cbe:	bf00      	nop
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ccc:	bf00      	nop
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cda:	bf00      	nop
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ce8:	f000 fcd4 	bl	8005694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cec:	bf00      	nop
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004cf4:	4805      	ldr	r0, [pc, #20]	; (8004d0c <ADC_IRQHandler+0x1c>)
 8004cf6:	f000 fd54 	bl	80057a2 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004cfa:	4805      	ldr	r0, [pc, #20]	; (8004d10 <ADC_IRQHandler+0x20>)
 8004cfc:	f000 fd51 	bl	80057a2 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8004d00:	4804      	ldr	r0, [pc, #16]	; (8004d14 <ADC_IRQHandler+0x24>)
 8004d02:	f000 fd4e 	bl	80057a2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004d06:	bf00      	nop
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	200002ec 	.word	0x200002ec
 8004d10:	20000334 	.word	0x20000334
 8004d14:	2000037c 	.word	0x2000037c

08004d18 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004d1c:	4802      	ldr	r0, [pc, #8]	; (8004d28 <CAN1_RX0_IRQHandler+0x10>)
 8004d1e:	f001 ff60 	bl	8006be2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004d22:	bf00      	nop
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	200004e4 	.word	0x200004e4

08004d2c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004d30:	4802      	ldr	r0, [pc, #8]	; (8004d3c <CAN1_RX1_IRQHandler+0x10>)
 8004d32:	f001 ff56 	bl	8006be2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004d36:	bf00      	nop
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200004e4 	.word	0x200004e4

08004d40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004d44:	4802      	ldr	r0, [pc, #8]	; (8004d50 <TIM2_IRQHandler+0x10>)
 8004d46:	f005 ff4b 	bl	800abe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004d4a:	bf00      	nop
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	2000066c 	.word	0x2000066c

08004d54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d58:	4802      	ldr	r0, [pc, #8]	; (8004d64 <TIM3_IRQHandler+0x10>)
 8004d5a:	f005 ff41 	bl	800abe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	200006b4 	.word	0x200006b4

08004d68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004d6c:	4802      	ldr	r0, [pc, #8]	; (8004d78 <TIM4_IRQHandler+0x10>)
 8004d6e:	f005 ff37 	bl	800abe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004d72:	bf00      	nop
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	200006fc 	.word	0x200006fc

08004d7c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004d80:	4802      	ldr	r0, [pc, #8]	; (8004d8c <SPI1_IRQHandler+0x10>)
 8004d82:	f005 fa07 	bl	800a194 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	2000050c 	.word	0x2000050c

08004d90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Z_STEER_DET_Pin);
 8004d94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004d98:	f003 f9aa 	bl	80080f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004d9c:	bf00      	nop
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004da4:	4802      	ldr	r0, [pc, #8]	; (8004db0 <TIM5_IRQHandler+0x10>)
 8004da6:	f005 ff1b 	bl	800abe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004daa:	bf00      	nop
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000744 	.word	0x20000744

08004db4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004db8:	4802      	ldr	r0, [pc, #8]	; (8004dc4 <TIM7_IRQHandler+0x10>)
 8004dba:	f005 ff11 	bl	800abe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004dbe:	bf00      	nop
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	2000078c 	.word	0x2000078c

08004dc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004dcc:	4802      	ldr	r0, [pc, #8]	; (8004dd8 <DMA2_Stream0_IRQHandler+0x10>)
 8004dce:	f002 fb71 	bl	80074b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004dd2:	bf00      	nop
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000484 	.word	0x20000484

08004ddc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004de0:	4802      	ldr	r0, [pc, #8]	; (8004dec <DMA2_Stream2_IRQHandler+0x10>)
 8004de2:	f002 fb67 	bl	80074b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004de6:	bf00      	nop
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000564 	.word	0x20000564

08004df0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004df4:	4802      	ldr	r0, [pc, #8]	; (8004e00 <DMA2_Stream3_IRQHandler+0x10>)
 8004df6:	f002 fb5d 	bl	80074b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000424 	.word	0x20000424

08004e04 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e08:	4802      	ldr	r0, [pc, #8]	; (8004e14 <DMA2_Stream4_IRQHandler+0x10>)
 8004e0a:	f002 fb53 	bl	80074b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	200003c4 	.word	0x200003c4

08004e18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004e1c:	4802      	ldr	r0, [pc, #8]	; (8004e28 <OTG_FS_IRQHandler+0x10>)
 8004e1e:	f003 facf 	bl	80083c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004e22:	bf00      	nop
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20002444 	.word	0x20002444

08004e2c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004e30:	4802      	ldr	r0, [pc, #8]	; (8004e3c <DMA2_Stream5_IRQHandler+0x10>)
 8004e32:	f002 fb3f 	bl	80074b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200005c4 	.word	0x200005c4

08004e40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  return 1;
 8004e44:	2301      	movs	r3, #1
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <_kill>:

int _kill(int pid, int sig)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e5a:	f00b f855 	bl	800ff08 <__errno>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2216      	movs	r2, #22
 8004e62:	601a      	str	r2, [r3, #0]
  return -1;
 8004e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <_exit>:

void _exit (int status)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e78:	f04f 31ff 	mov.w	r1, #4294967295
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff ffe7 	bl	8004e50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e82:	e7fe      	b.n	8004e82 <_exit+0x12>

08004e84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e00a      	b.n	8004eac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e96:	f3af 8000 	nop.w
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	60ba      	str	r2, [r7, #8]
 8004ea2:	b2ca      	uxtb	r2, r1
 8004ea4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	dbf0      	blt.n	8004e96 <_read+0x12>
  }

  return len;
 8004eb4:	687b      	ldr	r3, [r7, #4]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b086      	sub	sp, #24
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e009      	b.n	8004ee4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	60ba      	str	r2, [r7, #8]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	dbf1      	blt.n	8004ed0 <_write+0x12>
  }
  return len;
 8004eec:	687b      	ldr	r3, [r7, #4]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <_close>:

int _close(int file)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f1e:	605a      	str	r2, [r3, #4]
  return 0;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <_isatty>:

int _isatty(int file)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f36:	2301      	movs	r3, #1
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
	...

08004f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f68:	4a14      	ldr	r2, [pc, #80]	; (8004fbc <_sbrk+0x5c>)
 8004f6a:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <_sbrk+0x60>)
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f74:	4b13      	ldr	r3, [pc, #76]	; (8004fc4 <_sbrk+0x64>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d102      	bne.n	8004f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f7c:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <_sbrk+0x64>)
 8004f7e:	4a12      	ldr	r2, [pc, #72]	; (8004fc8 <_sbrk+0x68>)
 8004f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f82:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <_sbrk+0x64>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4413      	add	r3, r2
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d207      	bcs.n	8004fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f90:	f00a ffba 	bl	800ff08 <__errno>
 8004f94:	4603      	mov	r3, r0
 8004f96:	220c      	movs	r2, #12
 8004f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9e:	e009      	b.n	8004fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fa0:	4b08      	ldr	r3, [pc, #32]	; (8004fc4 <_sbrk+0x64>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fa6:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <_sbrk+0x64>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	4a05      	ldr	r2, [pc, #20]	; (8004fc4 <_sbrk+0x64>)
 8004fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20020000 	.word	0x20020000
 8004fc0:	00000400 	.word	0x00000400
 8004fc4:	20000f24 	.word	0x20000f24
 8004fc8:	20002b80 	.word	0x20002b80

08004fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <SystemInit+0x20>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	4a05      	ldr	r2, [pc, #20]	; (8004fec <SystemInit+0x20>)
 8004fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	e000ed00 	.word	0xe000ed00

08004ff0 <Reset_Handler>:
 8004ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005028 <LoopFillZerobss+0x12>
 8004ff4:	480d      	ldr	r0, [pc, #52]	; (800502c <LoopFillZerobss+0x16>)
 8004ff6:	490e      	ldr	r1, [pc, #56]	; (8005030 <LoopFillZerobss+0x1a>)
 8004ff8:	4a0e      	ldr	r2, [pc, #56]	; (8005034 <LoopFillZerobss+0x1e>)
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e002      	b.n	8005004 <LoopCopyDataInit>

08004ffe <CopyDataInit>:
 8004ffe:	58d4      	ldr	r4, [r2, r3]
 8005000:	50c4      	str	r4, [r0, r3]
 8005002:	3304      	adds	r3, #4

08005004 <LoopCopyDataInit>:
 8005004:	18c4      	adds	r4, r0, r3
 8005006:	428c      	cmp	r4, r1
 8005008:	d3f9      	bcc.n	8004ffe <CopyDataInit>
 800500a:	4a0b      	ldr	r2, [pc, #44]	; (8005038 <LoopFillZerobss+0x22>)
 800500c:	4c0b      	ldr	r4, [pc, #44]	; (800503c <LoopFillZerobss+0x26>)
 800500e:	2300      	movs	r3, #0
 8005010:	e001      	b.n	8005016 <LoopFillZerobss>

08005012 <FillZerobss>:
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	3204      	adds	r2, #4

08005016 <LoopFillZerobss>:
 8005016:	42a2      	cmp	r2, r4
 8005018:	d3fb      	bcc.n	8005012 <FillZerobss>
 800501a:	f7ff ffd7 	bl	8004fcc <SystemInit>
 800501e:	f00a ff79 	bl	800ff14 <__libc_init_array>
 8005022:	f7fe fa9d 	bl	8003560 <main>
 8005026:	4770      	bx	lr
 8005028:	20020000 	.word	0x20020000
 800502c:	20000000 	.word	0x20000000
 8005030:	200002d0 	.word	0x200002d0
 8005034:	08014580 	.word	0x08014580
 8005038:	200002d0 	.word	0x200002d0
 800503c:	20002b80 	.word	0x20002b80

08005040 <CAN1_SCE_IRQHandler>:
 8005040:	e7fe      	b.n	8005040 <CAN1_SCE_IRQHandler>

08005042 <dlpf_set_alpha>:
#include "DLPF_lib.h"

//============================================================================================

void dlpf_set_alpha (DLPF_HandleTypeDef *hdlpf, double alpha_val)
{
 8005042:	b480      	push	{r7}
 8005044:	b085      	sub	sp, #20
 8005046:	af00      	add	r7, sp, #0
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	ed87 0b00 	vstr	d0, [r7]
	hdlpf->alpha = alpha_val;
 800504e:	68f9      	ldr	r1, [r7, #12]
 8005050:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005054:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8005058:	bf00      	nop
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <dlpf_get_result>:

//============================================================================================

double dlpf_get_result (DLPF_HandleTypeDef *hdlpf, double raw_data)
{
 8005064:	b5b0      	push	{r4, r5, r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	ed87 0b00 	vstr	d0, [r7]
	hdlpf->result = hdlpf->result * (1.0 - hdlpf->alpha) + raw_data * hdlpf->alpha;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800507c:	f04f 0000 	mov.w	r0, #0
 8005080:	4915      	ldr	r1, [pc, #84]	; (80050d8 <dlpf_get_result+0x74>)
 8005082:	f7fb f901 	bl	8000288 <__aeabi_dsub>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4620      	mov	r0, r4
 800508c:	4629      	mov	r1, r5
 800508e:	f7fb fab3 	bl	80005f8 <__aeabi_dmul>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4614      	mov	r4, r2
 8005098:	461d      	mov	r5, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80050a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a4:	f7fb faa8 	bl	80005f8 <__aeabi_dmul>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4620      	mov	r0, r4
 80050ae:	4629      	mov	r1, r5
 80050b0:	f7fb f8ec 	bl	800028c <__adddf3>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	68f9      	ldr	r1, [r7, #12]
 80050ba:	e9c1 2300 	strd	r2, r3, [r1]
	return hdlpf->result;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	ec43 2b17 	vmov	d7, r2, r3
}
 80050c8:	eeb0 0a47 	vmov.f32	s0, s14
 80050cc:	eef0 0a67 	vmov.f32	s1, s15
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bdb0      	pop	{r4, r5, r7, pc}
 80050d6:	bf00      	nop
 80050d8:	3ff00000 	.word	0x3ff00000

080050dc <FLASH_erase_sector>:

static uint32_t flash_sector_addr;
static uint8_t flash_sector_num;

void FLASH_erase_sector(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80050e0:	f002 fca6 	bl	8007a30 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(flash_sector_num, FLASH_VOLTAGE_RANGE_3);
 80050e4:	4b04      	ldr	r3, [pc, #16]	; (80050f8 <FLASH_erase_sector+0x1c>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2102      	movs	r1, #2
 80050ea:	4618      	mov	r0, r3
 80050ec:	f002 fe02 	bl	8007cf4 <FLASH_Erase_Sector>
	//Lock the Flash space
	HAL_FLASH_Lock();
 80050f0:	f002 fcc0 	bl	8007a74 <HAL_FLASH_Lock>
}
 80050f4:	bf00      	nop
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	20000f2c 	.word	0x20000f2c

080050fc <FLASH_set_sector_addrs>:

void FLASH_set_sector_addrs(uint8_t sector, uint32_t addrs)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	6039      	str	r1, [r7, #0]
 8005106:	71fb      	strb	r3, [r7, #7]
	flash_sector_num = sector;
 8005108:	4a05      	ldr	r2, [pc, #20]	; (8005120 <FLASH_set_sector_addrs+0x24>)
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	7013      	strb	r3, [r2, #0]
	flash_sector_addr = addrs;
 800510e:	4a05      	ldr	r2, [pc, #20]	; (8005124 <FLASH_set_sector_addrs+0x28>)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6013      	str	r3, [r2, #0]
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	20000f2c 	.word	0x20000f2c
 8005124:	20000f28 	.word	0x20000f28

08005128 <FLASH_write>:

void FLASH_write(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8005128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800512c:	b088      	sub	sp, #32
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = flash_sector_addr + idx;
 8005138:	4b37      	ldr	r3, [pc, #220]	; (8005218 <FLASH_write+0xf0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	61fb      	str	r3, [r7, #28]
	
	//Erase sector before write
	FLASH_erase_sector();
 8005142:	f7ff ffcb 	bl	80050dc <FLASH_erase_sector>
	//Unlock Flash
	HAL_FLASH_Unlock();
 8005146:	f002 fc73 	bl	8007a30 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d03f      	beq.n	80051d0 <FLASH_write+0xa8>
 8005150:	2b02      	cmp	r3, #2
 8005152:	dc59      	bgt.n	8005208 <FLASH_write+0xe0>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <FLASH_write+0x36>
 8005158:	2b01      	cmp	r3, #1
 800515a:	d01c      	beq.n	8005196 <FLASH_write+0x6e>
 800515c:	e054      	b.n	8005208 <FLASH_write+0xe0>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 800515e:	2300      	movs	r3, #0
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	e013      	b.n	800518c <FLASH_write+0x64>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	4413      	add	r3, r2
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2200      	movs	r2, #0
 8005170:	469a      	mov	sl, r3
 8005172:	4693      	mov	fp, r2
 8005174:	4652      	mov	r2, sl
 8005176:	465b      	mov	r3, fp
 8005178:	69f9      	ldr	r1, [r7, #28]
 800517a:	2000      	movs	r0, #0
 800517c:	f002 fc04 	bl	8007988 <HAL_FLASH_Program>
					flashAddress++;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	3301      	adds	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	3301      	adds	r3, #1
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	d3e7      	bcc.n	8005164 <FLASH_write+0x3c>
				}
			break;
 8005194:	e038      	b.n	8005208 <FLASH_write+0xe0>
		
		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	e014      	b.n	80051c6 <FLASH_write+0x9e>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	4413      	add	r3, r2
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2200      	movs	r2, #0
 80051aa:	4698      	mov	r8, r3
 80051ac:	4691      	mov	r9, r2
 80051ae:	4642      	mov	r2, r8
 80051b0:	464b      	mov	r3, r9
 80051b2:	69f9      	ldr	r1, [r7, #28]
 80051b4:	2001      	movs	r0, #1
 80051b6:	f002 fbe7 	bl	8007988 <HAL_FLASH_Program>
					flashAddress+=2;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	3302      	adds	r3, #2
 80051be:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3301      	adds	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d3e6      	bcc.n	800519c <FLASH_write+0x74>
				}
			break;
 80051ce:	e01b      	b.n	8005208 <FLASH_write+0xe0>
		
		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 80051d0:	2300      	movs	r3, #0
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	e013      	b.n	80051fe <FLASH_write+0xd6>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	4413      	add	r3, r2
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2200      	movs	r2, #0
 80051e2:	461c      	mov	r4, r3
 80051e4:	4615      	mov	r5, r2
 80051e6:	4622      	mov	r2, r4
 80051e8:	462b      	mov	r3, r5
 80051ea:	69f9      	ldr	r1, [r7, #28]
 80051ec:	2002      	movs	r0, #2
 80051ee:	f002 fbcb 	bl	8007988 <HAL_FLASH_Program>
					flashAddress+=4;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3304      	adds	r3, #4
 80051f6:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	3301      	adds	r3, #1
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	429a      	cmp	r2, r3
 8005204:	d3e7      	bcc.n	80051d6 <FLASH_write+0xae>
				}
			break;
 8005206:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 8005208:	f002 fc34 	bl	8007a74 <HAL_FLASH_Lock>
}
 800520c:	bf00      	nop
 800520e:	3720      	adds	r7, #32
 8005210:	46bd      	mov	sp, r7
 8005212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005216:	bf00      	nop
 8005218:	20000f28 	.word	0x20000f28

0800521c <FLASH_read>:

void FLASH_read(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 800521c:	b480      	push	{r7}
 800521e:	b089      	sub	sp, #36	; 0x24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = flash_sector_addr + idx;
 800522a:	4b29      	ldr	r3, [pc, #164]	; (80052d0 <FLASH_read+0xb4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	61fb      	str	r3, [r7, #28]
	
	switch(dataType)
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d02f      	beq.n	800529a <FLASH_read+0x7e>
 800523a:	2b02      	cmp	r3, #2
 800523c:	dc42      	bgt.n	80052c4 <FLASH_read+0xa8>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <FLASH_read+0x2c>
 8005242:	2b01      	cmp	r3, #1
 8005244:	d014      	beq.n	8005270 <FLASH_read+0x54>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 8005246:	e03d      	b.n	80052c4 <FLASH_read+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8005248:	2300      	movs	r3, #0
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	e00b      	b.n	8005266 <FLASH_read+0x4a>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	440b      	add	r3, r1
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3301      	adds	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	3301      	adds	r3, #1
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	429a      	cmp	r2, r3
 800526c:	d3ef      	bcc.n	800524e <FLASH_read+0x32>
			break;
 800526e:	e029      	b.n	80052c4 <FLASH_read+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e00c      	b.n	8005290 <FLASH_read+0x74>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	440b      	add	r3, r1
 8005280:	8812      	ldrh	r2, [r2, #0]
 8005282:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	3302      	adds	r3, #2
 8005288:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	3301      	adds	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	429a      	cmp	r2, r3
 8005296:	d3ee      	bcc.n	8005276 <FLASH_read+0x5a>
			break;
 8005298:	e014      	b.n	80052c4 <FLASH_read+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	e00c      	b.n	80052ba <FLASH_read+0x9e>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	440b      	add	r3, r1
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	3304      	adds	r3, #4
 80052b2:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	3301      	adds	r3, #1
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d3ee      	bcc.n	80052a0 <FLASH_read+0x84>
			break;
 80052c2:	bf00      	nop
}
 80052c4:	bf00      	nop
 80052c6:	3724      	adds	r7, #36	; 0x24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	20000f28 	.word	0x20000f28

080052d4 <PID_set_konstanta>:
  * 		ki 	  	integral constant
  * 		kd 	  	differential constant
  * @retval none
  */
void PID_set_konstanta (PID_HandleTypeDef *hpid, double kp, double ki, double kd)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b089      	sub	sp, #36	; 0x24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	61f8      	str	r0, [r7, #28]
 80052dc:	ed87 0b04 	vstr	d0, [r7, #16]
 80052e0:	ed87 1b02 	vstr	d1, [r7, #8]
 80052e4:	ed87 2b00 	vstr	d2, [r7]
	hpid->kp = kp;
 80052e8:	69f9      	ldr	r1, [r7, #28]
 80052ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
	hpid->ki = ki;
 80052f2:	69f9      	ldr	r1, [r7, #28]
 80052f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052f8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	hpid->kd = kd;
 80052fc:	69f9      	ldr	r1, [r7, #28]
 80052fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005302:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8005306:	bf00      	nop
 8005308:	3724      	adds	r7, #36	; 0x24
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <PID_set_max_value>:
  * 		max_mv	maximum manipulated value / output from PID, PI, or PD control
  * 		max_int_error	limit integral error
  * @retval none
  */
void PID_set_max_value (PID_HandleTypeDef *hpid, double max_mv, double max_int_error)
{
 8005312:	b480      	push	{r7}
 8005314:	b087      	sub	sp, #28
 8005316:	af00      	add	r7, sp, #0
 8005318:	6178      	str	r0, [r7, #20]
 800531a:	ed87 0b02 	vstr	d0, [r7, #8]
 800531e:	ed87 1b00 	vstr	d1, [r7]
	hpid->max_mv = max_mv;
 8005322:	6979      	ldr	r1, [r7, #20]
 8005324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005328:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	hpid->max_int_error = max_int_error;
 800532c:	6979      	ldr	r1, [r7, #20]
 800532e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005332:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <PID_calculate>:
  * 		sp		set point
  * 		pv		previous value
  * @retval mv		manipulated value / output PID Control
  */
double PID_calculate (PID_HandleTypeDef *hpid, double sp, double pv)
{
 8005344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005348:	b08c      	sub	sp, #48	; 0x30
 800534a:	af00      	add	r7, sp, #0
 800534c:	61f8      	str	r0, [r7, #28]
 800534e:	ed87 0b04 	vstr	d0, [r7, #16]
 8005352:	ed87 1b02 	vstr	d1, [r7, #8]
	double result, dt;
	dt = get_us () - hpid->last_us;
 8005356:	f000 f91f 	bl	8005598 <get_us>
 800535a:	ec51 0b10 	vmov	r0, r1, d0
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005364:	f7fa ff90 	bl	8000288 <__aeabi_dsub>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	ts = dt;
 8005370:	4981      	ldr	r1, [pc, #516]	; (8005578 <PID_calculate+0x234>)
 8005372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005376:	e9c1 2300 	strd	r2, r3, [r1]
	if (dt < 0) dt = 0;
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005386:	f7fb fba9 	bl	8000adc <__aeabi_dcmplt>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <PID_calculate+0x58>
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9c7 2308 	strd	r2, r3, [r7, #32]
	hpid->last_us = get_us ();
 800539c:	f000 f8fc 	bl	8005598 <get_us>
 80053a0:	eeb0 7a40 	vmov.f32	s14, s0
 80053a4:	eef0 7a60 	vmov.f32	s15, s1
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	hpid->error = sp - pv;
 80053ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80053b6:	f7fa ff67 	bl	8000288 <__aeabi_dsub>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	69f9      	ldr	r1, [r7, #28]
 80053c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	hpid->P = hpid->error * hpid->kp;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80053d0:	f7fb f912 	bl	80005f8 <__aeabi_dmul>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	69f9      	ldr	r1, [r7, #28]
 80053da:	e9c1 2300 	strd	r2, r3, [r1]
//	if (hpid->aw == 0)
	hpid->int_error += hpid->error * dt;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80053e4:	ed87 7b00 	vstr	d7, [r7]
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80053ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053f2:	f7fb f901 	bl	80005f8 <__aeabi_dmul>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053fe:	f7fa ff45 	bl	800028c <__adddf3>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	69f9      	ldr	r1, [r7, #28]
 8005408:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	if (hpid->int_error > hpid->max_int_error) hpid->int_error = hpid->max_int_error;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005418:	f7fb fb7e 	bl	8000b18 <__aeabi_dcmpgt>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d006      	beq.n	8005430 <PID_calculate+0xec>
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005428:	69f9      	ldr	r1, [r7, #28]
 800542a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800542e:	e018      	b.n	8005462 <PID_calculate+0x11e>
	else if (hpid->int_error < -hpid->max_int_error) hpid->int_error = -hpid->max_int_error;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800543c:	4692      	mov	sl, r2
 800543e:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8005442:	4652      	mov	r2, sl
 8005444:	465b      	mov	r3, fp
 8005446:	f7fb fb49 	bl	8000adc <__aeabi_dcmplt>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <PID_calculate+0x11e>
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005456:	4614      	mov	r4, r2
 8005458:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
	hpid->I = hpid->int_error * hpid->ki;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800546e:	f7fb f8c3 	bl	80005f8 <__aeabi_dmul>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	69f9      	ldr	r1, [r7, #28]
 8005478:	e9c1 2302 	strd	r2, r3, [r1, #8]
	hpid->D = (hpid->error - hpid->last_error) * dt * hpid->kd;
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005488:	f7fa fefe 	bl	8000288 <__aeabi_dsub>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4610      	mov	r0, r2
 8005492:	4619      	mov	r1, r3
 8005494:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005498:	f7fb f8ae 	bl	80005f8 <__aeabi_dmul>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4610      	mov	r0, r2
 80054a2:	4619      	mov	r1, r3
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80054aa:	f7fb f8a5 	bl	80005f8 <__aeabi_dmul>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	69f9      	ldr	r1, [r7, #28]
 80054b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	hpid->last_error = hpid->error;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80054be:	69f9      	ldr	r1, [r7, #28]
 80054c0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	result = hpid->P + hpid->I + hpid->D;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80054d0:	f7fa fedc 	bl	800028c <__adddf3>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4610      	mov	r0, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80054e2:	f7fa fed3 	bl	800028c <__adddf3>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	hpid->aw = 0;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	if (result > hpid->max_mv)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80054fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005500:	f7fb fb0a 	bl	8000b18 <__aeabi_dcmpgt>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <PID_calculate+0x1da>
	{
		result = hpid->max_mv;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005510:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		hpid->aw = 1;
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800551c:	e01a      	b.n	8005554 <PID_calculate+0x210>
	}
	else if (result < -hpid->max_mv)
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005524:	4690      	mov	r8, r2
 8005526:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800552a:	4642      	mov	r2, r8
 800552c:	464b      	mov	r3, r9
 800552e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005532:	f7fb fad3 	bl	8000adc <__aeabi_dcmplt>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00b      	beq.n	8005554 <PID_calculate+0x210>
	{
		result = -hpid->max_mv;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005542:	4611      	mov	r1, r2
 8005544:	62b9      	str	r1, [r7, #40]	; 0x28
 8005546:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c
		hpid->aw = 1;
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	}
	hpid->mv = result;
 8005554:	69f9      	ldr	r1, [r7, #28]
 8005556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800555a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	return result;
 800555e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005562:	ec43 2b17 	vmov	d7, r2, r3
}
 8005566:	eeb0 0a47 	vmov.f32	s0, s14
 800556a:	eef0 0a67 	vmov.f32	s1, s15
 800556e:	3730      	adds	r7, #48	; 0x30
 8005570:	46bd      	mov	sp, r7
 8005572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005576:	bf00      	nop
 8005578:	20000f38 	.word	0x20000f38

0800557c <counting_time>:
}

//============================================================================================

void counting_time (void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
	t_count++;
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <counting_time+0x18>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3301      	adds	r3, #1
 8005586:	4a03      	ldr	r2, [pc, #12]	; (8005594 <counting_time+0x18>)
 8005588:	6013      	str	r3, [r2, #0]
}
 800558a:	bf00      	nop
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	20000f30 	.word	0x20000f30

08005598 <get_us>:

double get_us (void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
	double us;
	us = (double)(TIM4->CNT + t_count*65535) * 0.00595238095238095;
 800559e:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <get_us+0x50>)
 80055a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <get_us+0x54>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4613      	mov	r3, r2
 80055a8:	041b      	lsls	r3, r3, #16
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	440b      	add	r3, r1
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fa ffa8 	bl	8000504 <__aeabi_ui2d>
 80055b4:	a30a      	add	r3, pc, #40	; (adr r3, 80055e0 <get_us+0x48>)
 80055b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ba:	f7fb f81d 	bl	80005f8 <__aeabi_dmul>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	e9c7 2300 	strd	r2, r3, [r7]
	return us;
 80055c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80055ce:	eeb0 0a47 	vmov.f32	s0, s14
 80055d2:	eef0 0a67 	vmov.f32	s1, s15
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	f3af 8000 	nop.w
 80055e0:	18618616 	.word	0x18618616
 80055e4:	3f786186 	.word	0x3f786186
 80055e8:	40000800 	.word	0x40000800
 80055ec:	20000f30 	.word	0x20000f30

080055f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055f4:	4b0e      	ldr	r3, [pc, #56]	; (8005630 <HAL_Init+0x40>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a0d      	ldr	r2, [pc, #52]	; (8005630 <HAL_Init+0x40>)
 80055fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <HAL_Init+0x40>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a0a      	ldr	r2, [pc, #40]	; (8005630 <HAL_Init+0x40>)
 8005606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800560a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800560c:	4b08      	ldr	r3, [pc, #32]	; (8005630 <HAL_Init+0x40>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a07      	ldr	r2, [pc, #28]	; (8005630 <HAL_Init+0x40>)
 8005612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005618:	2003      	movs	r0, #3
 800561a:	f001 fde1 	bl	80071e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800561e:	200f      	movs	r0, #15
 8005620:	f000 f808 	bl	8005634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005624:	f7fe fed0 	bl	80043c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	40023c00 	.word	0x40023c00

08005634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800563c:	4b12      	ldr	r3, [pc, #72]	; (8005688 <HAL_InitTick+0x54>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	4b12      	ldr	r3, [pc, #72]	; (800568c <HAL_InitTick+0x58>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	4619      	mov	r1, r3
 8005646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800564a:	fbb3 f3f1 	udiv	r3, r3, r1
 800564e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005652:	4618      	mov	r0, r3
 8005654:	f001 fdf9 	bl	800724a <HAL_SYSTICK_Config>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e00e      	b.n	8005680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b0f      	cmp	r3, #15
 8005666:	d80a      	bhi.n	800567e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005668:	2200      	movs	r2, #0
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	f04f 30ff 	mov.w	r0, #4294967295
 8005670:	f001 fdc1 	bl	80071f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005674:	4a06      	ldr	r2, [pc, #24]	; (8005690 <HAL_InitTick+0x5c>)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	e000      	b.n	8005680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20000004 	.word	0x20000004
 800568c:	2000000c 	.word	0x2000000c
 8005690:	20000008 	.word	0x20000008

08005694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005698:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <HAL_IncTick+0x20>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <HAL_IncTick+0x24>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4413      	add	r3, r2
 80056a4:	4a04      	ldr	r2, [pc, #16]	; (80056b8 <HAL_IncTick+0x24>)
 80056a6:	6013      	str	r3, [r2, #0]
}
 80056a8:	bf00      	nop
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	2000000c 	.word	0x2000000c
 80056b8:	20000f40 	.word	0x20000f40

080056bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  return uwTick;
 80056c0:	4b03      	ldr	r3, [pc, #12]	; (80056d0 <HAL_GetTick+0x14>)
 80056c2:	681b      	ldr	r3, [r3, #0]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	20000f40 	.word	0x20000f40

080056d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056dc:	f7ff ffee 	bl	80056bc <HAL_GetTick>
 80056e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d005      	beq.n	80056fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056ee:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <HAL_Delay+0x44>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056fa:	bf00      	nop
 80056fc:	f7ff ffde 	bl	80056bc <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	429a      	cmp	r2, r3
 800570a:	d8f7      	bhi.n	80056fc <HAL_Delay+0x28>
  {
  }
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	2000000c 	.word	0x2000000c

0800571c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e033      	b.n	800579a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fe fe6c 	bl	8004418 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b00      	cmp	r3, #0
 8005758:	d118      	bne.n	800578c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005762:	f023 0302 	bic.w	r3, r3, #2
 8005766:	f043 0202 	orr.w	r2, r3, #2
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fa68 	bl	8005c44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f023 0303 	bic.w	r3, r3, #3
 8005782:	f043 0201 	orr.w	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
 800578a:	e001      	b.n	8005790 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b086      	sub	sp, #24
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	2300      	movs	r3, #0
 80057b0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d049      	beq.n	800586c <HAL_ADC_IRQHandler+0xca>
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d046      	beq.n	800586c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f003 0310 	and.w	r3, r3, #16
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d105      	bne.n	80057f6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d12b      	bne.n	800585c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005808:	2b00      	cmp	r3, #0
 800580a:	d127      	bne.n	800585c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005812:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005816:	2b00      	cmp	r3, #0
 8005818:	d006      	beq.n	8005828 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005824:	2b00      	cmp	r3, #0
 8005826:	d119      	bne.n	800585c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0220 	bic.w	r2, r2, #32
 8005836:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d105      	bne.n	800585c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f043 0201 	orr.w	r2, r3, #1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f8b0 	bl	80059c2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f06f 0212 	mvn.w	r2, #18
 800586a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d057      	beq.n	8005932 <HAL_ADC_IRQHandler+0x190>
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d054      	beq.n	8005932 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d139      	bne.n	8005922 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d006      	beq.n	80058ca <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d12b      	bne.n	8005922 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d124      	bne.n	8005922 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d11d      	bne.n	8005922 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d119      	bne.n	8005922 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058fc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d105      	bne.n	8005922 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f043 0201 	orr.w	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fd fbbc 	bl	80030a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 020c 	mvn.w	r2, #12
 8005930:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d017      	beq.n	8005978 <HAL_ADC_IRQHandler+0x1d6>
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d014      	beq.n	8005978 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b01      	cmp	r3, #1
 800595a:	d10d      	bne.n	8005978 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f834 	bl	80059d6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f06f 0201 	mvn.w	r2, #1
 8005976:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005986:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d015      	beq.n	80059ba <HAL_ADC_IRQHandler+0x218>
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d012      	beq.n	80059ba <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005998:	f043 0202 	orr.w	r2, r3, #2
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0220 	mvn.w	r2, #32
 80059a8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f81d 	bl	80059ea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0220 	mvn.w	r2, #32
 80059b8:	601a      	str	r2, [r3, #0]
  }
}
 80059ba:	bf00      	nop
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
	...

08005a00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_ADC_ConfigChannel+0x1c>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e105      	b.n	8005c28 <HAL_ADC_ConfigChannel+0x228>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b09      	cmp	r3, #9
 8005a2a:	d925      	bls.n	8005a78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68d9      	ldr	r1, [r3, #12]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	4413      	add	r3, r2
 8005a40:	3b1e      	subs	r3, #30
 8005a42:	2207      	movs	r2, #7
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	43da      	mvns	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	400a      	ands	r2, r1
 8005a50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68d9      	ldr	r1, [r3, #12]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	4618      	mov	r0, r3
 8005a64:	4603      	mov	r3, r0
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	4403      	add	r3, r0
 8005a6a:	3b1e      	subs	r3, #30
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	e022      	b.n	8005abe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6919      	ldr	r1, [r3, #16]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	2207      	movs	r2, #7
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	43da      	mvns	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	400a      	ands	r2, r1
 8005a9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6919      	ldr	r1, [r3, #16]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	4618      	mov	r0, r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	4403      	add	r3, r0
 8005ab4:	409a      	lsls	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b06      	cmp	r3, #6
 8005ac4:	d824      	bhi.n	8005b10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	3b05      	subs	r3, #5
 8005ad8:	221f      	movs	r2, #31
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	43da      	mvns	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	400a      	ands	r2, r1
 8005ae6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	4618      	mov	r0, r3
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	3b05      	subs	r3, #5
 8005b02:	fa00 f203 	lsl.w	r2, r0, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	635a      	str	r2, [r3, #52]	; 0x34
 8005b0e:	e04c      	b.n	8005baa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2b0c      	cmp	r3, #12
 8005b16:	d824      	bhi.n	8005b62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	3b23      	subs	r3, #35	; 0x23
 8005b2a:	221f      	movs	r2, #31
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	43da      	mvns	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	400a      	ands	r2, r1
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	4618      	mov	r0, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	3b23      	subs	r3, #35	; 0x23
 8005b54:	fa00 f203 	lsl.w	r2, r0, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8005b60:	e023      	b.n	8005baa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	3b41      	subs	r3, #65	; 0x41
 8005b74:	221f      	movs	r2, #31
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	43da      	mvns	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	400a      	ands	r2, r1
 8005b82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	4618      	mov	r0, r3
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3b41      	subs	r3, #65	; 0x41
 8005b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005baa:	4b22      	ldr	r3, [pc, #136]	; (8005c34 <HAL_ADC_ConfigChannel+0x234>)
 8005bac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a21      	ldr	r2, [pc, #132]	; (8005c38 <HAL_ADC_ConfigChannel+0x238>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d109      	bne.n	8005bcc <HAL_ADC_ConfigChannel+0x1cc>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b12      	cmp	r3, #18
 8005bbe:	d105      	bne.n	8005bcc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a19      	ldr	r2, [pc, #100]	; (8005c38 <HAL_ADC_ConfigChannel+0x238>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d123      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x21e>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b10      	cmp	r3, #16
 8005bdc:	d003      	beq.n	8005be6 <HAL_ADC_ConfigChannel+0x1e6>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b11      	cmp	r3, #17
 8005be4:	d11b      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d111      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005bfa:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <HAL_ADC_ConfigChannel+0x23c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a10      	ldr	r2, [pc, #64]	; (8005c40 <HAL_ADC_ConfigChannel+0x240>)
 8005c00:	fba2 2303 	umull	r2, r3, r2, r3
 8005c04:	0c9a      	lsrs	r2, r3, #18
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c10:	e002      	b.n	8005c18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f9      	bne.n	8005c12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	40012300 	.word	0x40012300
 8005c38:	40012000 	.word	0x40012000
 8005c3c:	20000004 	.word	0x20000004
 8005c40:	431bde83 	.word	0x431bde83

08005c44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c4c:	4b79      	ldr	r3, [pc, #484]	; (8005e34 <ADC_Init+0x1f0>)
 8005c4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	431a      	orrs	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6859      	ldr	r1, [r3, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	021a      	lsls	r2, r3, #8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005c9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6859      	ldr	r1, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	4a58      	ldr	r2, [pc, #352]	; (8005e38 <ADC_Init+0x1f4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d022      	beq.n	8005d22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6899      	ldr	r1, [r3, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6899      	ldr	r1, [r3, #8]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	609a      	str	r2, [r3, #8]
 8005d20:	e00f      	b.n	8005d42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0202 	bic.w	r2, r2, #2
 8005d50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6899      	ldr	r1, [r3, #8]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	7e1b      	ldrb	r3, [r3, #24]
 8005d5c:	005a      	lsls	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01b      	beq.n	8005da8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005d8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6859      	ldr	r1, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	035a      	lsls	r2, r3, #13
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	e007      	b.n	8005db8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005db6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	051a      	lsls	r2, r3, #20
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005dec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6899      	ldr	r1, [r3, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dfa:	025a      	lsls	r2, r3, #9
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6899      	ldr	r1, [r3, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	029a      	lsls	r2, r3, #10
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]
}
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	40012300 	.word	0x40012300
 8005e38:	0f000001 	.word	0x0f000001

08005e3c <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <HAL_ADCEx_InjectedStart_IT+0x22>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e0b2      	b.n	8005fc4 <HAL_ADCEx_InjectedStart_IT+0x188>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d018      	beq.n	8005ea6 <HAL_ADCEx_InjectedStart_IT+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0201 	orr.w	r2, r2, #1
 8005e82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005e84:	4b52      	ldr	r3, [pc, #328]	; (8005fd0 <HAL_ADCEx_InjectedStart_IT+0x194>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a52      	ldr	r2, [pc, #328]	; (8005fd4 <HAL_ADCEx_InjectedStart_IT+0x198>)
 8005e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8e:	0c9a      	lsrs	r2, r3, #18
 8005e90:	4613      	mov	r3, r2
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	4413      	add	r3, r2
 8005e96:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005e98:	e002      	b.n	8005ea0 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f9      	bne.n	8005e9a <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d17a      	bne.n	8005faa <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ebc:	f023 0301 	bic.w	r3, r3, #1
 8005ec0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f06f 0204 	mvn.w	r2, #4
 8005eea:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005efa:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005efc:	4b36      	ldr	r3, [pc, #216]	; (8005fd8 <HAL_ADCEx_InjectedStart_IT+0x19c>)
 8005efe:	60fb      	str	r3, [r7, #12]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d124      	bne.n	8005f56 <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	bf0c      	ite	eq
 8005f1a:	2301      	moveq	r3, #1
 8005f1c:	2300      	movne	r3, #0
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	bf0c      	ite	eq
 8005f30:	2301      	moveq	r3, #1
 8005f32:	2300      	movne	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d041      	beq.n	8005fc2 <HAL_ADCEx_InjectedStart_IT+0x186>
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d03e      	beq.n	8005fc2 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005f52:	609a      	str	r2, [r3, #8]
 8005f54:	e035      	b.n	8005fc2 <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bf0c      	ite	eq
 8005f64:	2301      	moveq	r3, #1
 8005f66:	2300      	movne	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a15      	ldr	r2, [pc, #84]	; (8005fdc <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d11a      	bne.n	8005fc2 <HAL_ADCEx_InjectedStart_IT+0x186>
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d017      	beq.n	8005fc2 <HAL_ADCEx_InjectedStart_IT+0x186>
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d014      	beq.n	8005fc2 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005fa6:	609a      	str	r2, [r3, #8]
 8005fa8:	e00b      	b.n	8005fc2 <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	f043 0210 	orr.w	r2, r3, #16
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fba:	f043 0201 	orr.w	r2, r3, #1
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	371c      	adds	r7, #28
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	20000004 	.word	0x20000004
 8005fd4:	431bde83 	.word	0x431bde83
 8005fd8:	40012300 	.word	0x40012300
 8005fdc:	40012000 	.word	0x40012000

08005fe0 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f06f 0204 	mvn.w	r2, #4
 8005ff6:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d81f      	bhi.n	8006040 <HAL_ADCEx_InjectedGetValue+0x60>
 8006000:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <HAL_ADCEx_InjectedGetValue+0x28>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	08006037 	.word	0x08006037
 800600c:	0800602d 	.word	0x0800602d
 8006010:	08006023 	.word	0x08006023
 8006014:	08006019 	.word	0x08006019
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800601e:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8006020:	e00f      	b.n	8006042 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006028:	60fb      	str	r3, [r7, #12]
    }  
    break;
 800602a:	e00a      	b.n	8006042 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	60fb      	str	r3, [r7, #12]
    }
    break;
 8006034:	e005      	b.n	8006042 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603c:	60fb      	str	r3, [r7, #12]
    }
    break;
 800603e:	e000      	b.n	8006042 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8006040:	bf00      	nop
  }
  return tmp;
 8006042:	68fb      	ldr	r3, [r7, #12]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8006064:	2302      	movs	r3, #2
 8006066:	e17d      	b.n	8006364 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b09      	cmp	r3, #9
 8006076:	d925      	bls.n	80060c4 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68d9      	ldr	r1, [r3, #12]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	4613      	mov	r3, r2
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	4413      	add	r3, r2
 800608c:	3b1e      	subs	r3, #30
 800608e:	2207      	movs	r2, #7
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	43da      	mvns	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	400a      	ands	r2, r1
 800609c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68d9      	ldr	r1, [r3, #12]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	4618      	mov	r0, r3
 80060b0:	4603      	mov	r3, r0
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	4403      	add	r3, r0
 80060b6:	3b1e      	subs	r3, #30
 80060b8:	409a      	lsls	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	60da      	str	r2, [r3, #12]
 80060c2:	e022      	b.n	800610a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6919      	ldr	r1, [r3, #16]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	461a      	mov	r2, r3
 80060d2:	4613      	mov	r3, r2
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	4413      	add	r3, r2
 80060d8:	2207      	movs	r2, #7
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	43da      	mvns	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	400a      	ands	r2, r1
 80060e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6919      	ldr	r1, [r3, #16]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	4618      	mov	r0, r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	4403      	add	r3, r0
 8006100:	409a      	lsls	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006118:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	3b01      	subs	r3, #1
 8006126:	051a      	lsls	r2, r3, #20
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	b2db      	uxtb	r3, r3
 8006146:	3303      	adds	r3, #3
 8006148:	b2db      	uxtb	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	221f      	movs	r2, #31
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	43da      	mvns	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	400a      	ands	r2, r1
 8006160:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	b29b      	uxth	r3, r3
 800616e:	4618      	mov	r0, r3
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	b2da      	uxtb	r2, r3
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	b2db      	uxtb	r3, r3
 8006180:	3303      	adds	r3, #3
 8006182:	b2db      	uxtb	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	fa00 f203 	lsl.w	r2, r0, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	4a74      	ldr	r2, [pc, #464]	; (8006370 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d022      	beq.n	80061e8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80061b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6899      	ldr	r1, [r3, #8]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	699a      	ldr	r2, [r3, #24]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80061d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6899      	ldr	r1, [r3, #8]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	69da      	ldr	r2, [r3, #28]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	609a      	str	r2, [r3, #8]
 80061e6:	e00f      	b.n	8006208 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80061f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006206:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	7d5b      	ldrb	r3, [r3, #21]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d008      	beq.n	8006222 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800621e:	605a      	str	r2, [r3, #4]
 8006220:	e007      	b.n	8006232 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006230:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	7d1b      	ldrb	r3, [r3, #20]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d008      	beq.n	800624c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006248:	605a      	str	r2, [r3, #4]
 800624a:	e007      	b.n	800625c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800625a:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b03      	cmp	r3, #3
 8006262:	d02e      	beq.n	80062c2 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8006264:	2b03      	cmp	r3, #3
 8006266:	d840      	bhi.n	80062ea <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8006268:	2b01      	cmp	r3, #1
 800626a:	d002      	beq.n	8006272 <HAL_ADCEx_InjectedConfigChannel+0x222>
 800626c:	2b02      	cmp	r3, #2
 800626e:	d014      	beq.n	800629a <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8006270:	e03b      	b.n	80062ea <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006280:	f023 030f 	bic.w	r3, r3, #15
 8006284:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6959      	ldr	r1, [r3, #20]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68da      	ldr	r2, [r3, #12]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	615a      	str	r2, [r3, #20]
      break;
 8006298:	e03b      	b.n	8006312 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80062a8:	f023 030f 	bic.w	r3, r3, #15
 80062ac:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6999      	ldr	r1, [r3, #24]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	619a      	str	r2, [r3, #24]
      break;
 80062c0:	e027      	b.n	8006312 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80062d0:	f023 030f 	bic.w	r3, r3, #15
 80062d4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69d9      	ldr	r1, [r3, #28]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	61da      	str	r2, [r3, #28]
      break;
 80062e8:	e013      	b.n	8006312 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6812      	ldr	r2, [r2, #0]
 80062f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80062f8:	f023 030f 	bic.w	r3, r3, #15
 80062fc:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6a19      	ldr	r1, [r3, #32]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	621a      	str	r2, [r3, #32]
      break;
 8006310:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006312:	4b18      	ldr	r3, [pc, #96]	; (8006374 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8006314:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a17      	ldr	r2, [pc, #92]	; (8006378 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d109      	bne.n	8006334 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b12      	cmp	r3, #18
 8006326:	d105      	bne.n	8006334 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a0f      	ldr	r2, [pc, #60]	; (8006378 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d10d      	bne.n	800635a <HAL_ADCEx_InjectedConfigChannel+0x30a>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b10      	cmp	r3, #16
 8006344:	d003      	beq.n	800634e <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b11      	cmp	r3, #17
 800634c:	d105      	bne.n	800635a <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	000f0001 	.word	0x000f0001
 8006374:	40012300 	.word	0x40012300
 8006378:	40012000 	.word	0x40012000

0800637c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e0ed      	b.n	800656a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d102      	bne.n	80063a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fe f9ba 	bl	8004714 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063b0:	f7ff f984 	bl	80056bc <HAL_GetTick>
 80063b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80063b6:	e012      	b.n	80063de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80063b8:	f7ff f980 	bl	80056bc <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b0a      	cmp	r3, #10
 80063c4:	d90b      	bls.n	80063de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2205      	movs	r2, #5
 80063d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e0c5      	b.n	800656a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0e5      	beq.n	80063b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0202 	bic.w	r2, r2, #2
 80063fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063fc:	f7ff f95e 	bl	80056bc <HAL_GetTick>
 8006400:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006402:	e012      	b.n	800642a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006404:	f7ff f95a 	bl	80056bc <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b0a      	cmp	r3, #10
 8006410:	d90b      	bls.n	800642a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2205      	movs	r2, #5
 8006422:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e09f      	b.n	800656a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e5      	bne.n	8006404 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	7e1b      	ldrb	r3, [r3, #24]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d108      	bne.n	8006452 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e007      	b.n	8006462 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006460:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	7e5b      	ldrb	r3, [r3, #25]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d108      	bne.n	800647c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	e007      	b.n	800648c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800648a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	7e9b      	ldrb	r3, [r3, #26]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d108      	bne.n	80064a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0220 	orr.w	r2, r2, #32
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	e007      	b.n	80064b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0220 	bic.w	r2, r2, #32
 80064b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	7edb      	ldrb	r3, [r3, #27]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d108      	bne.n	80064d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0210 	bic.w	r2, r2, #16
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e007      	b.n	80064e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0210 	orr.w	r2, r2, #16
 80064de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	7f1b      	ldrb	r3, [r3, #28]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d108      	bne.n	80064fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0208 	orr.w	r2, r2, #8
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	e007      	b.n	800650a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0208 	bic.w	r2, r2, #8
 8006508:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	7f5b      	ldrb	r3, [r3, #29]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d108      	bne.n	8006524 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0204 	orr.w	r2, r2, #4
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	e007      	b.n	8006534 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0204 	bic.w	r2, r2, #4
 8006532:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	431a      	orrs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	ea42 0103 	orr.w	r1, r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	1e5a      	subs	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800658a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800658c:	7cfb      	ldrb	r3, [r7, #19]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d003      	beq.n	800659a <HAL_CAN_ConfigFilter+0x26>
 8006592:	7cfb      	ldrb	r3, [r7, #19]
 8006594:	2b02      	cmp	r3, #2
 8006596:	f040 80be 	bne.w	8006716 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800659a:	4b65      	ldr	r3, [pc, #404]	; (8006730 <HAL_CAN_ConfigFilter+0x1bc>)
 800659c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065a4:	f043 0201 	orr.w	r2, r3, #1
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	021b      	lsls	r3, r3, #8
 80065ca:	431a      	orrs	r2, r3
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	2201      	movs	r2, #1
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	43db      	mvns	r3, r3
 80065ec:	401a      	ands	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d123      	bne.n	8006644 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	43db      	mvns	r3, r3
 8006606:	401a      	ands	r2, r3
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800661e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	3248      	adds	r2, #72	; 0x48
 8006624:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006638:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800663a:	6979      	ldr	r1, [r7, #20]
 800663c:	3348      	adds	r3, #72	; 0x48
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	440b      	add	r3, r1
 8006642:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d122      	bne.n	8006692 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	431a      	orrs	r2, r3
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800666c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	3248      	adds	r2, #72	; 0x48
 8006672:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006686:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006688:	6979      	ldr	r1, [r7, #20]
 800668a:	3348      	adds	r3, #72	; 0x48
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	440b      	add	r3, r1
 8006690:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	43db      	mvns	r3, r3
 80066a4:	401a      	ands	r2, r3
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80066ac:	e007      	b.n	80066be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	43db      	mvns	r3, r3
 80066d0:	401a      	ands	r2, r3
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80066d8:	e007      	b.n	80066ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d107      	bne.n	8006702 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006708:	f023 0201 	bic.w	r2, r3, #1
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	e006      	b.n	8006724 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
  }
}
 8006724:	4618      	mov	r0, r3
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	40006400 	.word	0x40006400

08006734 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b01      	cmp	r3, #1
 8006746:	d12e      	bne.n	80067a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0201 	bic.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006760:	f7fe ffac 	bl	80056bc <HAL_GetTick>
 8006764:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006766:	e012      	b.n	800678e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006768:	f7fe ffa8 	bl	80056bc <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b0a      	cmp	r3, #10
 8006774:	d90b      	bls.n	800678e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2205      	movs	r2, #5
 8006786:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e012      	b.n	80067b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1e5      	bne.n	8006768 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	e006      	b.n	80067b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
  }
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80067bc:	b480      	push	{r7}
 80067be:	b089      	sub	sp, #36	; 0x24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80067da:	7ffb      	ldrb	r3, [r7, #31]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d003      	beq.n	80067e8 <HAL_CAN_AddTxMessage+0x2c>
 80067e0:	7ffb      	ldrb	r3, [r7, #31]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	f040 80b8 	bne.w	8006958 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d105      	bne.n	8006808 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 80a0 	beq.w	8006948 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	0e1b      	lsrs	r3, r3, #24
 800680c:	f003 0303 	and.w	r3, r3, #3
 8006810:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2b02      	cmp	r3, #2
 8006816:	d907      	bls.n	8006828 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e09e      	b.n	8006966 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006828:	2201      	movs	r2, #1
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	409a      	lsls	r2, r3
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10d      	bne.n	8006856 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006844:	68f9      	ldr	r1, [r7, #12]
 8006846:	6809      	ldr	r1, [r1, #0]
 8006848:	431a      	orrs	r2, r3
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	3318      	adds	r3, #24
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	440b      	add	r3, r1
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	e00f      	b.n	8006876 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006860:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006866:	68f9      	ldr	r1, [r7, #12]
 8006868:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800686a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	3318      	adds	r3, #24
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	440b      	add	r3, r1
 8006874:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6819      	ldr	r1, [r3, #0]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	3318      	adds	r3, #24
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	440b      	add	r3, r1
 8006886:	3304      	adds	r3, #4
 8006888:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	7d1b      	ldrb	r3, [r3, #20]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d111      	bne.n	80068b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	3318      	adds	r3, #24
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	4413      	add	r3, r2
 800689e:	3304      	adds	r3, #4
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	6811      	ldr	r1, [r2, #0]
 80068a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	3318      	adds	r3, #24
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	440b      	add	r3, r1
 80068b2:	3304      	adds	r3, #4
 80068b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	3307      	adds	r3, #7
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	061a      	lsls	r2, r3, #24
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3306      	adds	r3, #6
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	041b      	lsls	r3, r3, #16
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3305      	adds	r3, #5
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	4313      	orrs	r3, r2
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	3204      	adds	r2, #4
 80068d6:	7812      	ldrb	r2, [r2, #0]
 80068d8:	4610      	mov	r0, r2
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	6811      	ldr	r1, [r2, #0]
 80068de:	ea43 0200 	orr.w	r2, r3, r0
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	440b      	add	r3, r1
 80068e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80068ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3303      	adds	r3, #3
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	061a      	lsls	r2, r3, #24
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3302      	adds	r3, #2
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	041b      	lsls	r3, r3, #16
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3301      	adds	r3, #1
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	021b      	lsls	r3, r3, #8
 8006908:	4313      	orrs	r3, r2
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	7812      	ldrb	r2, [r2, #0]
 800690e:	4610      	mov	r0, r2
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	6811      	ldr	r1, [r2, #0]
 8006914:	ea43 0200 	orr.w	r2, r3, r0
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	440b      	add	r3, r1
 800691e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006922:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	3318      	adds	r3, #24
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	4413      	add	r3, r2
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	6811      	ldr	r1, [r2, #0]
 8006936:	f043 0201 	orr.w	r2, r3, #1
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	3318      	adds	r3, #24
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	440b      	add	r3, r1
 8006942:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	e00e      	b.n	8006966 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e006      	b.n	8006966 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
  }
}
 8006966:	4618      	mov	r0, r3
 8006968:	3724      	adds	r7, #36	; 0x24
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006972:	b480      	push	{r7}
 8006974:	b087      	sub	sp, #28
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
 800697e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006986:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d003      	beq.n	8006996 <HAL_CAN_GetRxMessage+0x24>
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	2b02      	cmp	r3, #2
 8006992:	f040 80f3 	bne.w	8006b7c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10e      	bne.n	80069ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d116      	bne.n	80069d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e0e7      	b.n	8006b8a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d107      	bne.n	80069d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e0d8      	b.n	8006b8a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	331b      	adds	r3, #27
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	4413      	add	r3, r2
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0204 	and.w	r2, r3, #4
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10c      	bne.n	8006a10 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	331b      	adds	r3, #27
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	4413      	add	r3, r2
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	0d5b      	lsrs	r3, r3, #21
 8006a06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e00b      	b.n	8006a28 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	331b      	adds	r3, #27
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	4413      	add	r3, r2
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	08db      	lsrs	r3, r3, #3
 8006a20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	331b      	adds	r3, #27
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	4413      	add	r3, r2
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0202 	and.w	r2, r3, #2
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	331b      	adds	r3, #27
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	4413      	add	r3, r2
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 020f 	and.w	r2, r3, #15
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	331b      	adds	r3, #27
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	4413      	add	r3, r2
 8006a62:	3304      	adds	r3, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	0a1b      	lsrs	r3, r3, #8
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	331b      	adds	r3, #27
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	4413      	add	r3, r2
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	0c1b      	lsrs	r3, r3, #16
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	011b      	lsls	r3, r3, #4
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	0a1a      	lsrs	r2, r3, #8
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	0c1a      	lsrs	r2, r3, #16
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	3302      	adds	r3, #2
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	0e1a      	lsrs	r2, r3, #24
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	3303      	adds	r3, #3
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	3304      	adds	r3, #4
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	011b      	lsls	r3, r3, #4
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	0a1a      	lsrs	r2, r3, #8
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	3305      	adds	r3, #5
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	0c1a      	lsrs	r2, r3, #16
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	3306      	adds	r3, #6
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	0e1a      	lsrs	r2, r3, #24
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	3307      	adds	r3, #7
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d108      	bne.n	8006b68 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f042 0220 	orr.w	r2, r2, #32
 8006b64:	60da      	str	r2, [r3, #12]
 8006b66:	e007      	b.n	8006b78 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691a      	ldr	r2, [r3, #16]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0220 	orr.w	r2, r2, #32
 8006b76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	e006      	b.n	8006b8a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
  }
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	371c      	adds	r7, #28
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ba6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d002      	beq.n	8006bb4 <HAL_CAN_ActivateNotification+0x1e>
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d109      	bne.n	8006bc8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6959      	ldr	r1, [r3, #20]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	e006      	b.n	8006bd6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
  }
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b08a      	sub	sp, #40	; 0x28
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006bea:	2300      	movs	r3, #0
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d07c      	beq.n	8006d22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d023      	beq.n	8006c7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2201      	movs	r2, #1
 8006c38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f983 	bl	8006f50 <HAL_CAN_TxMailbox0CompleteCallback>
 8006c4a:	e016      	b.n	8006c7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5e:	e00c      	b.n	8006c7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	f003 0308 	and.w	r3, r3, #8
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d004      	beq.n	8006c74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
 8006c72:	e002      	b.n	8006c7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f989 	bl	8006f8c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d024      	beq.n	8006cce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f963 	bl	8006f64 <HAL_CAN_TxMailbox1CompleteCallback>
 8006c9e:	e016      	b.n	8006cce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb2:	e00c      	b.n	8006cce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d004      	beq.n	8006cc8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc6:	e002      	b.n	8006cce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f969 	bl	8006fa0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d024      	beq.n	8006d22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ce0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f943 	bl	8006f78 <HAL_CAN_TxMailbox2CompleteCallback>
 8006cf2:	e016      	b.n	8006d22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d004      	beq.n	8006d08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
 8006d06:	e00c      	b.n	8006d22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
 8006d1a:	e002      	b.n	8006d22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f949 	bl	8006fb4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	f003 0308 	and.w	r3, r3, #8
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00c      	beq.n	8006d46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f003 0310 	and.w	r3, r3, #16
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2210      	movs	r2, #16
 8006d44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00b      	beq.n	8006d68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f003 0308 	and.w	r3, r3, #8
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d006      	beq.n	8006d68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2208      	movs	r2, #8
 8006d60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f930 	bl	8006fc8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d009      	beq.n	8006d86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f003 0303 	and.w	r3, r3, #3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7fc fb97 	bl	80034b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00c      	beq.n	8006daa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f003 0310 	and.w	r3, r3, #16
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d007      	beq.n	8006daa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2210      	movs	r2, #16
 8006da8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00b      	beq.n	8006dcc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f003 0308 	and.w	r3, r3, #8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d006      	beq.n	8006dcc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f912 	bl	8006ff0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d009      	beq.n	8006dea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f003 0303 	and.w	r3, r3, #3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f8f9 	bl	8006fdc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d006      	beq.n	8006e0c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2210      	movs	r2, #16
 8006e04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f8fc 	bl	8007004 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	f003 0308 	and.w	r3, r3, #8
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d006      	beq.n	8006e2e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2208      	movs	r2, #8
 8006e26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f8f5 	bl	8007018 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d07b      	beq.n	8006f30 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d072      	beq.n	8006f28 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d008      	beq.n	8006e5e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	f043 0301 	orr.w	r3, r3, #1
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d008      	beq.n	8006e7a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	f043 0302 	orr.w	r3, r3, #2
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d008      	beq.n	8006e96 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	f043 0304 	orr.w	r3, r3, #4
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d043      	beq.n	8006f28 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d03e      	beq.n	8006f28 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eb0:	2b60      	cmp	r3, #96	; 0x60
 8006eb2:	d02b      	beq.n	8006f0c <HAL_CAN_IRQHandler+0x32a>
 8006eb4:	2b60      	cmp	r3, #96	; 0x60
 8006eb6:	d82e      	bhi.n	8006f16 <HAL_CAN_IRQHandler+0x334>
 8006eb8:	2b50      	cmp	r3, #80	; 0x50
 8006eba:	d022      	beq.n	8006f02 <HAL_CAN_IRQHandler+0x320>
 8006ebc:	2b50      	cmp	r3, #80	; 0x50
 8006ebe:	d82a      	bhi.n	8006f16 <HAL_CAN_IRQHandler+0x334>
 8006ec0:	2b40      	cmp	r3, #64	; 0x40
 8006ec2:	d019      	beq.n	8006ef8 <HAL_CAN_IRQHandler+0x316>
 8006ec4:	2b40      	cmp	r3, #64	; 0x40
 8006ec6:	d826      	bhi.n	8006f16 <HAL_CAN_IRQHandler+0x334>
 8006ec8:	2b30      	cmp	r3, #48	; 0x30
 8006eca:	d010      	beq.n	8006eee <HAL_CAN_IRQHandler+0x30c>
 8006ecc:	2b30      	cmp	r3, #48	; 0x30
 8006ece:	d822      	bhi.n	8006f16 <HAL_CAN_IRQHandler+0x334>
 8006ed0:	2b10      	cmp	r3, #16
 8006ed2:	d002      	beq.n	8006eda <HAL_CAN_IRQHandler+0x2f8>
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d005      	beq.n	8006ee4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006ed8:	e01d      	b.n	8006f16 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	f043 0308 	orr.w	r3, r3, #8
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ee2:	e019      	b.n	8006f18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	f043 0310 	orr.w	r3, r3, #16
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006eec:	e014      	b.n	8006f18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	f043 0320 	orr.w	r3, r3, #32
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ef6:	e00f      	b.n	8006f18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f00:	e00a      	b.n	8006f18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f0a:	e005      	b.n	8006f18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f14:	e000      	b.n	8006f18 <HAL_CAN_IRQHandler+0x336>
            break;
 8006f16:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699a      	ldr	r2, [r3, #24]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006f26:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2204      	movs	r2, #4
 8006f2e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d008      	beq.n	8006f48 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f872 	bl	800702c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006f48:	bf00      	nop
 8006f4a:	3728      	adds	r7, #40	; 0x28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007050:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <__NVIC_SetPriorityGrouping+0x44>)
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800705c:	4013      	ands	r3, r2
 800705e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800706c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007072:	4a04      	ldr	r2, [pc, #16]	; (8007084 <__NVIC_SetPriorityGrouping+0x44>)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	60d3      	str	r3, [r2, #12]
}
 8007078:	bf00      	nop
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	e000ed00 	.word	0xe000ed00

08007088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800708c:	4b04      	ldr	r3, [pc, #16]	; (80070a0 <__NVIC_GetPriorityGrouping+0x18>)
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	0a1b      	lsrs	r3, r3, #8
 8007092:	f003 0307 	and.w	r3, r3, #7
}
 8007096:	4618      	mov	r0, r3
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	e000ed00 	.word	0xe000ed00

080070a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	db0b      	blt.n	80070ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070b6:	79fb      	ldrb	r3, [r7, #7]
 80070b8:	f003 021f 	and.w	r2, r3, #31
 80070bc:	4907      	ldr	r1, [pc, #28]	; (80070dc <__NVIC_EnableIRQ+0x38>)
 80070be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	2001      	movs	r0, #1
 80070c6:	fa00 f202 	lsl.w	r2, r0, r2
 80070ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	e000e100 	.word	0xe000e100

080070e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	4603      	mov	r3, r0
 80070e8:	6039      	str	r1, [r7, #0]
 80070ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	db0a      	blt.n	800710a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	490c      	ldr	r1, [pc, #48]	; (800712c <__NVIC_SetPriority+0x4c>)
 80070fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070fe:	0112      	lsls	r2, r2, #4
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	440b      	add	r3, r1
 8007104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007108:	e00a      	b.n	8007120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	b2da      	uxtb	r2, r3
 800710e:	4908      	ldr	r1, [pc, #32]	; (8007130 <__NVIC_SetPriority+0x50>)
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	3b04      	subs	r3, #4
 8007118:	0112      	lsls	r2, r2, #4
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	440b      	add	r3, r1
 800711e:	761a      	strb	r2, [r3, #24]
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	e000e100 	.word	0xe000e100
 8007130:	e000ed00 	.word	0xe000ed00

08007134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007134:	b480      	push	{r7}
 8007136:	b089      	sub	sp, #36	; 0x24
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	f1c3 0307 	rsb	r3, r3, #7
 800714e:	2b04      	cmp	r3, #4
 8007150:	bf28      	it	cs
 8007152:	2304      	movcs	r3, #4
 8007154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	3304      	adds	r3, #4
 800715a:	2b06      	cmp	r3, #6
 800715c:	d902      	bls.n	8007164 <NVIC_EncodePriority+0x30>
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	3b03      	subs	r3, #3
 8007162:	e000      	b.n	8007166 <NVIC_EncodePriority+0x32>
 8007164:	2300      	movs	r3, #0
 8007166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007168:	f04f 32ff 	mov.w	r2, #4294967295
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	fa02 f303 	lsl.w	r3, r2, r3
 8007172:	43da      	mvns	r2, r3
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	401a      	ands	r2, r3
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800717c:	f04f 31ff 	mov.w	r1, #4294967295
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	fa01 f303 	lsl.w	r3, r1, r3
 8007186:	43d9      	mvns	r1, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800718c:	4313      	orrs	r3, r2
         );
}
 800718e:	4618      	mov	r0, r3
 8007190:	3724      	adds	r7, #36	; 0x24
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
	...

0800719c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071ac:	d301      	bcc.n	80071b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071ae:	2301      	movs	r3, #1
 80071b0:	e00f      	b.n	80071d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071b2:	4a0a      	ldr	r2, [pc, #40]	; (80071dc <SysTick_Config+0x40>)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071ba:	210f      	movs	r1, #15
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	f7ff ff8e 	bl	80070e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <SysTick_Config+0x40>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071ca:	4b04      	ldr	r3, [pc, #16]	; (80071dc <SysTick_Config+0x40>)
 80071cc:	2207      	movs	r2, #7
 80071ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	e000e010 	.word	0xe000e010

080071e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff ff29 	bl	8007040 <__NVIC_SetPriorityGrouping>
}
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b086      	sub	sp, #24
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	4603      	mov	r3, r0
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007208:	f7ff ff3e 	bl	8007088 <__NVIC_GetPriorityGrouping>
 800720c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	68b9      	ldr	r1, [r7, #8]
 8007212:	6978      	ldr	r0, [r7, #20]
 8007214:	f7ff ff8e 	bl	8007134 <NVIC_EncodePriority>
 8007218:	4602      	mov	r2, r0
 800721a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800721e:	4611      	mov	r1, r2
 8007220:	4618      	mov	r0, r3
 8007222:	f7ff ff5d 	bl	80070e0 <__NVIC_SetPriority>
}
 8007226:	bf00      	nop
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	4603      	mov	r3, r0
 8007236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff ff31 	bl	80070a4 <__NVIC_EnableIRQ>
}
 8007242:	bf00      	nop
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff ffa2 	bl	800719c <SysTick_Config>
 8007258:	4603      	mov	r3, r0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007270:	f7fe fa24 	bl	80056bc <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e099      	b.n	80073b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0201 	bic.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072a0:	e00f      	b.n	80072c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072a2:	f7fe fa0b 	bl	80056bc <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b05      	cmp	r3, #5
 80072ae:	d908      	bls.n	80072c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2203      	movs	r2, #3
 80072ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e078      	b.n	80073b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e8      	bne.n	80072a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	4b38      	ldr	r3, [pc, #224]	; (80073bc <HAL_DMA_Init+0x158>)
 80072dc:	4013      	ands	r3, r2
 80072de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	4313      	orrs	r3, r2
 8007312:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	2b04      	cmp	r3, #4
 800731a:	d107      	bne.n	800732c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007324:	4313      	orrs	r3, r2
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f023 0307 	bic.w	r3, r3, #7
 8007342:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	4313      	orrs	r3, r2
 800734c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	2b04      	cmp	r3, #4
 8007354:	d117      	bne.n	8007386 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	4313      	orrs	r3, r2
 800735e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00e      	beq.n	8007386 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fa91 	bl	8007890 <DMA_CheckFifoParam>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d008      	beq.n	8007386 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2240      	movs	r2, #64	; 0x40
 8007378:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007382:	2301      	movs	r3, #1
 8007384:	e016      	b.n	80073b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fa48 	bl	8007824 <DMA_CalcBaseAndBitshift>
 8007394:	4603      	mov	r3, r0
 8007396:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800739c:	223f      	movs	r2, #63	; 0x3f
 800739e:	409a      	lsls	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	f010803f 	.word	0xf010803f

080073c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_DMA_Start_IT+0x26>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e040      	b.n	8007468 <HAL_DMA_Start_IT+0xa8>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d12f      	bne.n	800745a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2202      	movs	r2, #2
 80073fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	68b9      	ldr	r1, [r7, #8]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 f9da 	bl	80077c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007418:	223f      	movs	r2, #63	; 0x3f
 800741a:	409a      	lsls	r2, r3
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0216 	orr.w	r2, r2, #22
 800742e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007434:	2b00      	cmp	r3, #0
 8007436:	d007      	beq.n	8007448 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f042 0208 	orr.w	r2, r2, #8
 8007446:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	e005      	b.n	8007466 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007462:	2302      	movs	r3, #2
 8007464:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007466:	7dfb      	ldrb	r3, [r7, #23]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d004      	beq.n	800748e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2280      	movs	r2, #128	; 0x80
 8007488:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e00c      	b.n	80074a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2205      	movs	r2, #5
 8007492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0201 	bic.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80074c0:	4b8e      	ldr	r3, [pc, #568]	; (80076fc <HAL_DMA_IRQHandler+0x248>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a8e      	ldr	r2, [pc, #568]	; (8007700 <HAL_DMA_IRQHandler+0x24c>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	0a9b      	lsrs	r3, r3, #10
 80074cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074de:	2208      	movs	r2, #8
 80074e0:	409a      	lsls	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4013      	ands	r3, r2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01a      	beq.n	8007520 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d013      	beq.n	8007520 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0204 	bic.w	r2, r2, #4
 8007506:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750c:	2208      	movs	r2, #8
 800750e:	409a      	lsls	r2, r3
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007518:	f043 0201 	orr.w	r2, r3, #1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007524:	2201      	movs	r2, #1
 8007526:	409a      	lsls	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4013      	ands	r3, r2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d012      	beq.n	8007556 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007542:	2201      	movs	r2, #1
 8007544:	409a      	lsls	r2, r3
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754e:	f043 0202 	orr.w	r2, r3, #2
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800755a:	2204      	movs	r2, #4
 800755c:	409a      	lsls	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4013      	ands	r3, r2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d012      	beq.n	800758c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007578:	2204      	movs	r2, #4
 800757a:	409a      	lsls	r2, r3
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007584:	f043 0204 	orr.w	r2, r3, #4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007590:	2210      	movs	r2, #16
 8007592:	409a      	lsls	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4013      	ands	r3, r2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d043      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d03c      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ae:	2210      	movs	r2, #16
 80075b0:	409a      	lsls	r2, r3
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d018      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d108      	bne.n	80075e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d024      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
 80075e2:	e01f      	b.n	8007624 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01b      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4798      	blx	r3
 80075f4:	e016      	b.n	8007624 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007600:	2b00      	cmp	r3, #0
 8007602:	d107      	bne.n	8007614 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0208 	bic.w	r2, r2, #8
 8007612:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007628:	2220      	movs	r2, #32
 800762a:	409a      	lsls	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4013      	ands	r3, r2
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 808f 	beq.w	8007754 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0310 	and.w	r3, r3, #16
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 8087 	beq.w	8007754 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764a:	2220      	movs	r2, #32
 800764c:	409a      	lsls	r2, r3
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b05      	cmp	r3, #5
 800765c:	d136      	bne.n	80076cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0216 	bic.w	r2, r2, #22
 800766c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	695a      	ldr	r2, [r3, #20]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800767c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d103      	bne.n	800768e <HAL_DMA_IRQHandler+0x1da>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800768a:	2b00      	cmp	r3, #0
 800768c:	d007      	beq.n	800769e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0208 	bic.w	r2, r2, #8
 800769c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a2:	223f      	movs	r2, #63	; 0x3f
 80076a4:	409a      	lsls	r2, r3
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d07e      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
        }
        return;
 80076ca:	e079      	b.n	80077c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d01d      	beq.n	8007716 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10d      	bne.n	8007704 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d031      	beq.n	8007754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	4798      	blx	r3
 80076f8:	e02c      	b.n	8007754 <HAL_DMA_IRQHandler+0x2a0>
 80076fa:	bf00      	nop
 80076fc:	20000004 	.word	0x20000004
 8007700:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d023      	beq.n	8007754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
 8007714:	e01e      	b.n	8007754 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10f      	bne.n	8007744 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0210 	bic.w	r2, r2, #16
 8007732:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007758:	2b00      	cmp	r3, #0
 800775a:	d032      	beq.n	80077c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d022      	beq.n	80077ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2205      	movs	r2, #5
 800776c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0201 	bic.w	r2, r2, #1
 800777e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	3301      	adds	r3, #1
 8007784:	60bb      	str	r3, [r7, #8]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	429a      	cmp	r2, r3
 800778a:	d307      	bcc.n	800779c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f2      	bne.n	8007780 <HAL_DMA_IRQHandler+0x2cc>
 800779a:	e000      	b.n	800779e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800779c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
 80077be:	e000      	b.n	80077c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80077c0:	bf00      	nop
    }
  }
}
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	2b40      	cmp	r3, #64	; 0x40
 80077f4:	d108      	bne.n	8007808 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007806:	e007      	b.n	8007818 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	60da      	str	r2, [r3, #12]
}
 8007818:	bf00      	nop
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	3b10      	subs	r3, #16
 8007834:	4a14      	ldr	r2, [pc, #80]	; (8007888 <DMA_CalcBaseAndBitshift+0x64>)
 8007836:	fba2 2303 	umull	r2, r3, r2, r3
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800783e:	4a13      	ldr	r2, [pc, #76]	; (800788c <DMA_CalcBaseAndBitshift+0x68>)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4413      	add	r3, r2
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b03      	cmp	r3, #3
 8007850:	d909      	bls.n	8007866 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800785a:	f023 0303 	bic.w	r3, r3, #3
 800785e:	1d1a      	adds	r2, r3, #4
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	659a      	str	r2, [r3, #88]	; 0x58
 8007864:	e007      	b.n	8007876 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800786e:	f023 0303 	bic.w	r3, r3, #3
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	aaaaaaab 	.word	0xaaaaaaab
 800788c:	08013fb0 	.word	0x08013fb0

08007890 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d11f      	bne.n	80078ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d856      	bhi.n	800795e <DMA_CheckFifoParam+0xce>
 80078b0:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <DMA_CheckFifoParam+0x28>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078c9 	.word	0x080078c9
 80078bc:	080078db 	.word	0x080078db
 80078c0:	080078c9 	.word	0x080078c9
 80078c4:	0800795f 	.word	0x0800795f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d046      	beq.n	8007962 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078d8:	e043      	b.n	8007962 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078e2:	d140      	bne.n	8007966 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078e8:	e03d      	b.n	8007966 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f2:	d121      	bne.n	8007938 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d837      	bhi.n	800796a <DMA_CheckFifoParam+0xda>
 80078fa:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <DMA_CheckFifoParam+0x70>)
 80078fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007900:	08007911 	.word	0x08007911
 8007904:	08007917 	.word	0x08007917
 8007908:	08007911 	.word	0x08007911
 800790c:	08007929 	.word	0x08007929
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	73fb      	strb	r3, [r7, #15]
      break;
 8007914:	e030      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d025      	beq.n	800796e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007926:	e022      	b.n	800796e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007930:	d11f      	bne.n	8007972 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007936:	e01c      	b.n	8007972 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d903      	bls.n	8007946 <DMA_CheckFifoParam+0xb6>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b03      	cmp	r3, #3
 8007942:	d003      	beq.n	800794c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007944:	e018      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	73fb      	strb	r3, [r7, #15]
      break;
 800794a:	e015      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00e      	beq.n	8007976 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	73fb      	strb	r3, [r7, #15]
      break;
 800795c:	e00b      	b.n	8007976 <DMA_CheckFifoParam+0xe6>
      break;
 800795e:	bf00      	nop
 8007960:	e00a      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      break;
 8007962:	bf00      	nop
 8007964:	e008      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      break;
 8007966:	bf00      	nop
 8007968:	e006      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      break;
 800796a:	bf00      	nop
 800796c:	e004      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      break;
 800796e:	bf00      	nop
 8007970:	e002      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      break;   
 8007972:	bf00      	nop
 8007974:	e000      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      break;
 8007976:	bf00      	nop
    }
  } 
  
  return status; 
 8007978:	7bfb      	ldrb	r3, [r7, #15]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop

08007988 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800799a:	4b23      	ldr	r3, [pc, #140]	; (8007a28 <HAL_FLASH_Program+0xa0>)
 800799c:	7e1b      	ldrb	r3, [r3, #24]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d101      	bne.n	80079a6 <HAL_FLASH_Program+0x1e>
 80079a2:	2302      	movs	r3, #2
 80079a4:	e03b      	b.n	8007a1e <HAL_FLASH_Program+0x96>
 80079a6:	4b20      	ldr	r3, [pc, #128]	; (8007a28 <HAL_FLASH_Program+0xa0>)
 80079a8:	2201      	movs	r2, #1
 80079aa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80079ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079b0:	f000 f870 	bl	8007a94 <FLASH_WaitForLastOperation>
 80079b4:	4603      	mov	r3, r0
 80079b6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d12b      	bne.n	8007a16 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d105      	bne.n	80079d0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80079c4:	783b      	ldrb	r3, [r7, #0]
 80079c6:	4619      	mov	r1, r3
 80079c8:	68b8      	ldr	r0, [r7, #8]
 80079ca:	f000 f91b 	bl	8007c04 <FLASH_Program_Byte>
 80079ce:	e016      	b.n	80079fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d105      	bne.n	80079e2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80079d6:	883b      	ldrh	r3, [r7, #0]
 80079d8:	4619      	mov	r1, r3
 80079da:	68b8      	ldr	r0, [r7, #8]
 80079dc:	f000 f8ee 	bl	8007bbc <FLASH_Program_HalfWord>
 80079e0:	e00d      	b.n	80079fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d105      	bne.n	80079f4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	4619      	mov	r1, r3
 80079ec:	68b8      	ldr	r0, [r7, #8]
 80079ee:	f000 f8c3 	bl	8007b78 <FLASH_Program_Word>
 80079f2:	e004      	b.n	80079fe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80079f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079f8:	68b8      	ldr	r0, [r7, #8]
 80079fa:	f000 f88b 	bl	8007b14 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80079fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a02:	f000 f847 	bl	8007a94 <FLASH_WaitForLastOperation>
 8007a06:	4603      	mov	r3, r0
 8007a08:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007a0a:	4b08      	ldr	r3, [pc, #32]	; (8007a2c <HAL_FLASH_Program+0xa4>)
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	4a07      	ldr	r2, [pc, #28]	; (8007a2c <HAL_FLASH_Program+0xa4>)
 8007a10:	f023 0301 	bic.w	r3, r3, #1
 8007a14:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007a16:	4b04      	ldr	r3, [pc, #16]	; (8007a28 <HAL_FLASH_Program+0xa0>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000f44 	.word	0x20000f44
 8007a2c:	40023c00 	.word	0x40023c00

08007a30 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007a3a:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <HAL_FLASH_Unlock+0x38>)
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	da0b      	bge.n	8007a5a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007a42:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <HAL_FLASH_Unlock+0x38>)
 8007a44:	4a09      	ldr	r2, [pc, #36]	; (8007a6c <HAL_FLASH_Unlock+0x3c>)
 8007a46:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007a48:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <HAL_FLASH_Unlock+0x38>)
 8007a4a:	4a09      	ldr	r2, [pc, #36]	; (8007a70 <HAL_FLASH_Unlock+0x40>)
 8007a4c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007a4e:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <HAL_FLASH_Unlock+0x38>)
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	da01      	bge.n	8007a5a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	40023c00 	.word	0x40023c00
 8007a6c:	45670123 	.word	0x45670123
 8007a70:	cdef89ab 	.word	0xcdef89ab

08007a74 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007a74:	b480      	push	{r7}
 8007a76:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007a78:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <HAL_FLASH_Lock+0x1c>)
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	4a04      	ldr	r2, [pc, #16]	; (8007a90 <HAL_FLASH_Lock+0x1c>)
 8007a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a82:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	40023c00 	.word	0x40023c00

08007a94 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007aa0:	4b1a      	ldr	r3, [pc, #104]	; (8007b0c <FLASH_WaitForLastOperation+0x78>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007aa6:	f7fd fe09 	bl	80056bc <HAL_GetTick>
 8007aaa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007aac:	e010      	b.n	8007ad0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d00c      	beq.n	8007ad0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d007      	beq.n	8007acc <FLASH_WaitForLastOperation+0x38>
 8007abc:	f7fd fdfe 	bl	80056bc <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d201      	bcs.n	8007ad0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e019      	b.n	8007b04 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007ad0:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <FLASH_WaitForLastOperation+0x7c>)
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e8      	bne.n	8007aae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007adc:	4b0c      	ldr	r3, [pc, #48]	; (8007b10 <FLASH_WaitForLastOperation+0x7c>)
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007ae8:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <FLASH_WaitForLastOperation+0x7c>)
 8007aea:	2201      	movs	r2, #1
 8007aec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007aee:	4b08      	ldr	r3, [pc, #32]	; (8007b10 <FLASH_WaitForLastOperation+0x7c>)
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007afa:	f000 f8a5 	bl	8007c48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
  
}  
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	20000f44 	.word	0x20000f44
 8007b10:	40023c00 	.word	0x40023c00

08007b14 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b20:	4b14      	ldr	r3, [pc, #80]	; (8007b74 <FLASH_Program_DoubleWord+0x60>)
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	4a13      	ldr	r2, [pc, #76]	; (8007b74 <FLASH_Program_DoubleWord+0x60>)
 8007b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007b2c:	4b11      	ldr	r3, [pc, #68]	; (8007b74 <FLASH_Program_DoubleWord+0x60>)
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	4a10      	ldr	r2, [pc, #64]	; (8007b74 <FLASH_Program_DoubleWord+0x60>)
 8007b32:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007b38:	4b0e      	ldr	r3, [pc, #56]	; (8007b74 <FLASH_Program_DoubleWord+0x60>)
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	4a0d      	ldr	r2, [pc, #52]	; (8007b74 <FLASH_Program_DoubleWord+0x60>)
 8007b3e:	f043 0301 	orr.w	r3, r3, #1
 8007b42:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8007b4a:	f3bf 8f6f 	isb	sy
}
 8007b4e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	f04f 0300 	mov.w	r3, #0
 8007b5c:	000a      	movs	r2, r1
 8007b5e:	2300      	movs	r3, #0
 8007b60:	68f9      	ldr	r1, [r7, #12]
 8007b62:	3104      	adds	r1, #4
 8007b64:	4613      	mov	r3, r2
 8007b66:	600b      	str	r3, [r1, #0]
}
 8007b68:	bf00      	nop
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	40023c00 	.word	0x40023c00

08007b78 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b82:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <FLASH_Program_Word+0x40>)
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	4a0c      	ldr	r2, [pc, #48]	; (8007bb8 <FLASH_Program_Word+0x40>)
 8007b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007b8e:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <FLASH_Program_Word+0x40>)
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	4a09      	ldr	r2, [pc, #36]	; (8007bb8 <FLASH_Program_Word+0x40>)
 8007b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007b9a:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <FLASH_Program_Word+0x40>)
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	4a06      	ldr	r2, [pc, #24]	; (8007bb8 <FLASH_Program_Word+0x40>)
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	601a      	str	r2, [r3, #0]
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	40023c00 	.word	0x40023c00

08007bbc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007bc8:	4b0d      	ldr	r3, [pc, #52]	; (8007c00 <FLASH_Program_HalfWord+0x44>)
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	4a0c      	ldr	r2, [pc, #48]	; (8007c00 <FLASH_Program_HalfWord+0x44>)
 8007bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007bd4:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <FLASH_Program_HalfWord+0x44>)
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	4a09      	ldr	r2, [pc, #36]	; (8007c00 <FLASH_Program_HalfWord+0x44>)
 8007bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007be0:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <FLASH_Program_HalfWord+0x44>)
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	4a06      	ldr	r2, [pc, #24]	; (8007c00 <FLASH_Program_HalfWord+0x44>)
 8007be6:	f043 0301 	orr.w	r3, r3, #1
 8007bea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	887a      	ldrh	r2, [r7, #2]
 8007bf0:	801a      	strh	r2, [r3, #0]
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40023c00 	.word	0x40023c00

08007c04 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c10:	4b0c      	ldr	r3, [pc, #48]	; (8007c44 <FLASH_Program_Byte+0x40>)
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	4a0b      	ldr	r2, [pc, #44]	; (8007c44 <FLASH_Program_Byte+0x40>)
 8007c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007c1c:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <FLASH_Program_Byte+0x40>)
 8007c1e:	4a09      	ldr	r2, [pc, #36]	; (8007c44 <FLASH_Program_Byte+0x40>)
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007c24:	4b07      	ldr	r3, [pc, #28]	; (8007c44 <FLASH_Program_Byte+0x40>)
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	4a06      	ldr	r2, [pc, #24]	; (8007c44 <FLASH_Program_Byte+0x40>)
 8007c2a:	f043 0301 	orr.w	r3, r3, #1
 8007c2e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	701a      	strb	r2, [r3, #0]
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	40023c00 	.word	0x40023c00

08007c48 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007c4c:	4b27      	ldr	r3, [pc, #156]	; (8007cec <FLASH_SetErrorCode+0xa4>)
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f003 0310 	and.w	r3, r3, #16
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d008      	beq.n	8007c6a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007c58:	4b25      	ldr	r3, [pc, #148]	; (8007cf0 <FLASH_SetErrorCode+0xa8>)
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	f043 0310 	orr.w	r3, r3, #16
 8007c60:	4a23      	ldr	r2, [pc, #140]	; (8007cf0 <FLASH_SetErrorCode+0xa8>)
 8007c62:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007c64:	4b21      	ldr	r3, [pc, #132]	; (8007cec <FLASH_SetErrorCode+0xa4>)
 8007c66:	2210      	movs	r2, #16
 8007c68:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007c6a:	4b20      	ldr	r3, [pc, #128]	; (8007cec <FLASH_SetErrorCode+0xa4>)
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d008      	beq.n	8007c88 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007c76:	4b1e      	ldr	r3, [pc, #120]	; (8007cf0 <FLASH_SetErrorCode+0xa8>)
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	f043 0308 	orr.w	r3, r3, #8
 8007c7e:	4a1c      	ldr	r2, [pc, #112]	; (8007cf0 <FLASH_SetErrorCode+0xa8>)
 8007c80:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007c82:	4b1a      	ldr	r3, [pc, #104]	; (8007cec <FLASH_SetErrorCode+0xa4>)
 8007c84:	2220      	movs	r2, #32
 8007c86:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007c88:	4b18      	ldr	r3, [pc, #96]	; (8007cec <FLASH_SetErrorCode+0xa4>)
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d008      	beq.n	8007ca6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007c94:	4b16      	ldr	r3, [pc, #88]	; (8007cf0 <FLASH_SetErrorCode+0xa8>)
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	f043 0304 	orr.w	r3, r3, #4
 8007c9c:	4a14      	ldr	r2, [pc, #80]	; (8007cf0 <FLASH_SetErrorCode+0xa8>)
 8007c9e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007ca0:	4b12      	ldr	r3, [pc, #72]	; (8007cec <FLASH_SetErrorCode+0xa4>)
 8007ca2:	2240      	movs	r2, #64	; 0x40
 8007ca4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007ca6:	4b11      	ldr	r3, [pc, #68]	; (8007cec <FLASH_SetErrorCode+0xa4>)
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d008      	beq.n	8007cc4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007cb2:	4b0f      	ldr	r3, [pc, #60]	; (8007cf0 <FLASH_SetErrorCode+0xa8>)
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	f043 0302 	orr.w	r3, r3, #2
 8007cba:	4a0d      	ldr	r2, [pc, #52]	; (8007cf0 <FLASH_SetErrorCode+0xa8>)
 8007cbc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007cbe:	4b0b      	ldr	r3, [pc, #44]	; (8007cec <FLASH_SetErrorCode+0xa4>)
 8007cc0:	2280      	movs	r2, #128	; 0x80
 8007cc2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <FLASH_SetErrorCode+0xa4>)
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d008      	beq.n	8007ce2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007cd0:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <FLASH_SetErrorCode+0xa8>)
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	f043 0320 	orr.w	r3, r3, #32
 8007cd8:	4a05      	ldr	r2, [pc, #20]	; (8007cf0 <FLASH_SetErrorCode+0xa8>)
 8007cda:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007cdc:	4b03      	ldr	r3, [pc, #12]	; (8007cec <FLASH_SetErrorCode+0xa4>)
 8007cde:	2202      	movs	r2, #2
 8007ce0:	60da      	str	r2, [r3, #12]
  }
}
 8007ce2:	bf00      	nop
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	40023c00 	.word	0x40023c00
 8007cf0:	20000f44 	.word	0x20000f44

08007cf4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d102      	bne.n	8007d10 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e010      	b.n	8007d32 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d103      	bne.n	8007d1e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	e009      	b.n	8007d32 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d103      	bne.n	8007d2c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d28:	60fb      	str	r3, [r7, #12]
 8007d2a:	e002      	b.n	8007d32 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007d2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007d30:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007d32:	4b13      	ldr	r3, [pc, #76]	; (8007d80 <FLASH_Erase_Sector+0x8c>)
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	4a12      	ldr	r2, [pc, #72]	; (8007d80 <FLASH_Erase_Sector+0x8c>)
 8007d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007d3e:	4b10      	ldr	r3, [pc, #64]	; (8007d80 <FLASH_Erase_Sector+0x8c>)
 8007d40:	691a      	ldr	r2, [r3, #16]
 8007d42:	490f      	ldr	r1, [pc, #60]	; (8007d80 <FLASH_Erase_Sector+0x8c>)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007d4a:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <FLASH_Erase_Sector+0x8c>)
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	4a0c      	ldr	r2, [pc, #48]	; (8007d80 <FLASH_Erase_Sector+0x8c>)
 8007d50:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007d54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007d56:	4b0a      	ldr	r3, [pc, #40]	; (8007d80 <FLASH_Erase_Sector+0x8c>)
 8007d58:	691a      	ldr	r2, [r3, #16]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	4a07      	ldr	r2, [pc, #28]	; (8007d80 <FLASH_Erase_Sector+0x8c>)
 8007d62:	f043 0302 	orr.w	r3, r3, #2
 8007d66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007d68:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <FLASH_Erase_Sector+0x8c>)
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	4a04      	ldr	r2, [pc, #16]	; (8007d80 <FLASH_Erase_Sector+0x8c>)
 8007d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d72:	6113      	str	r3, [r2, #16]
}
 8007d74:	bf00      	nop
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	40023c00 	.word	0x40023c00

08007d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b089      	sub	sp, #36	; 0x24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	61fb      	str	r3, [r7, #28]
 8007d9e:	e16b      	b.n	8008078 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007da0:	2201      	movs	r2, #1
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	fa02 f303 	lsl.w	r3, r2, r3
 8007da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4013      	ands	r3, r2
 8007db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	f040 815a 	bne.w	8008072 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f003 0303 	and.w	r3, r3, #3
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d005      	beq.n	8007dd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d130      	bne.n	8007e38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	2203      	movs	r2, #3
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	43db      	mvns	r3, r3
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	4013      	ands	r3, r2
 8007dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	fa02 f303 	lsl.w	r3, r2, r3
 8007e14:	43db      	mvns	r3, r3
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	4013      	ands	r3, r2
 8007e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	091b      	lsrs	r3, r3, #4
 8007e22:	f003 0201 	and.w	r2, r3, #1
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f003 0303 	and.w	r3, r3, #3
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d017      	beq.n	8007e74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	005b      	lsls	r3, r3, #1
 8007e4e:	2203      	movs	r2, #3
 8007e50:	fa02 f303 	lsl.w	r3, r2, r3
 8007e54:	43db      	mvns	r3, r3
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	fa02 f303 	lsl.w	r3, r2, r3
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f003 0303 	and.w	r3, r3, #3
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d123      	bne.n	8007ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	08da      	lsrs	r2, r3, #3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3208      	adds	r2, #8
 8007e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	f003 0307 	and.w	r3, r3, #7
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	220f      	movs	r2, #15
 8007e98:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	691a      	ldr	r2, [r3, #16]
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	08da      	lsrs	r2, r3, #3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3208      	adds	r2, #8
 8007ec2:	69b9      	ldr	r1, [r7, #24]
 8007ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	2203      	movs	r2, #3
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	43db      	mvns	r3, r3
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	4013      	ands	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f003 0203 	and.w	r2, r3, #3
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80b4 	beq.w	8008072 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60fb      	str	r3, [r7, #12]
 8007f0e:	4b60      	ldr	r3, [pc, #384]	; (8008090 <HAL_GPIO_Init+0x30c>)
 8007f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f12:	4a5f      	ldr	r2, [pc, #380]	; (8008090 <HAL_GPIO_Init+0x30c>)
 8007f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f18:	6453      	str	r3, [r2, #68]	; 0x44
 8007f1a:	4b5d      	ldr	r3, [pc, #372]	; (8008090 <HAL_GPIO_Init+0x30c>)
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f26:	4a5b      	ldr	r2, [pc, #364]	; (8008094 <HAL_GPIO_Init+0x310>)
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	089b      	lsrs	r3, r3, #2
 8007f2c:	3302      	adds	r3, #2
 8007f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f003 0303 	and.w	r3, r3, #3
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	220f      	movs	r2, #15
 8007f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f42:	43db      	mvns	r3, r3
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	4013      	ands	r3, r2
 8007f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a52      	ldr	r2, [pc, #328]	; (8008098 <HAL_GPIO_Init+0x314>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d02b      	beq.n	8007faa <HAL_GPIO_Init+0x226>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a51      	ldr	r2, [pc, #324]	; (800809c <HAL_GPIO_Init+0x318>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d025      	beq.n	8007fa6 <HAL_GPIO_Init+0x222>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a50      	ldr	r2, [pc, #320]	; (80080a0 <HAL_GPIO_Init+0x31c>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d01f      	beq.n	8007fa2 <HAL_GPIO_Init+0x21e>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a4f      	ldr	r2, [pc, #316]	; (80080a4 <HAL_GPIO_Init+0x320>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d019      	beq.n	8007f9e <HAL_GPIO_Init+0x21a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a4e      	ldr	r2, [pc, #312]	; (80080a8 <HAL_GPIO_Init+0x324>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d013      	beq.n	8007f9a <HAL_GPIO_Init+0x216>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a4d      	ldr	r2, [pc, #308]	; (80080ac <HAL_GPIO_Init+0x328>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d00d      	beq.n	8007f96 <HAL_GPIO_Init+0x212>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a4c      	ldr	r2, [pc, #304]	; (80080b0 <HAL_GPIO_Init+0x32c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d007      	beq.n	8007f92 <HAL_GPIO_Init+0x20e>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a4b      	ldr	r2, [pc, #300]	; (80080b4 <HAL_GPIO_Init+0x330>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d101      	bne.n	8007f8e <HAL_GPIO_Init+0x20a>
 8007f8a:	2307      	movs	r3, #7
 8007f8c:	e00e      	b.n	8007fac <HAL_GPIO_Init+0x228>
 8007f8e:	2308      	movs	r3, #8
 8007f90:	e00c      	b.n	8007fac <HAL_GPIO_Init+0x228>
 8007f92:	2306      	movs	r3, #6
 8007f94:	e00a      	b.n	8007fac <HAL_GPIO_Init+0x228>
 8007f96:	2305      	movs	r3, #5
 8007f98:	e008      	b.n	8007fac <HAL_GPIO_Init+0x228>
 8007f9a:	2304      	movs	r3, #4
 8007f9c:	e006      	b.n	8007fac <HAL_GPIO_Init+0x228>
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e004      	b.n	8007fac <HAL_GPIO_Init+0x228>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e002      	b.n	8007fac <HAL_GPIO_Init+0x228>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <HAL_GPIO_Init+0x228>
 8007faa:	2300      	movs	r3, #0
 8007fac:	69fa      	ldr	r2, [r7, #28]
 8007fae:	f002 0203 	and.w	r2, r2, #3
 8007fb2:	0092      	lsls	r2, r2, #2
 8007fb4:	4093      	lsls	r3, r2
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fbc:	4935      	ldr	r1, [pc, #212]	; (8008094 <HAL_GPIO_Init+0x310>)
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	089b      	lsrs	r3, r3, #2
 8007fc2:	3302      	adds	r3, #2
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007fca:	4b3b      	ldr	r3, [pc, #236]	; (80080b8 <HAL_GPIO_Init+0x334>)
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	43db      	mvns	r3, r3
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007fee:	4a32      	ldr	r2, [pc, #200]	; (80080b8 <HAL_GPIO_Init+0x334>)
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ff4:	4b30      	ldr	r3, [pc, #192]	; (80080b8 <HAL_GPIO_Init+0x334>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	43db      	mvns	r3, r3
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	4013      	ands	r3, r2
 8008002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008010:	69ba      	ldr	r2, [r7, #24]
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	4313      	orrs	r3, r2
 8008016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008018:	4a27      	ldr	r2, [pc, #156]	; (80080b8 <HAL_GPIO_Init+0x334>)
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800801e:	4b26      	ldr	r3, [pc, #152]	; (80080b8 <HAL_GPIO_Init+0x334>)
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	43db      	mvns	r3, r3
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	4013      	ands	r3, r2
 800802c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	4313      	orrs	r3, r2
 8008040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008042:	4a1d      	ldr	r2, [pc, #116]	; (80080b8 <HAL_GPIO_Init+0x334>)
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008048:	4b1b      	ldr	r3, [pc, #108]	; (80080b8 <HAL_GPIO_Init+0x334>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	43db      	mvns	r3, r3
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	4013      	ands	r3, r2
 8008056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800806c:	4a12      	ldr	r2, [pc, #72]	; (80080b8 <HAL_GPIO_Init+0x334>)
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	3301      	adds	r3, #1
 8008076:	61fb      	str	r3, [r7, #28]
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	2b0f      	cmp	r3, #15
 800807c:	f67f ae90 	bls.w	8007da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	3724      	adds	r7, #36	; 0x24
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	40023800 	.word	0x40023800
 8008094:	40013800 	.word	0x40013800
 8008098:	40020000 	.word	0x40020000
 800809c:	40020400 	.word	0x40020400
 80080a0:	40020800 	.word	0x40020800
 80080a4:	40020c00 	.word	0x40020c00
 80080a8:	40021000 	.word	0x40021000
 80080ac:	40021400 	.word	0x40021400
 80080b0:	40021800 	.word	0x40021800
 80080b4:	40021c00 	.word	0x40021c00
 80080b8:	40013c00 	.word	0x40013c00

080080bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	807b      	strh	r3, [r7, #2]
 80080c8:	4613      	mov	r3, r2
 80080ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80080cc:	787b      	ldrb	r3, [r7, #1]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080d2:	887a      	ldrh	r2, [r7, #2]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80080d8:	e003      	b.n	80080e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80080da:	887b      	ldrh	r3, [r7, #2]
 80080dc:	041a      	lsls	r2, r3, #16
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	619a      	str	r2, [r3, #24]
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
	...

080080f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80080fa:	4b08      	ldr	r3, [pc, #32]	; (800811c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080fc:	695a      	ldr	r2, [r3, #20]
 80080fe:	88fb      	ldrh	r3, [r7, #6]
 8008100:	4013      	ands	r3, r2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d006      	beq.n	8008114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008106:	4a05      	ldr	r2, [pc, #20]	; (800811c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008108:	88fb      	ldrh	r3, [r7, #6]
 800810a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800810c:	88fb      	ldrh	r3, [r7, #6]
 800810e:	4618      	mov	r0, r3
 8008110:	f7fb f9a0 	bl	8003454 <HAL_GPIO_EXTI_Callback>
  }
}
 8008114:	bf00      	nop
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	40013c00 	.word	0x40013c00

08008120 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008122:	b08f      	sub	sp, #60	; 0x3c
 8008124:	af0a      	add	r7, sp, #40	; 0x28
 8008126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e10f      	b.n	8008352 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	d106      	bne.n	8008152 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f007 fbc7 	bl	800f8e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2203      	movs	r2, #3
 8008156:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008162:	2b00      	cmp	r3, #0
 8008164:	d102      	bne.n	800816c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4618      	mov	r0, r3
 8008172:	f003 fea8 	bl	800bec6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	687e      	ldr	r6, [r7, #4]
 800817e:	466d      	mov	r5, sp
 8008180:	f106 0410 	add.w	r4, r6, #16
 8008184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800818a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800818c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008190:	e885 0003 	stmia.w	r5, {r0, r1}
 8008194:	1d33      	adds	r3, r6, #4
 8008196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008198:	6838      	ldr	r0, [r7, #0]
 800819a:	f003 fd7f 	bl	800bc9c <USB_CoreInit>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e0d0      	b.n	8008352 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2100      	movs	r1, #0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f003 fe96 	bl	800bee8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081bc:	2300      	movs	r3, #0
 80081be:	73fb      	strb	r3, [r7, #15]
 80081c0:	e04a      	b.n	8008258 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80081c2:	7bfa      	ldrb	r2, [r7, #15]
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	4613      	mov	r3, r2
 80081c8:	00db      	lsls	r3, r3, #3
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	440b      	add	r3, r1
 80081d0:	333d      	adds	r3, #61	; 0x3d
 80081d2:	2201      	movs	r2, #1
 80081d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80081d6:	7bfa      	ldrb	r2, [r7, #15]
 80081d8:	6879      	ldr	r1, [r7, #4]
 80081da:	4613      	mov	r3, r2
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	440b      	add	r3, r1
 80081e4:	333c      	adds	r3, #60	; 0x3c
 80081e6:	7bfa      	ldrb	r2, [r7, #15]
 80081e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80081ea:	7bfa      	ldrb	r2, [r7, #15]
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	b298      	uxth	r0, r3
 80081f0:	6879      	ldr	r1, [r7, #4]
 80081f2:	4613      	mov	r3, r2
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	440b      	add	r3, r1
 80081fc:	3344      	adds	r3, #68	; 0x44
 80081fe:	4602      	mov	r2, r0
 8008200:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008202:	7bfa      	ldrb	r2, [r7, #15]
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	4613      	mov	r3, r2
 8008208:	00db      	lsls	r3, r3, #3
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	440b      	add	r3, r1
 8008210:	3340      	adds	r3, #64	; 0x40
 8008212:	2200      	movs	r2, #0
 8008214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008216:	7bfa      	ldrb	r2, [r7, #15]
 8008218:	6879      	ldr	r1, [r7, #4]
 800821a:	4613      	mov	r3, r2
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	4413      	add	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	440b      	add	r3, r1
 8008224:	3348      	adds	r3, #72	; 0x48
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800822a:	7bfa      	ldrb	r2, [r7, #15]
 800822c:	6879      	ldr	r1, [r7, #4]
 800822e:	4613      	mov	r3, r2
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	440b      	add	r3, r1
 8008238:	334c      	adds	r3, #76	; 0x4c
 800823a:	2200      	movs	r2, #0
 800823c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800823e:	7bfa      	ldrb	r2, [r7, #15]
 8008240:	6879      	ldr	r1, [r7, #4]
 8008242:	4613      	mov	r3, r2
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	440b      	add	r3, r1
 800824c:	3354      	adds	r3, #84	; 0x54
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008252:	7bfb      	ldrb	r3, [r7, #15]
 8008254:	3301      	adds	r3, #1
 8008256:	73fb      	strb	r3, [r7, #15]
 8008258:	7bfa      	ldrb	r2, [r7, #15]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	429a      	cmp	r2, r3
 8008260:	d3af      	bcc.n	80081c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]
 8008266:	e044      	b.n	80082f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008268:	7bfa      	ldrb	r2, [r7, #15]
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	4613      	mov	r3, r2
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	440b      	add	r3, r1
 8008276:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800827a:	2200      	movs	r2, #0
 800827c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800827e:	7bfa      	ldrb	r2, [r7, #15]
 8008280:	6879      	ldr	r1, [r7, #4]
 8008282:	4613      	mov	r3, r2
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	4413      	add	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	440b      	add	r3, r1
 800828c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008290:	7bfa      	ldrb	r2, [r7, #15]
 8008292:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008294:	7bfa      	ldrb	r2, [r7, #15]
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	4613      	mov	r3, r2
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80082a6:	2200      	movs	r2, #0
 80082a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80082aa:	7bfa      	ldrb	r2, [r7, #15]
 80082ac:	6879      	ldr	r1, [r7, #4]
 80082ae:	4613      	mov	r3, r2
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	440b      	add	r3, r1
 80082b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80082bc:	2200      	movs	r2, #0
 80082be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80082c0:	7bfa      	ldrb	r2, [r7, #15]
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	4613      	mov	r3, r2
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	440b      	add	r3, r1
 80082ce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80082d6:	7bfa      	ldrb	r2, [r7, #15]
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	4613      	mov	r3, r2
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	3301      	adds	r3, #1
 80082f0:	73fb      	strb	r3, [r7, #15]
 80082f2:	7bfa      	ldrb	r2, [r7, #15]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d3b5      	bcc.n	8008268 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	603b      	str	r3, [r7, #0]
 8008302:	687e      	ldr	r6, [r7, #4]
 8008304:	466d      	mov	r5, sp
 8008306:	f106 0410 	add.w	r4, r6, #16
 800830a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800830c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800830e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008312:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008316:	e885 0003 	stmia.w	r5, {r0, r1}
 800831a:	1d33      	adds	r3, r6, #4
 800831c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800831e:	6838      	ldr	r0, [r7, #0]
 8008320:	f003 fe2e 	bl	800bf80 <USB_DevInit>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d005      	beq.n	8008336 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2202      	movs	r2, #2
 800832e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e00d      	b.n	8008352 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4618      	mov	r0, r3
 800834c:	f004 ff7d 	bl	800d24a <USB_DevDisconnect>

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800835a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800836e:	2b01      	cmp	r3, #1
 8008370:	d101      	bne.n	8008376 <HAL_PCD_Start+0x1c>
 8008372:	2302      	movs	r3, #2
 8008374:	e020      	b.n	80083b8 <HAL_PCD_Start+0x5e>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	2b01      	cmp	r3, #1
 8008384:	d109      	bne.n	800839a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800838a:	2b01      	cmp	r3, #1
 800838c:	d005      	beq.n	800839a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008392:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	f003 fd80 	bl	800bea4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f004 ff2d 	bl	800d208 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80083c0:	b590      	push	{r4, r7, lr}
 80083c2:	b08d      	sub	sp, #52	; 0x34
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f004 ffeb 	bl	800d3b2 <USB_GetMode>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f040 848a 	bne.w	8008cf8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f004 ff4f 	bl	800d28c <USB_ReadInterrupts>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 8480 	beq.w	8008cf6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	0a1b      	lsrs	r3, r3, #8
 8008400:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4618      	mov	r0, r3
 8008410:	f004 ff3c 	bl	800d28c <USB_ReadInterrupts>
 8008414:	4603      	mov	r3, r0
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b02      	cmp	r3, #2
 800841c:	d107      	bne.n	800842e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	695a      	ldr	r2, [r3, #20]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f002 0202 	and.w	r2, r2, #2
 800842c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4618      	mov	r0, r3
 8008434:	f004 ff2a 	bl	800d28c <USB_ReadInterrupts>
 8008438:	4603      	mov	r3, r0
 800843a:	f003 0310 	and.w	r3, r3, #16
 800843e:	2b10      	cmp	r3, #16
 8008440:	d161      	bne.n	8008506 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	699a      	ldr	r2, [r3, #24]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0210 	bic.w	r2, r2, #16
 8008450:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	f003 020f 	and.w	r2, r3, #15
 800845e:	4613      	mov	r3, r2
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	4413      	add	r3, r2
 800846e:	3304      	adds	r3, #4
 8008470:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	0c5b      	lsrs	r3, r3, #17
 8008476:	f003 030f 	and.w	r3, r3, #15
 800847a:	2b02      	cmp	r3, #2
 800847c:	d124      	bne.n	80084c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008484:	4013      	ands	r3, r2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d035      	beq.n	80084f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	091b      	lsrs	r3, r3, #4
 8008492:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008498:	b29b      	uxth	r3, r3
 800849a:	461a      	mov	r2, r3
 800849c:	6a38      	ldr	r0, [r7, #32]
 800849e:	f004 fd61 	bl	800cf64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	691a      	ldr	r2, [r3, #16]
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	091b      	lsrs	r3, r3, #4
 80084aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084ae:	441a      	add	r2, r3
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	6a1a      	ldr	r2, [r3, #32]
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	091b      	lsrs	r3, r3, #4
 80084bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084c0:	441a      	add	r2, r3
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	621a      	str	r2, [r3, #32]
 80084c6:	e016      	b.n	80084f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	0c5b      	lsrs	r3, r3, #17
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	2b06      	cmp	r3, #6
 80084d2:	d110      	bne.n	80084f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80084da:	2208      	movs	r2, #8
 80084dc:	4619      	mov	r1, r3
 80084de:	6a38      	ldr	r0, [r7, #32]
 80084e0:	f004 fd40 	bl	800cf64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	6a1a      	ldr	r2, [r3, #32]
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	091b      	lsrs	r3, r3, #4
 80084ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084f0:	441a      	add	r2, r3
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	699a      	ldr	r2, [r3, #24]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0210 	orr.w	r2, r2, #16
 8008504:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4618      	mov	r0, r3
 800850c:	f004 febe 	bl	800d28c <USB_ReadInterrupts>
 8008510:	4603      	mov	r3, r0
 8008512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008516:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800851a:	f040 80a7 	bne.w	800866c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800851e:	2300      	movs	r3, #0
 8008520:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f004 fec3 	bl	800d2b2 <USB_ReadDevAllOutEpInterrupt>
 800852c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800852e:	e099      	b.n	8008664 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 808e 	beq.w	8008658 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008542:	b2d2      	uxtb	r2, r2
 8008544:	4611      	mov	r1, r2
 8008546:	4618      	mov	r0, r3
 8008548:	f004 fee7 	bl	800d31a <USB_ReadDevOutEPInterrupt>
 800854c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00c      	beq.n	8008572 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008564:	461a      	mov	r2, r3
 8008566:	2301      	movs	r3, #1
 8008568:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800856a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fec3 	bl	80092f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f003 0308 	and.w	r3, r3, #8
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00c      	beq.n	8008596 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008588:	461a      	mov	r2, r3
 800858a:	2308      	movs	r3, #8
 800858c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800858e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 ff99 	bl	80094c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	2b00      	cmp	r3, #0
 800859e:	d008      	beq.n	80085b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ac:	461a      	mov	r2, r3
 80085ae:	2310      	movs	r3, #16
 80085b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d030      	beq.n	800861e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c4:	2b80      	cmp	r3, #128	; 0x80
 80085c6:	d109      	bne.n	80085dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	69fa      	ldr	r2, [r7, #28]
 80085d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80085da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80085dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085de:	4613      	mov	r3, r2
 80085e0:	00db      	lsls	r3, r3, #3
 80085e2:	4413      	add	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	4413      	add	r3, r2
 80085ee:	3304      	adds	r3, #4
 80085f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	78db      	ldrb	r3, [r3, #3]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d108      	bne.n	800860c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	2200      	movs	r2, #0
 80085fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	b2db      	uxtb	r3, r3
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f007 fa70 	bl	800faec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008618:	461a      	mov	r2, r3
 800861a:	2302      	movs	r3, #2
 800861c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f003 0320 	and.w	r3, r3, #32
 8008624:	2b00      	cmp	r3, #0
 8008626:	d008      	beq.n	800863a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	4413      	add	r3, r2
 8008630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008634:	461a      	mov	r2, r3
 8008636:	2320      	movs	r3, #32
 8008638:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d009      	beq.n	8008658 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008650:	461a      	mov	r2, r3
 8008652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008656:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	3301      	adds	r3, #1
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	085b      	lsrs	r3, r3, #1
 8008662:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	2b00      	cmp	r3, #0
 8008668:	f47f af62 	bne.w	8008530 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f004 fe0b 	bl	800d28c <USB_ReadInterrupts>
 8008676:	4603      	mov	r3, r0
 8008678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800867c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008680:	f040 80db 	bne.w	800883a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4618      	mov	r0, r3
 800868a:	f004 fe2c 	bl	800d2e6 <USB_ReadDevAllInEpInterrupt>
 800868e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008694:	e0cd      	b.n	8008832 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80c2 	beq.w	8008826 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a8:	b2d2      	uxtb	r2, r2
 80086aa:	4611      	mov	r1, r2
 80086ac:	4618      	mov	r0, r3
 80086ae:	f004 fe52 	bl	800d356 <USB_ReadDevInEPInterrupt>
 80086b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d057      	beq.n	800876e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	f003 030f 	and.w	r3, r3, #15
 80086c4:	2201      	movs	r2, #1
 80086c6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	43db      	mvns	r3, r3
 80086d8:	69f9      	ldr	r1, [r7, #28]
 80086da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086de:	4013      	ands	r3, r2
 80086e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ee:	461a      	mov	r2, r3
 80086f0:	2301      	movs	r3, #1
 80086f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d132      	bne.n	8008762 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80086fc:	6879      	ldr	r1, [r7, #4]
 80086fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008700:	4613      	mov	r3, r2
 8008702:	00db      	lsls	r3, r3, #3
 8008704:	4413      	add	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	440b      	add	r3, r1
 800870a:	334c      	adds	r3, #76	; 0x4c
 800870c:	6819      	ldr	r1, [r3, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008712:	4613      	mov	r3, r2
 8008714:	00db      	lsls	r3, r3, #3
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4403      	add	r3, r0
 800871c:	3348      	adds	r3, #72	; 0x48
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4419      	add	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008726:	4613      	mov	r3, r2
 8008728:	00db      	lsls	r3, r3, #3
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4403      	add	r3, r0
 8008730:	334c      	adds	r3, #76	; 0x4c
 8008732:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	2b00      	cmp	r3, #0
 8008738:	d113      	bne.n	8008762 <HAL_PCD_IRQHandler+0x3a2>
 800873a:	6879      	ldr	r1, [r7, #4]
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	4613      	mov	r3, r2
 8008740:	00db      	lsls	r3, r3, #3
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	440b      	add	r3, r1
 8008748:	3354      	adds	r3, #84	; 0x54
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d108      	bne.n	8008762 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6818      	ldr	r0, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800875a:	461a      	mov	r2, r3
 800875c:	2101      	movs	r1, #1
 800875e:	f004 fe59 	bl	800d414 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	b2db      	uxtb	r3, r3
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f007 f93a 	bl	800f9e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f003 0308 	and.w	r3, r3, #8
 8008774:	2b00      	cmp	r3, #0
 8008776:	d008      	beq.n	800878a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008784:	461a      	mov	r2, r3
 8008786:	2308      	movs	r3, #8
 8008788:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	f003 0310 	and.w	r3, r3, #16
 8008790:	2b00      	cmp	r3, #0
 8008792:	d008      	beq.n	80087a6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a0:	461a      	mov	r2, r3
 80087a2:	2310      	movs	r3, #16
 80087a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d008      	beq.n	80087c2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087bc:	461a      	mov	r2, r3
 80087be:	2340      	movs	r3, #64	; 0x40
 80087c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f003 0302 	and.w	r3, r3, #2
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d023      	beq.n	8008814 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80087cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087ce:	6a38      	ldr	r0, [r7, #32]
 80087d0:	f003 fd3a 	bl	800c248 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80087d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d6:	4613      	mov	r3, r2
 80087d8:	00db      	lsls	r3, r3, #3
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	3338      	adds	r3, #56	; 0x38
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	4413      	add	r3, r2
 80087e4:	3304      	adds	r3, #4
 80087e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	78db      	ldrb	r3, [r3, #3]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d108      	bne.n	8008802 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2200      	movs	r2, #0
 80087f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f007 f987 	bl	800fb10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	4413      	add	r3, r2
 800880a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880e:	461a      	mov	r2, r3
 8008810:	2302      	movs	r3, #2
 8008812:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800881e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fcdb 	bl	80091dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	3301      	adds	r3, #1
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800882c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882e:	085b      	lsrs	r3, r3, #1
 8008830:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008834:	2b00      	cmp	r3, #0
 8008836:	f47f af2e 	bne.w	8008696 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	f004 fd24 	bl	800d28c <USB_ReadInterrupts>
 8008844:	4603      	mov	r3, r0
 8008846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800884a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800884e:	d122      	bne.n	8008896 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	69fa      	ldr	r2, [r7, #28]
 800885a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800885e:	f023 0301 	bic.w	r3, r3, #1
 8008862:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800886a:	2b01      	cmp	r3, #1
 800886c:	d108      	bne.n	8008880 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008876:	2100      	movs	r1, #0
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fec3 	bl	8009604 <HAL_PCDEx_LPM_Callback>
 800887e:	e002      	b.n	8008886 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f007 f925 	bl	800fad0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	695a      	ldr	r2, [r3, #20]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4618      	mov	r0, r3
 800889c:	f004 fcf6 	bl	800d28c <USB_ReadInterrupts>
 80088a0:	4603      	mov	r3, r0
 80088a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088aa:	d112      	bne.n	80088d2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d102      	bne.n	80088c2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f007 f8e1 	bl	800fa84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	695a      	ldr	r2, [r3, #20]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80088d0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f004 fcd8 	bl	800d28c <USB_ReadInterrupts>
 80088dc:	4603      	mov	r3, r0
 80088de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e6:	f040 80b7 	bne.w	8008a58 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	69fa      	ldr	r2, [r7, #28]
 80088f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088f8:	f023 0301 	bic.w	r3, r3, #1
 80088fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2110      	movs	r1, #16
 8008904:	4618      	mov	r0, r3
 8008906:	f003 fc9f 	bl	800c248 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800890a:	2300      	movs	r3, #0
 800890c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800890e:	e046      	b.n	800899e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891c:	461a      	mov	r2, r3
 800891e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008922:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008934:	0151      	lsls	r1, r2, #5
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	440a      	add	r2, r1
 800893a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800893e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008942:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008950:	461a      	mov	r2, r3
 8008952:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008956:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895a:	015a      	lsls	r2, r3, #5
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	4413      	add	r3, r2
 8008960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008968:	0151      	lsls	r1, r2, #5
 800896a:	69fa      	ldr	r2, [r7, #28]
 800896c:	440a      	add	r2, r1
 800896e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008972:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008976:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	4413      	add	r3, r2
 8008980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008988:	0151      	lsls	r1, r2, #5
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	440a      	add	r2, r1
 800898e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008992:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008996:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899a:	3301      	adds	r3, #1
 800899c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d3b3      	bcc.n	8008910 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	69fa      	ldr	r2, [r7, #28]
 80089b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80089ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d016      	beq.n	80089f2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089d4:	f043 030b 	orr.w	r3, r3, #11
 80089d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089ea:	f043 030b 	orr.w	r3, r3, #11
 80089ee:	6453      	str	r3, [r2, #68]	; 0x44
 80089f0:	e015      	b.n	8008a1e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	69fa      	ldr	r2, [r7, #28]
 80089fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008a04:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008a08:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	69fa      	ldr	r2, [r7, #28]
 8008a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a18:	f043 030b 	orr.w	r3, r3, #11
 8008a1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	69fa      	ldr	r2, [r7, #28]
 8008a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008a30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008a42:	461a      	mov	r2, r3
 8008a44:	f004 fce6 	bl	800d414 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	695a      	ldr	r2, [r3, #20]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f004 fc15 	bl	800d28c <USB_ReadInterrupts>
 8008a62:	4603      	mov	r3, r0
 8008a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a6c:	d124      	bne.n	8008ab8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f004 fcab 	bl	800d3ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f003 fc60 	bl	800c342 <USB_GetDevSpeed>
 8008a82:	4603      	mov	r3, r0
 8008a84:	461a      	mov	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681c      	ldr	r4, [r3, #0]
 8008a8e:	f001 f9e9 	bl	8009e64 <HAL_RCC_GetHCLKFreq>
 8008a92:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f003 f95f 	bl	800bd60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f006 ffc5 	bl	800fa32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	695a      	ldr	r2, [r3, #20]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f004 fbe5 	bl	800d28c <USB_ReadInterrupts>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	f003 0308 	and.w	r3, r3, #8
 8008ac8:	2b08      	cmp	r3, #8
 8008aca:	d10a      	bne.n	8008ae2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f006 ffa2 	bl	800fa16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	695a      	ldr	r2, [r3, #20]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f002 0208 	and.w	r2, r2, #8
 8008ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f004 fbd0 	bl	800d28c <USB_ReadInterrupts>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af2:	2b80      	cmp	r3, #128	; 0x80
 8008af4:	d122      	bne.n	8008b3c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b02:	2301      	movs	r3, #1
 8008b04:	627b      	str	r3, [r7, #36]	; 0x24
 8008b06:	e014      	b.n	8008b32 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	4413      	add	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	440b      	add	r3, r1
 8008b16:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d105      	bne.n	8008b2c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fb27 	bl	800917a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	3301      	adds	r3, #1
 8008b30:	627b      	str	r3, [r7, #36]	; 0x24
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d3e5      	bcc.n	8008b08 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f004 fba3 	bl	800d28c <USB_ReadInterrupts>
 8008b46:	4603      	mov	r3, r0
 8008b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b50:	d13b      	bne.n	8008bca <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b52:	2301      	movs	r3, #1
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
 8008b56:	e02b      	b.n	8008bb0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	00db      	lsls	r3, r3, #3
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	3340      	adds	r3, #64	; 0x40
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d115      	bne.n	8008baa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008b7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	da12      	bge.n	8008baa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008b84:	6879      	ldr	r1, [r7, #4]
 8008b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b88:	4613      	mov	r3, r2
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	4413      	add	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	440b      	add	r3, r1
 8008b92:	333f      	adds	r3, #63	; 0x3f
 8008b94:	2201      	movs	r2, #1
 8008b96:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fae8 	bl	800917a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	3301      	adds	r3, #1
 8008bae:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d3ce      	bcc.n	8008b58 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	695a      	ldr	r2, [r3, #20]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f004 fb5c 	bl	800d28c <USB_ReadInterrupts>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bde:	d155      	bne.n	8008c8c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008be0:	2301      	movs	r3, #1
 8008be2:	627b      	str	r3, [r7, #36]	; 0x24
 8008be4:	e045      	b.n	8008c72 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008bf6:	6879      	ldr	r1, [r7, #4]
 8008bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	00db      	lsls	r3, r3, #3
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	440b      	add	r3, r1
 8008c04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d12e      	bne.n	8008c6c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008c0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	da2b      	bge.n	8008c6c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008c20:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d121      	bne.n	8008c6c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	440b      	add	r3, r1
 8008c36:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10a      	bne.n	8008c6c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	69fa      	ldr	r2, [r7, #28]
 8008c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c68:	6053      	str	r3, [r2, #4]
            break;
 8008c6a:	e007      	b.n	8008c7c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	3301      	adds	r3, #1
 8008c70:	627b      	str	r3, [r7, #36]	; 0x24
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d3b4      	bcc.n	8008be6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	695a      	ldr	r2, [r3, #20]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f004 fafb 	bl	800d28c <USB_ReadInterrupts>
 8008c96:	4603      	mov	r3, r0
 8008c98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca0:	d10a      	bne.n	8008cb8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f006 ff46 	bl	800fb34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	695a      	ldr	r2, [r3, #20]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f004 fae5 	bl	800d28c <USB_ReadInterrupts>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f003 0304 	and.w	r3, r3, #4
 8008cc8:	2b04      	cmp	r3, #4
 8008cca:	d115      	bne.n	8008cf8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	f003 0304 	and.w	r3, r3, #4
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f006 ff36 	bl	800fb50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6859      	ldr	r1, [r3, #4]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69ba      	ldr	r2, [r7, #24]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	605a      	str	r2, [r3, #4]
 8008cf4:	e000      	b.n	8008cf8 <HAL_PCD_IRQHandler+0x938>
      return;
 8008cf6:	bf00      	nop
    }
  }
}
 8008cf8:	3734      	adds	r7, #52	; 0x34
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd90      	pop	{r4, r7, pc}

08008cfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	460b      	mov	r3, r1
 8008d08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d101      	bne.n	8008d18 <HAL_PCD_SetAddress+0x1a>
 8008d14:	2302      	movs	r3, #2
 8008d16:	e013      	b.n	8008d40 <HAL_PCD_SetAddress+0x42>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	78fa      	ldrb	r2, [r7, #3]
 8008d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	78fa      	ldrb	r2, [r7, #3]
 8008d2e:	4611      	mov	r1, r2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f004 fa43 	bl	800d1bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	4608      	mov	r0, r1
 8008d52:	4611      	mov	r1, r2
 8008d54:	461a      	mov	r2, r3
 8008d56:	4603      	mov	r3, r0
 8008d58:	70fb      	strb	r3, [r7, #3]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	803b      	strh	r3, [r7, #0]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008d66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	da0f      	bge.n	8008d8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d6e:	78fb      	ldrb	r3, [r7, #3]
 8008d70:	f003 020f 	and.w	r2, r3, #15
 8008d74:	4613      	mov	r3, r2
 8008d76:	00db      	lsls	r3, r3, #3
 8008d78:	4413      	add	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	3338      	adds	r3, #56	; 0x38
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	4413      	add	r3, r2
 8008d82:	3304      	adds	r3, #4
 8008d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	705a      	strb	r2, [r3, #1]
 8008d8c:	e00f      	b.n	8008dae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	f003 020f 	and.w	r2, r3, #15
 8008d94:	4613      	mov	r3, r2
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	4413      	add	r3, r2
 8008da4:	3304      	adds	r3, #4
 8008da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008dba:	883a      	ldrh	r2, [r7, #0]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	78ba      	ldrb	r2, [r7, #2]
 8008dc4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	785b      	ldrb	r3, [r3, #1]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008dd8:	78bb      	ldrb	r3, [r7, #2]
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d102      	bne.n	8008de4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d101      	bne.n	8008df2 <HAL_PCD_EP_Open+0xaa>
 8008dee:	2302      	movs	r3, #2
 8008df0:	e00e      	b.n	8008e10 <HAL_PCD_EP_Open+0xc8>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68f9      	ldr	r1, [r7, #12]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f003 fac3 	bl	800c38c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	da0f      	bge.n	8008e4c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	f003 020f 	and.w	r2, r3, #15
 8008e32:	4613      	mov	r3, r2
 8008e34:	00db      	lsls	r3, r3, #3
 8008e36:	4413      	add	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	3338      	adds	r3, #56	; 0x38
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	4413      	add	r3, r2
 8008e40:	3304      	adds	r3, #4
 8008e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2201      	movs	r2, #1
 8008e48:	705a      	strb	r2, [r3, #1]
 8008e4a:	e00f      	b.n	8008e6c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e4c:	78fb      	ldrb	r3, [r7, #3]
 8008e4e:	f003 020f 	and.w	r2, r3, #15
 8008e52:	4613      	mov	r3, r2
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	4413      	add	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	4413      	add	r3, r2
 8008e62:	3304      	adds	r3, #4
 8008e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008e6c:	78fb      	ldrb	r3, [r7, #3]
 8008e6e:	f003 030f 	and.w	r3, r3, #15
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <HAL_PCD_EP_Close+0x6e>
 8008e82:	2302      	movs	r3, #2
 8008e84:	e00e      	b.n	8008ea4 <HAL_PCD_EP_Close+0x8c>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68f9      	ldr	r1, [r7, #12]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f003 fb01 	bl	800c49c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	607a      	str	r2, [r7, #4]
 8008eb6:	603b      	str	r3, [r7, #0]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ebc:	7afb      	ldrb	r3, [r7, #11]
 8008ebe:	f003 020f 	and.w	r2, r3, #15
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	00db      	lsls	r3, r3, #3
 8008ec6:	4413      	add	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	2200      	movs	r2, #0
 8008eec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008eee:	7afb      	ldrb	r3, [r7, #11]
 8008ef0:	f003 030f 	and.w	r3, r3, #15
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d102      	bne.n	8008f08 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008f08:	7afb      	ldrb	r3, [r7, #11]
 8008f0a:	f003 030f 	and.w	r3, r3, #15
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d109      	bne.n	8008f26 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6979      	ldr	r1, [r7, #20]
 8008f20:	f003 fde0 	bl	800cae4 <USB_EP0StartXfer>
 8008f24:	e008      	b.n	8008f38 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	461a      	mov	r2, r3
 8008f32:	6979      	ldr	r1, [r7, #20]
 8008f34:	f003 fb8e 	bl	800c654 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008f4e:	78fb      	ldrb	r3, [r7, #3]
 8008f50:	f003 020f 	and.w	r2, r3, #15
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	4613      	mov	r3, r2
 8008f58:	00db      	lsls	r3, r3, #3
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	440b      	add	r3, r1
 8008f60:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008f64:	681b      	ldr	r3, [r3, #0]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	370c      	adds	r7, #12
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b086      	sub	sp, #24
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	603b      	str	r3, [r7, #0]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f82:	7afb      	ldrb	r3, [r7, #11]
 8008f84:	f003 020f 	and.w	r2, r3, #15
 8008f88:	4613      	mov	r3, r2
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	3338      	adds	r3, #56	; 0x38
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	4413      	add	r3, r2
 8008f96:	3304      	adds	r3, #4
 8008f98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008fb2:	7afb      	ldrb	r3, [r7, #11]
 8008fb4:	f003 030f 	and.w	r3, r3, #15
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d102      	bne.n	8008fcc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008fcc:	7afb      	ldrb	r3, [r7, #11]
 8008fce:	f003 030f 	and.w	r3, r3, #15
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d109      	bne.n	8008fea <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6979      	ldr	r1, [r7, #20]
 8008fe4:	f003 fd7e 	bl	800cae4 <USB_EP0StartXfer>
 8008fe8:	e008      	b.n	8008ffc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	6979      	ldr	r1, [r7, #20]
 8008ff8:	f003 fb2c 	bl	800c654 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009012:	78fb      	ldrb	r3, [r7, #3]
 8009014:	f003 020f 	and.w	r2, r3, #15
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	429a      	cmp	r2, r3
 800901e:	d901      	bls.n	8009024 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e050      	b.n	80090c6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009028:	2b00      	cmp	r3, #0
 800902a:	da0f      	bge.n	800904c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	f003 020f 	and.w	r2, r3, #15
 8009032:	4613      	mov	r3, r2
 8009034:	00db      	lsls	r3, r3, #3
 8009036:	4413      	add	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	3338      	adds	r3, #56	; 0x38
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	4413      	add	r3, r2
 8009040:	3304      	adds	r3, #4
 8009042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2201      	movs	r2, #1
 8009048:	705a      	strb	r2, [r3, #1]
 800904a:	e00d      	b.n	8009068 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800904c:	78fa      	ldrb	r2, [r7, #3]
 800904e:	4613      	mov	r3, r2
 8009050:	00db      	lsls	r3, r3, #3
 8009052:	4413      	add	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	4413      	add	r3, r2
 800905e:	3304      	adds	r3, #4
 8009060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2201      	movs	r2, #1
 800906c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800906e:	78fb      	ldrb	r3, [r7, #3]
 8009070:	f003 030f 	and.w	r3, r3, #15
 8009074:	b2da      	uxtb	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009080:	2b01      	cmp	r3, #1
 8009082:	d101      	bne.n	8009088 <HAL_PCD_EP_SetStall+0x82>
 8009084:	2302      	movs	r3, #2
 8009086:	e01e      	b.n	80090c6 <HAL_PCD_EP_SetStall+0xc0>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68f9      	ldr	r1, [r7, #12]
 8009096:	4618      	mov	r0, r3
 8009098:	f003 ffbc 	bl	800d014 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800909c:	78fb      	ldrb	r3, [r7, #3]
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10a      	bne.n	80090bc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	b2d9      	uxtb	r1, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80090b6:	461a      	mov	r2, r3
 80090b8:	f004 f9ac 	bl	800d414 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	460b      	mov	r3, r1
 80090d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80090da:	78fb      	ldrb	r3, [r7, #3]
 80090dc:	f003 020f 	and.w	r2, r3, #15
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d901      	bls.n	80090ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e042      	b.n	8009172 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80090ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	da0f      	bge.n	8009114 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090f4:	78fb      	ldrb	r3, [r7, #3]
 80090f6:	f003 020f 	and.w	r2, r3, #15
 80090fa:	4613      	mov	r3, r2
 80090fc:	00db      	lsls	r3, r3, #3
 80090fe:	4413      	add	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	3338      	adds	r3, #56	; 0x38
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	4413      	add	r3, r2
 8009108:	3304      	adds	r3, #4
 800910a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2201      	movs	r2, #1
 8009110:	705a      	strb	r2, [r3, #1]
 8009112:	e00f      	b.n	8009134 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	f003 020f 	and.w	r2, r3, #15
 800911a:	4613      	mov	r3, r2
 800911c:	00db      	lsls	r3, r3, #3
 800911e:	4413      	add	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	4413      	add	r3, r2
 800912a:	3304      	adds	r3, #4
 800912c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800913a:	78fb      	ldrb	r3, [r7, #3]
 800913c:	f003 030f 	and.w	r3, r3, #15
 8009140:	b2da      	uxtb	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800914c:	2b01      	cmp	r3, #1
 800914e:	d101      	bne.n	8009154 <HAL_PCD_EP_ClrStall+0x86>
 8009150:	2302      	movs	r3, #2
 8009152:	e00e      	b.n	8009172 <HAL_PCD_EP_ClrStall+0xa4>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68f9      	ldr	r1, [r7, #12]
 8009162:	4618      	mov	r0, r3
 8009164:	f003 ffc4 	bl	800d0f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	460b      	mov	r3, r1
 8009184:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800918a:	2b00      	cmp	r3, #0
 800918c:	da0c      	bge.n	80091a8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800918e:	78fb      	ldrb	r3, [r7, #3]
 8009190:	f003 020f 	and.w	r2, r3, #15
 8009194:	4613      	mov	r3, r2
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	4413      	add	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	3338      	adds	r3, #56	; 0x38
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	4413      	add	r3, r2
 80091a2:	3304      	adds	r3, #4
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	e00c      	b.n	80091c2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091a8:	78fb      	ldrb	r3, [r7, #3]
 80091aa:	f003 020f 	and.w	r2, r3, #15
 80091ae:	4613      	mov	r3, r2
 80091b0:	00db      	lsls	r3, r3, #3
 80091b2:	4413      	add	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	4413      	add	r3, r2
 80091be:	3304      	adds	r3, #4
 80091c0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68f9      	ldr	r1, [r7, #12]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f003 fde3 	bl	800cd94 <USB_EPStopXfer>
 80091ce:	4603      	mov	r3, r0
 80091d0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80091d2:	7afb      	ldrb	r3, [r7, #11]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b08a      	sub	sp, #40	; 0x28
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	4613      	mov	r3, r2
 80091f4:	00db      	lsls	r3, r3, #3
 80091f6:	4413      	add	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	3338      	adds	r3, #56	; 0x38
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	4413      	add	r3, r2
 8009200:	3304      	adds	r3, #4
 8009202:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6a1a      	ldr	r2, [r3, #32]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	429a      	cmp	r2, r3
 800920e:	d901      	bls.n	8009214 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e06c      	b.n	80092ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	699a      	ldr	r2, [r3, #24]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	69fa      	ldr	r2, [r7, #28]
 8009226:	429a      	cmp	r2, r3
 8009228:	d902      	bls.n	8009230 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	3303      	adds	r3, #3
 8009234:	089b      	lsrs	r3, r3, #2
 8009236:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009238:	e02b      	b.n	8009292 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	699a      	ldr	r2, [r3, #24]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	429a      	cmp	r2, r3
 800924e:	d902      	bls.n	8009256 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	3303      	adds	r3, #3
 800925a:	089b      	lsrs	r3, r3, #2
 800925c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6919      	ldr	r1, [r3, #16]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	b2da      	uxtb	r2, r3
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800926e:	b2db      	uxtb	r3, r3
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	4603      	mov	r3, r0
 8009274:	6978      	ldr	r0, [r7, #20]
 8009276:	f003 fe37 	bl	800cee8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	691a      	ldr	r2, [r3, #16]
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	441a      	add	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6a1a      	ldr	r2, [r3, #32]
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	441a      	add	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d809      	bhi.n	80092bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6a1a      	ldr	r2, [r3, #32]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d203      	bcs.n	80092bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1be      	bne.n	800923a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	699a      	ldr	r2, [r3, #24]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6a1b      	ldr	r3, [r3, #32]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d811      	bhi.n	80092ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	f003 030f 	and.w	r3, r3, #15
 80092ce:	2201      	movs	r2, #1
 80092d0:	fa02 f303 	lsl.w	r3, r2, r3
 80092d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	43db      	mvns	r3, r3
 80092e2:	6939      	ldr	r1, [r7, #16]
 80092e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092e8:	4013      	ands	r3, r2
 80092ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3720      	adds	r7, #32
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b088      	sub	sp, #32
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	333c      	adds	r3, #60	; 0x3c
 8009310:	3304      	adds	r3, #4
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	015a      	lsls	r2, r3, #5
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	4413      	add	r3, r2
 800931e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d17b      	bne.n	8009426 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f003 0308 	and.w	r3, r3, #8
 8009334:	2b00      	cmp	r3, #0
 8009336:	d015      	beq.n	8009364 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	4a61      	ldr	r2, [pc, #388]	; (80094c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800933c:	4293      	cmp	r3, r2
 800933e:	f240 80b9 	bls.w	80094b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 80b3 	beq.w	80094b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	4413      	add	r3, r2
 8009356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800935a:	461a      	mov	r2, r3
 800935c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009360:	6093      	str	r3, [r2, #8]
 8009362:	e0a7      	b.n	80094b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f003 0320 	and.w	r3, r3, #32
 800936a:	2b00      	cmp	r3, #0
 800936c:	d009      	beq.n	8009382 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	015a      	lsls	r2, r3, #5
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	4413      	add	r3, r2
 8009376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800937a:	461a      	mov	r2, r3
 800937c:	2320      	movs	r3, #32
 800937e:	6093      	str	r3, [r2, #8]
 8009380:	e098      	b.n	80094b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009388:	2b00      	cmp	r3, #0
 800938a:	f040 8093 	bne.w	80094b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	4a4b      	ldr	r2, [pc, #300]	; (80094c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d90f      	bls.n	80093b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00a      	beq.n	80093b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ac:	461a      	mov	r2, r3
 80093ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093b2:	6093      	str	r3, [r2, #8]
 80093b4:	e07e      	b.n	80094b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	4613      	mov	r3, r2
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	4413      	add	r3, r2
 80093c8:	3304      	adds	r3, #4
 80093ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	69da      	ldr	r2, [r3, #28]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	0159      	lsls	r1, r3, #5
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	440b      	add	r3, r1
 80093d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093e2:	1ad2      	subs	r2, r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d114      	bne.n	8009418 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d109      	bne.n	800940a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6818      	ldr	r0, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009400:	461a      	mov	r2, r3
 8009402:	2101      	movs	r1, #1
 8009404:	f004 f806 	bl	800d414 <USB_EP0_OutStart>
 8009408:	e006      	b.n	8009418 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	691a      	ldr	r2, [r3, #16]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	441a      	add	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	b2db      	uxtb	r3, r3
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f006 fac4 	bl	800f9ac <HAL_PCD_DataOutStageCallback>
 8009424:	e046      	b.n	80094b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	4a26      	ldr	r2, [pc, #152]	; (80094c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d124      	bne.n	8009478 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00a      	beq.n	800944e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	4413      	add	r3, r2
 8009440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009444:	461a      	mov	r2, r3
 8009446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800944a:	6093      	str	r3, [r2, #8]
 800944c:	e032      	b.n	80094b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	f003 0320 	and.w	r3, r3, #32
 8009454:	2b00      	cmp	r3, #0
 8009456:	d008      	beq.n	800946a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	4413      	add	r3, r2
 8009460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009464:	461a      	mov	r2, r3
 8009466:	2320      	movs	r3, #32
 8009468:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f006 fa9b 	bl	800f9ac <HAL_PCD_DataOutStageCallback>
 8009476:	e01d      	b.n	80094b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d114      	bne.n	80094a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	4613      	mov	r3, r2
 8009484:	00db      	lsls	r3, r3, #3
 8009486:	4413      	add	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	440b      	add	r3, r1
 800948c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d108      	bne.n	80094a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80094a0:	461a      	mov	r2, r3
 80094a2:	2100      	movs	r1, #0
 80094a4:	f003 ffb6 	bl	800d414 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f006 fa7c 	bl	800f9ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3720      	adds	r7, #32
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	4f54300a 	.word	0x4f54300a
 80094c4:	4f54310a 	.word	0x4f54310a

080094c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	333c      	adds	r3, #60	; 0x3c
 80094e0:	3304      	adds	r3, #4
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	015a      	lsls	r2, r3, #5
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4a15      	ldr	r2, [pc, #84]	; (8009550 <PCD_EP_OutSetupPacket_int+0x88>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d90e      	bls.n	800951c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009504:	2b00      	cmp	r3, #0
 8009506:	d009      	beq.n	800951c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	4413      	add	r3, r2
 8009510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009514:	461a      	mov	r2, r3
 8009516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800951a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f006 fa33 	bl	800f988 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	4a0a      	ldr	r2, [pc, #40]	; (8009550 <PCD_EP_OutSetupPacket_int+0x88>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d90c      	bls.n	8009544 <PCD_EP_OutSetupPacket_int+0x7c>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d108      	bne.n	8009544 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6818      	ldr	r0, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800953c:	461a      	mov	r2, r3
 800953e:	2101      	movs	r1, #1
 8009540:	f003 ff68 	bl	800d414 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	4f54300a 	.word	0x4f54300a

08009554 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
 8009560:	4613      	mov	r3, r2
 8009562:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d107      	bne.n	8009582 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009572:	883b      	ldrh	r3, [r7, #0]
 8009574:	0419      	lsls	r1, r3, #16
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	430a      	orrs	r2, r1
 800957e:	629a      	str	r2, [r3, #40]	; 0x28
 8009580:	e028      	b.n	80095d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	0c1b      	lsrs	r3, r3, #16
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	4413      	add	r3, r2
 800958e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009590:	2300      	movs	r3, #0
 8009592:	73fb      	strb	r3, [r7, #15]
 8009594:	e00d      	b.n	80095b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	3340      	adds	r3, #64	; 0x40
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	0c1b      	lsrs	r3, r3, #16
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	4413      	add	r3, r2
 80095aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	3301      	adds	r3, #1
 80095b0:	73fb      	strb	r3, [r7, #15]
 80095b2:	7bfa      	ldrb	r2, [r7, #15]
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d3ec      	bcc.n	8009596 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80095bc:	883b      	ldrh	r3, [r7, #0]
 80095be:	0418      	lsls	r0, r3, #16
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	4302      	orrs	r2, r0
 80095cc:	3340      	adds	r3, #64	; 0x40
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	440b      	add	r3, r1
 80095d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b083      	sub	sp, #12
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	887a      	ldrh	r2, [r7, #2]
 80095f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e267      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d075      	beq.n	8009726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800963a:	4b88      	ldr	r3, [pc, #544]	; (800985c <HAL_RCC_OscConfig+0x240>)
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f003 030c 	and.w	r3, r3, #12
 8009642:	2b04      	cmp	r3, #4
 8009644:	d00c      	beq.n	8009660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009646:	4b85      	ldr	r3, [pc, #532]	; (800985c <HAL_RCC_OscConfig+0x240>)
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800964e:	2b08      	cmp	r3, #8
 8009650:	d112      	bne.n	8009678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009652:	4b82      	ldr	r3, [pc, #520]	; (800985c <HAL_RCC_OscConfig+0x240>)
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800965a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800965e:	d10b      	bne.n	8009678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009660:	4b7e      	ldr	r3, [pc, #504]	; (800985c <HAL_RCC_OscConfig+0x240>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d05b      	beq.n	8009724 <HAL_RCC_OscConfig+0x108>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d157      	bne.n	8009724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e242      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009680:	d106      	bne.n	8009690 <HAL_RCC_OscConfig+0x74>
 8009682:	4b76      	ldr	r3, [pc, #472]	; (800985c <HAL_RCC_OscConfig+0x240>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a75      	ldr	r2, [pc, #468]	; (800985c <HAL_RCC_OscConfig+0x240>)
 8009688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	e01d      	b.n	80096cc <HAL_RCC_OscConfig+0xb0>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009698:	d10c      	bne.n	80096b4 <HAL_RCC_OscConfig+0x98>
 800969a:	4b70      	ldr	r3, [pc, #448]	; (800985c <HAL_RCC_OscConfig+0x240>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a6f      	ldr	r2, [pc, #444]	; (800985c <HAL_RCC_OscConfig+0x240>)
 80096a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096a4:	6013      	str	r3, [r2, #0]
 80096a6:	4b6d      	ldr	r3, [pc, #436]	; (800985c <HAL_RCC_OscConfig+0x240>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a6c      	ldr	r2, [pc, #432]	; (800985c <HAL_RCC_OscConfig+0x240>)
 80096ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	e00b      	b.n	80096cc <HAL_RCC_OscConfig+0xb0>
 80096b4:	4b69      	ldr	r3, [pc, #420]	; (800985c <HAL_RCC_OscConfig+0x240>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a68      	ldr	r2, [pc, #416]	; (800985c <HAL_RCC_OscConfig+0x240>)
 80096ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	4b66      	ldr	r3, [pc, #408]	; (800985c <HAL_RCC_OscConfig+0x240>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a65      	ldr	r2, [pc, #404]	; (800985c <HAL_RCC_OscConfig+0x240>)
 80096c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d013      	beq.n	80096fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096d4:	f7fb fff2 	bl	80056bc <HAL_GetTick>
 80096d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096da:	e008      	b.n	80096ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096dc:	f7fb ffee 	bl	80056bc <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	2b64      	cmp	r3, #100	; 0x64
 80096e8:	d901      	bls.n	80096ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	e207      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096ee:	4b5b      	ldr	r3, [pc, #364]	; (800985c <HAL_RCC_OscConfig+0x240>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0f0      	beq.n	80096dc <HAL_RCC_OscConfig+0xc0>
 80096fa:	e014      	b.n	8009726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096fc:	f7fb ffde 	bl	80056bc <HAL_GetTick>
 8009700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009702:	e008      	b.n	8009716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009704:	f7fb ffda 	bl	80056bc <HAL_GetTick>
 8009708:	4602      	mov	r2, r0
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	2b64      	cmp	r3, #100	; 0x64
 8009710:	d901      	bls.n	8009716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009712:	2303      	movs	r3, #3
 8009714:	e1f3      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009716:	4b51      	ldr	r3, [pc, #324]	; (800985c <HAL_RCC_OscConfig+0x240>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1f0      	bne.n	8009704 <HAL_RCC_OscConfig+0xe8>
 8009722:	e000      	b.n	8009726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0302 	and.w	r3, r3, #2
 800972e:	2b00      	cmp	r3, #0
 8009730:	d063      	beq.n	80097fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009732:	4b4a      	ldr	r3, [pc, #296]	; (800985c <HAL_RCC_OscConfig+0x240>)
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f003 030c 	and.w	r3, r3, #12
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00b      	beq.n	8009756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800973e:	4b47      	ldr	r3, [pc, #284]	; (800985c <HAL_RCC_OscConfig+0x240>)
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009746:	2b08      	cmp	r3, #8
 8009748:	d11c      	bne.n	8009784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800974a:	4b44      	ldr	r3, [pc, #272]	; (800985c <HAL_RCC_OscConfig+0x240>)
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d116      	bne.n	8009784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009756:	4b41      	ldr	r3, [pc, #260]	; (800985c <HAL_RCC_OscConfig+0x240>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0302 	and.w	r3, r3, #2
 800975e:	2b00      	cmp	r3, #0
 8009760:	d005      	beq.n	800976e <HAL_RCC_OscConfig+0x152>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d001      	beq.n	800976e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e1c7      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800976e:	4b3b      	ldr	r3, [pc, #236]	; (800985c <HAL_RCC_OscConfig+0x240>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	4937      	ldr	r1, [pc, #220]	; (800985c <HAL_RCC_OscConfig+0x240>)
 800977e:	4313      	orrs	r3, r2
 8009780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009782:	e03a      	b.n	80097fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d020      	beq.n	80097ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800978c:	4b34      	ldr	r3, [pc, #208]	; (8009860 <HAL_RCC_OscConfig+0x244>)
 800978e:	2201      	movs	r2, #1
 8009790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009792:	f7fb ff93 	bl	80056bc <HAL_GetTick>
 8009796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009798:	e008      	b.n	80097ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800979a:	f7fb ff8f 	bl	80056bc <HAL_GetTick>
 800979e:	4602      	mov	r2, r0
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d901      	bls.n	80097ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e1a8      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097ac:	4b2b      	ldr	r3, [pc, #172]	; (800985c <HAL_RCC_OscConfig+0x240>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0302 	and.w	r3, r3, #2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d0f0      	beq.n	800979a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097b8:	4b28      	ldr	r3, [pc, #160]	; (800985c <HAL_RCC_OscConfig+0x240>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	00db      	lsls	r3, r3, #3
 80097c6:	4925      	ldr	r1, [pc, #148]	; (800985c <HAL_RCC_OscConfig+0x240>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	600b      	str	r3, [r1, #0]
 80097cc:	e015      	b.n	80097fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097ce:	4b24      	ldr	r3, [pc, #144]	; (8009860 <HAL_RCC_OscConfig+0x244>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097d4:	f7fb ff72 	bl	80056bc <HAL_GetTick>
 80097d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097da:	e008      	b.n	80097ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097dc:	f7fb ff6e 	bl	80056bc <HAL_GetTick>
 80097e0:	4602      	mov	r2, r0
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d901      	bls.n	80097ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80097ea:	2303      	movs	r3, #3
 80097ec:	e187      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097ee:	4b1b      	ldr	r3, [pc, #108]	; (800985c <HAL_RCC_OscConfig+0x240>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1f0      	bne.n	80097dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 0308 	and.w	r3, r3, #8
 8009802:	2b00      	cmp	r3, #0
 8009804:	d036      	beq.n	8009874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d016      	beq.n	800983c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800980e:	4b15      	ldr	r3, [pc, #84]	; (8009864 <HAL_RCC_OscConfig+0x248>)
 8009810:	2201      	movs	r2, #1
 8009812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009814:	f7fb ff52 	bl	80056bc <HAL_GetTick>
 8009818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800981a:	e008      	b.n	800982e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800981c:	f7fb ff4e 	bl	80056bc <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2b02      	cmp	r3, #2
 8009828:	d901      	bls.n	800982e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e167      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800982e:	4b0b      	ldr	r3, [pc, #44]	; (800985c <HAL_RCC_OscConfig+0x240>)
 8009830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009832:	f003 0302 	and.w	r3, r3, #2
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0f0      	beq.n	800981c <HAL_RCC_OscConfig+0x200>
 800983a:	e01b      	b.n	8009874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <HAL_RCC_OscConfig+0x248>)
 800983e:	2200      	movs	r2, #0
 8009840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009842:	f7fb ff3b 	bl	80056bc <HAL_GetTick>
 8009846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009848:	e00e      	b.n	8009868 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800984a:	f7fb ff37 	bl	80056bc <HAL_GetTick>
 800984e:	4602      	mov	r2, r0
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	2b02      	cmp	r3, #2
 8009856:	d907      	bls.n	8009868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009858:	2303      	movs	r3, #3
 800985a:	e150      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
 800985c:	40023800 	.word	0x40023800
 8009860:	42470000 	.word	0x42470000
 8009864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009868:	4b88      	ldr	r3, [pc, #544]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 800986a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800986c:	f003 0302 	and.w	r3, r3, #2
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1ea      	bne.n	800984a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0304 	and.w	r3, r3, #4
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 8097 	beq.w	80099b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009882:	2300      	movs	r3, #0
 8009884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009886:	4b81      	ldr	r3, [pc, #516]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 8009888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10f      	bne.n	80098b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009892:	2300      	movs	r3, #0
 8009894:	60bb      	str	r3, [r7, #8]
 8009896:	4b7d      	ldr	r3, [pc, #500]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 8009898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989a:	4a7c      	ldr	r2, [pc, #496]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 800989c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098a0:	6413      	str	r3, [r2, #64]	; 0x40
 80098a2:	4b7a      	ldr	r3, [pc, #488]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 80098a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098aa:	60bb      	str	r3, [r7, #8]
 80098ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098ae:	2301      	movs	r3, #1
 80098b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098b2:	4b77      	ldr	r3, [pc, #476]	; (8009a90 <HAL_RCC_OscConfig+0x474>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d118      	bne.n	80098f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80098be:	4b74      	ldr	r3, [pc, #464]	; (8009a90 <HAL_RCC_OscConfig+0x474>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a73      	ldr	r2, [pc, #460]	; (8009a90 <HAL_RCC_OscConfig+0x474>)
 80098c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098ca:	f7fb fef7 	bl	80056bc <HAL_GetTick>
 80098ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098d0:	e008      	b.n	80098e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098d2:	f7fb fef3 	bl	80056bc <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d901      	bls.n	80098e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e10c      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098e4:	4b6a      	ldr	r3, [pc, #424]	; (8009a90 <HAL_RCC_OscConfig+0x474>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d0f0      	beq.n	80098d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d106      	bne.n	8009906 <HAL_RCC_OscConfig+0x2ea>
 80098f8:	4b64      	ldr	r3, [pc, #400]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 80098fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fc:	4a63      	ldr	r2, [pc, #396]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 80098fe:	f043 0301 	orr.w	r3, r3, #1
 8009902:	6713      	str	r3, [r2, #112]	; 0x70
 8009904:	e01c      	b.n	8009940 <HAL_RCC_OscConfig+0x324>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	2b05      	cmp	r3, #5
 800990c:	d10c      	bne.n	8009928 <HAL_RCC_OscConfig+0x30c>
 800990e:	4b5f      	ldr	r3, [pc, #380]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 8009910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009912:	4a5e      	ldr	r2, [pc, #376]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 8009914:	f043 0304 	orr.w	r3, r3, #4
 8009918:	6713      	str	r3, [r2, #112]	; 0x70
 800991a:	4b5c      	ldr	r3, [pc, #368]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 800991c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991e:	4a5b      	ldr	r2, [pc, #364]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 8009920:	f043 0301 	orr.w	r3, r3, #1
 8009924:	6713      	str	r3, [r2, #112]	; 0x70
 8009926:	e00b      	b.n	8009940 <HAL_RCC_OscConfig+0x324>
 8009928:	4b58      	ldr	r3, [pc, #352]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 800992a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992c:	4a57      	ldr	r2, [pc, #348]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 800992e:	f023 0301 	bic.w	r3, r3, #1
 8009932:	6713      	str	r3, [r2, #112]	; 0x70
 8009934:	4b55      	ldr	r3, [pc, #340]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 8009936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009938:	4a54      	ldr	r2, [pc, #336]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 800993a:	f023 0304 	bic.w	r3, r3, #4
 800993e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d015      	beq.n	8009974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009948:	f7fb feb8 	bl	80056bc <HAL_GetTick>
 800994c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800994e:	e00a      	b.n	8009966 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009950:	f7fb feb4 	bl	80056bc <HAL_GetTick>
 8009954:	4602      	mov	r2, r0
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	f241 3288 	movw	r2, #5000	; 0x1388
 800995e:	4293      	cmp	r3, r2
 8009960:	d901      	bls.n	8009966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e0cb      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009966:	4b49      	ldr	r3, [pc, #292]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 8009968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0ee      	beq.n	8009950 <HAL_RCC_OscConfig+0x334>
 8009972:	e014      	b.n	800999e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009974:	f7fb fea2 	bl	80056bc <HAL_GetTick>
 8009978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800997a:	e00a      	b.n	8009992 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800997c:	f7fb fe9e 	bl	80056bc <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	f241 3288 	movw	r2, #5000	; 0x1388
 800998a:	4293      	cmp	r3, r2
 800998c:	d901      	bls.n	8009992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e0b5      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009992:	4b3e      	ldr	r3, [pc, #248]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 8009994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1ee      	bne.n	800997c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d105      	bne.n	80099b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099a4:	4b39      	ldr	r3, [pc, #228]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 80099a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a8:	4a38      	ldr	r2, [pc, #224]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 80099aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 80a1 	beq.w	8009afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80099ba:	4b34      	ldr	r3, [pc, #208]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f003 030c 	and.w	r3, r3, #12
 80099c2:	2b08      	cmp	r3, #8
 80099c4:	d05c      	beq.n	8009a80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d141      	bne.n	8009a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099ce:	4b31      	ldr	r3, [pc, #196]	; (8009a94 <HAL_RCC_OscConfig+0x478>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099d4:	f7fb fe72 	bl	80056bc <HAL_GetTick>
 80099d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099da:	e008      	b.n	80099ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099dc:	f7fb fe6e 	bl	80056bc <HAL_GetTick>
 80099e0:	4602      	mov	r2, r0
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d901      	bls.n	80099ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e087      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099ee:	4b27      	ldr	r3, [pc, #156]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1f0      	bne.n	80099dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	69da      	ldr	r2, [r3, #28]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	431a      	orrs	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	019b      	lsls	r3, r3, #6
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a10:	085b      	lsrs	r3, r3, #1
 8009a12:	3b01      	subs	r3, #1
 8009a14:	041b      	lsls	r3, r3, #16
 8009a16:	431a      	orrs	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1c:	061b      	lsls	r3, r3, #24
 8009a1e:	491b      	ldr	r1, [pc, #108]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a24:	4b1b      	ldr	r3, [pc, #108]	; (8009a94 <HAL_RCC_OscConfig+0x478>)
 8009a26:	2201      	movs	r2, #1
 8009a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a2a:	f7fb fe47 	bl	80056bc <HAL_GetTick>
 8009a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a30:	e008      	b.n	8009a44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a32:	f7fb fe43 	bl	80056bc <HAL_GetTick>
 8009a36:	4602      	mov	r2, r0
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d901      	bls.n	8009a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009a40:	2303      	movs	r3, #3
 8009a42:	e05c      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a44:	4b11      	ldr	r3, [pc, #68]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d0f0      	beq.n	8009a32 <HAL_RCC_OscConfig+0x416>
 8009a50:	e054      	b.n	8009afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a52:	4b10      	ldr	r3, [pc, #64]	; (8009a94 <HAL_RCC_OscConfig+0x478>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a58:	f7fb fe30 	bl	80056bc <HAL_GetTick>
 8009a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a5e:	e008      	b.n	8009a72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a60:	f7fb fe2c 	bl	80056bc <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d901      	bls.n	8009a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e045      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a72:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <HAL_RCC_OscConfig+0x470>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1f0      	bne.n	8009a60 <HAL_RCC_OscConfig+0x444>
 8009a7e:	e03d      	b.n	8009afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d107      	bne.n	8009a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e038      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
 8009a8c:	40023800 	.word	0x40023800
 8009a90:	40007000 	.word	0x40007000
 8009a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009a98:	4b1b      	ldr	r3, [pc, #108]	; (8009b08 <HAL_RCC_OscConfig+0x4ec>)
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d028      	beq.n	8009af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d121      	bne.n	8009af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d11a      	bne.n	8009af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009ac8:	4013      	ands	r3, r2
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d111      	bne.n	8009af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ade:	085b      	lsrs	r3, r3, #1
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d107      	bne.n	8009af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d001      	beq.n	8009afc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e000      	b.n	8009afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3718      	adds	r7, #24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	40023800 	.word	0x40023800

08009b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d101      	bne.n	8009b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e0cc      	b.n	8009cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b20:	4b68      	ldr	r3, [pc, #416]	; (8009cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 0307 	and.w	r3, r3, #7
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d90c      	bls.n	8009b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b2e:	4b65      	ldr	r3, [pc, #404]	; (8009cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	b2d2      	uxtb	r2, r2
 8009b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b36:	4b63      	ldr	r3, [pc, #396]	; (8009cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d001      	beq.n	8009b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e0b8      	b.n	8009cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0302 	and.w	r3, r3, #2
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d020      	beq.n	8009b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0304 	and.w	r3, r3, #4
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d005      	beq.n	8009b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b60:	4b59      	ldr	r3, [pc, #356]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	4a58      	ldr	r2, [pc, #352]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0308 	and.w	r3, r3, #8
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d005      	beq.n	8009b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b78:	4b53      	ldr	r3, [pc, #332]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	4a52      	ldr	r2, [pc, #328]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b84:	4b50      	ldr	r3, [pc, #320]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	494d      	ldr	r1, [pc, #308]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b92:	4313      	orrs	r3, r2
 8009b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d044      	beq.n	8009c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d107      	bne.n	8009bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009baa:	4b47      	ldr	r3, [pc, #284]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d119      	bne.n	8009bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e07f      	b.n	8009cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d003      	beq.n	8009bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d107      	bne.n	8009bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bca:	4b3f      	ldr	r3, [pc, #252]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d109      	bne.n	8009bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e06f      	b.n	8009cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bda:	4b3b      	ldr	r3, [pc, #236]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 0302 	and.w	r3, r3, #2
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e067      	b.n	8009cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009bea:	4b37      	ldr	r3, [pc, #220]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f023 0203 	bic.w	r2, r3, #3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	4934      	ldr	r1, [pc, #208]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009bfc:	f7fb fd5e 	bl	80056bc <HAL_GetTick>
 8009c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c02:	e00a      	b.n	8009c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c04:	f7fb fd5a 	bl	80056bc <HAL_GetTick>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d901      	bls.n	8009c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e04f      	b.n	8009cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c1a:	4b2b      	ldr	r3, [pc, #172]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f003 020c 	and.w	r2, r3, #12
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d1eb      	bne.n	8009c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c2c:	4b25      	ldr	r3, [pc, #148]	; (8009cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0307 	and.w	r3, r3, #7
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d20c      	bcs.n	8009c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c3a:	4b22      	ldr	r3, [pc, #136]	; (8009cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	b2d2      	uxtb	r2, r2
 8009c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c42:	4b20      	ldr	r3, [pc, #128]	; (8009cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 0307 	and.w	r3, r3, #7
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d001      	beq.n	8009c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e032      	b.n	8009cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 0304 	and.w	r3, r3, #4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d008      	beq.n	8009c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c60:	4b19      	ldr	r3, [pc, #100]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	4916      	ldr	r1, [pc, #88]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 0308 	and.w	r3, r3, #8
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d009      	beq.n	8009c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c7e:	4b12      	ldr	r3, [pc, #72]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	490e      	ldr	r1, [pc, #56]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009c92:	f000 f821 	bl	8009cd8 <HAL_RCC_GetSysClockFreq>
 8009c96:	4602      	mov	r2, r0
 8009c98:	4b0b      	ldr	r3, [pc, #44]	; (8009cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	091b      	lsrs	r3, r3, #4
 8009c9e:	f003 030f 	and.w	r3, r3, #15
 8009ca2:	490a      	ldr	r1, [pc, #40]	; (8009ccc <HAL_RCC_ClockConfig+0x1c0>)
 8009ca4:	5ccb      	ldrb	r3, [r1, r3]
 8009ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8009caa:	4a09      	ldr	r2, [pc, #36]	; (8009cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8009cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009cae:	4b09      	ldr	r3, [pc, #36]	; (8009cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fb fcbe 	bl	8005634 <HAL_InitTick>

  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	40023c00 	.word	0x40023c00
 8009cc8:	40023800 	.word	0x40023800
 8009ccc:	08013fa0 	.word	0x08013fa0
 8009cd0:	20000004 	.word	0x20000004
 8009cd4:	20000008 	.word	0x20000008

08009cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cdc:	b090      	sub	sp, #64	; 0x40
 8009cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ce8:	2300      	movs	r3, #0
 8009cea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009cec:	2300      	movs	r3, #0
 8009cee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009cf0:	4b59      	ldr	r3, [pc, #356]	; (8009e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f003 030c 	and.w	r3, r3, #12
 8009cf8:	2b08      	cmp	r3, #8
 8009cfa:	d00d      	beq.n	8009d18 <HAL_RCC_GetSysClockFreq+0x40>
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	f200 80a1 	bhi.w	8009e44 <HAL_RCC_GetSysClockFreq+0x16c>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <HAL_RCC_GetSysClockFreq+0x34>
 8009d06:	2b04      	cmp	r3, #4
 8009d08:	d003      	beq.n	8009d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8009d0a:	e09b      	b.n	8009e44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d0c:	4b53      	ldr	r3, [pc, #332]	; (8009e5c <HAL_RCC_GetSysClockFreq+0x184>)
 8009d0e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8009d10:	e09b      	b.n	8009e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d12:	4b53      	ldr	r3, [pc, #332]	; (8009e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8009d14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009d16:	e098      	b.n	8009e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d18:	4b4f      	ldr	r3, [pc, #316]	; (8009e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d22:	4b4d      	ldr	r3, [pc, #308]	; (8009e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d028      	beq.n	8009d80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d2e:	4b4a      	ldr	r3, [pc, #296]	; (8009e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	099b      	lsrs	r3, r3, #6
 8009d34:	2200      	movs	r2, #0
 8009d36:	623b      	str	r3, [r7, #32]
 8009d38:	627a      	str	r2, [r7, #36]	; 0x24
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009d40:	2100      	movs	r1, #0
 8009d42:	4b47      	ldr	r3, [pc, #284]	; (8009e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8009d44:	fb03 f201 	mul.w	r2, r3, r1
 8009d48:	2300      	movs	r3, #0
 8009d4a:	fb00 f303 	mul.w	r3, r0, r3
 8009d4e:	4413      	add	r3, r2
 8009d50:	4a43      	ldr	r2, [pc, #268]	; (8009e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8009d52:	fba0 1202 	umull	r1, r2, r0, r2
 8009d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d58:	460a      	mov	r2, r1
 8009d5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8009d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d5e:	4413      	add	r3, r2
 8009d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d64:	2200      	movs	r2, #0
 8009d66:	61bb      	str	r3, [r7, #24]
 8009d68:	61fa      	str	r2, [r7, #28]
 8009d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009d72:	f7f6 ff89 	bl	8000c88 <__aeabi_uldivmod>
 8009d76:	4602      	mov	r2, r0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d7e:	e053      	b.n	8009e28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d80:	4b35      	ldr	r3, [pc, #212]	; (8009e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	099b      	lsrs	r3, r3, #6
 8009d86:	2200      	movs	r2, #0
 8009d88:	613b      	str	r3, [r7, #16]
 8009d8a:	617a      	str	r2, [r7, #20]
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009d92:	f04f 0b00 	mov.w	fp, #0
 8009d96:	4652      	mov	r2, sl
 8009d98:	465b      	mov	r3, fp
 8009d9a:	f04f 0000 	mov.w	r0, #0
 8009d9e:	f04f 0100 	mov.w	r1, #0
 8009da2:	0159      	lsls	r1, r3, #5
 8009da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009da8:	0150      	lsls	r0, r2, #5
 8009daa:	4602      	mov	r2, r0
 8009dac:	460b      	mov	r3, r1
 8009dae:	ebb2 080a 	subs.w	r8, r2, sl
 8009db2:	eb63 090b 	sbc.w	r9, r3, fp
 8009db6:	f04f 0200 	mov.w	r2, #0
 8009dba:	f04f 0300 	mov.w	r3, #0
 8009dbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009dc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009dc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009dca:	ebb2 0408 	subs.w	r4, r2, r8
 8009dce:	eb63 0509 	sbc.w	r5, r3, r9
 8009dd2:	f04f 0200 	mov.w	r2, #0
 8009dd6:	f04f 0300 	mov.w	r3, #0
 8009dda:	00eb      	lsls	r3, r5, #3
 8009ddc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009de0:	00e2      	lsls	r2, r4, #3
 8009de2:	4614      	mov	r4, r2
 8009de4:	461d      	mov	r5, r3
 8009de6:	eb14 030a 	adds.w	r3, r4, sl
 8009dea:	603b      	str	r3, [r7, #0]
 8009dec:	eb45 030b 	adc.w	r3, r5, fp
 8009df0:	607b      	str	r3, [r7, #4]
 8009df2:	f04f 0200 	mov.w	r2, #0
 8009df6:	f04f 0300 	mov.w	r3, #0
 8009dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009dfe:	4629      	mov	r1, r5
 8009e00:	028b      	lsls	r3, r1, #10
 8009e02:	4621      	mov	r1, r4
 8009e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009e08:	4621      	mov	r1, r4
 8009e0a:	028a      	lsls	r2, r1, #10
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e12:	2200      	movs	r2, #0
 8009e14:	60bb      	str	r3, [r7, #8]
 8009e16:	60fa      	str	r2, [r7, #12]
 8009e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e1c:	f7f6 ff34 	bl	8000c88 <__aeabi_uldivmod>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4613      	mov	r3, r2
 8009e26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009e28:	4b0b      	ldr	r3, [pc, #44]	; (8009e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	0c1b      	lsrs	r3, r3, #16
 8009e2e:	f003 0303 	and.w	r3, r3, #3
 8009e32:	3301      	adds	r3, #1
 8009e34:	005b      	lsls	r3, r3, #1
 8009e36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009e38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009e42:	e002      	b.n	8009e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e44:	4b05      	ldr	r3, [pc, #20]	; (8009e5c <HAL_RCC_GetSysClockFreq+0x184>)
 8009e46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3740      	adds	r7, #64	; 0x40
 8009e50:	46bd      	mov	sp, r7
 8009e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e56:	bf00      	nop
 8009e58:	40023800 	.word	0x40023800
 8009e5c:	00f42400 	.word	0x00f42400
 8009e60:	00b71b00 	.word	0x00b71b00

08009e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e64:	b480      	push	{r7}
 8009e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e68:	4b03      	ldr	r3, [pc, #12]	; (8009e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	20000004 	.word	0x20000004

08009e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d101      	bne.n	8009e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e07b      	b.n	8009f86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d108      	bne.n	8009ea8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e9e:	d009      	beq.n	8009eb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	61da      	str	r2, [r3, #28]
 8009ea6:	e005      	b.n	8009eb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7fa fc78 	bl	80047c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009eea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009efc:	431a      	orrs	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f06:	431a      	orrs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	f003 0302 	and.w	r3, r3, #2
 8009f10:	431a      	orrs	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f24:	431a      	orrs	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	69db      	ldr	r3, [r3, #28]
 8009f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f38:	ea42 0103 	orr.w	r1, r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	0c1b      	lsrs	r3, r3, #16
 8009f52:	f003 0104 	and.w	r1, r3, #4
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5a:	f003 0210 	and.w	r2, r3, #16
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	69da      	ldr	r2, [r3, #28]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
	...

08009f90 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
 8009f9c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d101      	bne.n	8009fb0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8009fac:	2302      	movs	r3, #2
 8009fae:	e0e3      	b.n	800a178 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009fbe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009fc6:	7dbb      	ldrb	r3, [r7, #22]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d00d      	beq.n	8009fe8 <HAL_SPI_TransmitReceive_DMA+0x58>
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fd2:	d106      	bne.n	8009fe2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d102      	bne.n	8009fe2 <HAL_SPI_TransmitReceive_DMA+0x52>
 8009fdc:	7dbb      	ldrb	r3, [r7, #22]
 8009fde:	2b04      	cmp	r3, #4
 8009fe0:	d002      	beq.n	8009fe8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009fe6:	e0c2      	b.n	800a16e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d005      	beq.n	8009ffa <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009ff4:	887b      	ldrh	r3, [r7, #2]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d102      	bne.n	800a000 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009ffe:	e0b6      	b.n	800a16e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b04      	cmp	r3, #4
 800a00a:	d003      	beq.n	800a014 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2205      	movs	r2, #5
 800a010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	887a      	ldrh	r2, [r7, #2]
 800a024:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	887a      	ldrh	r2, [r7, #2]
 800a02a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	887a      	ldrh	r2, [r7, #2]
 800a036:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	887a      	ldrh	r2, [r7, #2]
 800a03c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b04      	cmp	r3, #4
 800a054:	d108      	bne.n	800a068 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a05a:	4a49      	ldr	r2, [pc, #292]	; (800a180 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800a05c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a062:	4a48      	ldr	r2, [pc, #288]	; (800a184 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800a064:	63da      	str	r2, [r3, #60]	; 0x3c
 800a066:	e007      	b.n	800a078 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a06c:	4a46      	ldr	r2, [pc, #280]	; (800a188 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800a06e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a074:	4a45      	ldr	r2, [pc, #276]	; (800a18c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800a076:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a07c:	4a44      	ldr	r2, [pc, #272]	; (800a190 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800a07e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a084:	2200      	movs	r2, #0
 800a086:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	330c      	adds	r3, #12
 800a092:	4619      	mov	r1, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a098:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a09e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a0a0:	f7fd f98e 	bl	80073c0 <HAL_DMA_Start_IT>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00c      	beq.n	800a0c4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ae:	f043 0210 	orr.w	r2, r3, #16
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a0c2:	e054      	b.n	800a16e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f042 0201 	orr.w	r2, r2, #1
 800a0d2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0d8:	2200      	movs	r2, #0
 800a0da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	330c      	adds	r3, #12
 800a104:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a10a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a10c:	f7fd f958 	bl	80073c0 <HAL_DMA_Start_IT>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00c      	beq.n	800a130 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a11a:	f043 0210 	orr.w	r2, r3, #16
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a12e:	e01e      	b.n	800a16e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a13a:	2b40      	cmp	r3, #64	; 0x40
 800a13c:	d007      	beq.n	800a14e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a14c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f042 0220 	orr.w	r2, r2, #32
 800a15c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f042 0202 	orr.w	r2, r2, #2
 800a16c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a176:	7dfb      	ldrb	r3, [r7, #23]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	0800a51d 	.word	0x0800a51d
 800a184:	0800a3e5 	.word	0x0800a3e5
 800a188:	0800a539 	.word	0x0800a539
 800a18c:	0800a48d 	.word	0x0800a48d
 800a190:	0800a555 	.word	0x0800a555

0800a194 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b088      	sub	sp, #32
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	099b      	lsrs	r3, r3, #6
 800a1b0:	f003 0301 	and.w	r3, r3, #1
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10f      	bne.n	800a1d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00a      	beq.n	800a1d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	099b      	lsrs	r3, r3, #6
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d004      	beq.n	800a1d8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	4798      	blx	r3
    return;
 800a1d6:	e0d7      	b.n	800a388 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	085b      	lsrs	r3, r3, #1
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00a      	beq.n	800a1fa <HAL_SPI_IRQHandler+0x66>
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	09db      	lsrs	r3, r3, #7
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d004      	beq.n	800a1fa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	4798      	blx	r3
    return;
 800a1f8:	e0c6      	b.n	800a388 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	095b      	lsrs	r3, r3, #5
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10c      	bne.n	800a220 <HAL_SPI_IRQHandler+0x8c>
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	099b      	lsrs	r3, r3, #6
 800a20a:	f003 0301 	and.w	r3, r3, #1
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d106      	bne.n	800a220 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	0a1b      	lsrs	r3, r3, #8
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 80b4 	beq.w	800a388 <HAL_SPI_IRQHandler+0x1f4>
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	095b      	lsrs	r3, r3, #5
 800a224:	f003 0301 	and.w	r3, r3, #1
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 80ad 	beq.w	800a388 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	099b      	lsrs	r3, r3, #6
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	d023      	beq.n	800a282 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a240:	b2db      	uxtb	r3, r3
 800a242:	2b03      	cmp	r3, #3
 800a244:	d011      	beq.n	800a26a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a24a:	f043 0204 	orr.w	r2, r3, #4
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a252:	2300      	movs	r3, #0
 800a254:	617b      	str	r3, [r7, #20]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	617b      	str	r3, [r7, #20]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	617b      	str	r3, [r7, #20]
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	e00b      	b.n	800a282 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a26a:	2300      	movs	r3, #0
 800a26c:	613b      	str	r3, [r7, #16]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	613b      	str	r3, [r7, #16]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	613b      	str	r3, [r7, #16]
 800a27e:	693b      	ldr	r3, [r7, #16]
        return;
 800a280:	e082      	b.n	800a388 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	095b      	lsrs	r3, r3, #5
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d014      	beq.n	800a2b8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a292:	f043 0201 	orr.w	r2, r3, #1
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a29a:	2300      	movs	r3, #0
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	60fb      	str	r3, [r7, #12]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	0a1b      	lsrs	r3, r3, #8
 800a2bc:	f003 0301 	and.w	r3, r3, #1
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00c      	beq.n	800a2de <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c8:	f043 0208 	orr.w	r2, r3, #8
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	60bb      	str	r3, [r7, #8]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	60bb      	str	r3, [r7, #8]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d04f      	beq.n	800a386 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a2f4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	f003 0302 	and.w	r3, r3, #2
 800a304:	2b00      	cmp	r3, #0
 800a306:	d104      	bne.n	800a312 <HAL_SPI_IRQHandler+0x17e>
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d034      	beq.n	800a37c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f022 0203 	bic.w	r2, r2, #3
 800a320:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a326:	2b00      	cmp	r3, #0
 800a328:	d011      	beq.n	800a34e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a32e:	4a18      	ldr	r2, [pc, #96]	; (800a390 <HAL_SPI_IRQHandler+0x1fc>)
 800a330:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a336:	4618      	mov	r0, r3
 800a338:	f7fd f89a 	bl	8007470 <HAL_DMA_Abort_IT>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d005      	beq.n	800a34e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a346:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a352:	2b00      	cmp	r3, #0
 800a354:	d016      	beq.n	800a384 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a35a:	4a0d      	ldr	r2, [pc, #52]	; (800a390 <HAL_SPI_IRQHandler+0x1fc>)
 800a35c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a362:	4618      	mov	r0, r3
 800a364:	f7fd f884 	bl	8007470 <HAL_DMA_Abort_IT>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00a      	beq.n	800a384 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a372:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a37a:	e003      	b.n	800a384 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f827 	bl	800a3d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a382:	e000      	b.n	800a386 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a384:	bf00      	nop
    return;
 800a386:	bf00      	nop
  }
}
 800a388:	3720      	adds	r7, #32
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	0800a595 	.word	0x0800a595

0800a394 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3f2:	f7fb f963 	bl	80056bc <HAL_GetTick>
 800a3f6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a406:	d03b      	beq.n	800a480 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	685a      	ldr	r2, [r3, #4]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f022 0220 	bic.w	r2, r2, #32
 800a416:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10d      	bne.n	800a43c <SPI_DMAReceiveCplt+0x58>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a428:	d108      	bne.n	800a43c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f022 0203 	bic.w	r2, r2, #3
 800a438:	605a      	str	r2, [r3, #4]
 800a43a:	e007      	b.n	800a44c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f022 0201 	bic.w	r2, r2, #1
 800a44a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	2164      	movs	r1, #100	; 0x64
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 f93b 	bl	800a6cc <SPI_EndRxTransaction>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2220      	movs	r2, #32
 800a460:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a474:	2b00      	cmp	r3, #0
 800a476:	d003      	beq.n	800a480 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f7ff ffa9 	bl	800a3d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a47e:	e002      	b.n	800a486 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f7ff ff87 	bl	800a394 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a49a:	f7fb f90f 	bl	80056bc <HAL_GetTick>
 800a49e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ae:	d02f      	beq.n	800a510 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f022 0220 	bic.w	r2, r2, #32
 800a4be:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	2164      	movs	r1, #100	; 0x64
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 f967 	bl	800a798 <SPI_EndRxTxTransaction>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d005      	beq.n	800a4dc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d4:	f043 0220 	orr.w	r2, r3, #32
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f022 0203 	bic.w	r2, r2, #3
 800a4ea:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a504:	2b00      	cmp	r3, #0
 800a506:	d003      	beq.n	800a510 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f7ff ff61 	bl	800a3d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a50e:	e002      	b.n	800a516 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f7f8 fe75 	bl	8003200 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a528:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f7ff ff3c 	bl	800a3a8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a530:	bf00      	nop
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a544:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f7ff ff38 	bl	800a3bc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a54c:	bf00      	nop
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a560:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f022 0203 	bic.w	r2, r2, #3
 800a570:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a576:	f043 0210 	orr.w	r2, r3, #16
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7ff ff22 	bl	800a3d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a58c:	bf00      	nop
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f7ff ff0e 	bl	800a3d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a5b4:	bf00      	nop
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	603b      	str	r3, [r7, #0]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a5cc:	f7fb f876 	bl	80056bc <HAL_GetTick>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d4:	1a9b      	subs	r3, r3, r2
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	4413      	add	r3, r2
 800a5da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a5dc:	f7fb f86e 	bl	80056bc <HAL_GetTick>
 800a5e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a5e2:	4b39      	ldr	r3, [pc, #228]	; (800a6c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	015b      	lsls	r3, r3, #5
 800a5e8:	0d1b      	lsrs	r3, r3, #20
 800a5ea:	69fa      	ldr	r2, [r7, #28]
 800a5ec:	fb02 f303 	mul.w	r3, r2, r3
 800a5f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5f2:	e054      	b.n	800a69e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5fa:	d050      	beq.n	800a69e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5fc:	f7fb f85e 	bl	80056bc <HAL_GetTick>
 800a600:	4602      	mov	r2, r0
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	69fa      	ldr	r2, [r7, #28]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d902      	bls.n	800a612 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d13d      	bne.n	800a68e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a620:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a62a:	d111      	bne.n	800a650 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a634:	d004      	beq.n	800a640 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a63e:	d107      	bne.n	800a650 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a64e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a658:	d10f      	bne.n	800a67a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a678:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e017      	b.n	800a6be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a694:	2300      	movs	r3, #0
 800a696:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	3b01      	subs	r3, #1
 800a69c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	689a      	ldr	r2, [r3, #8]
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	bf0c      	ite	eq
 800a6ae:	2301      	moveq	r3, #1
 800a6b0:	2300      	movne	r3, #0
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	79fb      	ldrb	r3, [r7, #7]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d19b      	bne.n	800a5f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000004 	.word	0x20000004

0800a6cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af02      	add	r7, sp, #8
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6e0:	d111      	bne.n	800a706 <SPI_EndRxTransaction+0x3a>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6ea:	d004      	beq.n	800a6f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6f4:	d107      	bne.n	800a706 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a704:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a70e:	d12a      	bne.n	800a766 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a718:	d012      	beq.n	800a740 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2200      	movs	r2, #0
 800a722:	2180      	movs	r1, #128	; 0x80
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f7ff ff49 	bl	800a5bc <SPI_WaitFlagStateUntilTimeout>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d02d      	beq.n	800a78c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a734:	f043 0220 	orr.w	r2, r3, #32
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a73c:	2303      	movs	r3, #3
 800a73e:	e026      	b.n	800a78e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	2200      	movs	r2, #0
 800a748:	2101      	movs	r1, #1
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7ff ff36 	bl	800a5bc <SPI_WaitFlagStateUntilTimeout>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d01a      	beq.n	800a78c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75a:	f043 0220 	orr.w	r2, r3, #32
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e013      	b.n	800a78e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2200      	movs	r2, #0
 800a76e:	2101      	movs	r1, #1
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f7ff ff23 	bl	800a5bc <SPI_WaitFlagStateUntilTimeout>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d007      	beq.n	800a78c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a780:	f043 0220 	orr.w	r2, r3, #32
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a788:	2303      	movs	r3, #3
 800a78a:	e000      	b.n	800a78e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af02      	add	r7, sp, #8
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a7a4:	4b1b      	ldr	r3, [pc, #108]	; (800a814 <SPI_EndRxTxTransaction+0x7c>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a1b      	ldr	r2, [pc, #108]	; (800a818 <SPI_EndRxTxTransaction+0x80>)
 800a7aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ae:	0d5b      	lsrs	r3, r3, #21
 800a7b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7b4:	fb02 f303 	mul.w	r3, r2, r3
 800a7b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7c2:	d112      	bne.n	800a7ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	2180      	movs	r1, #128	; 0x80
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f7ff fef4 	bl	800a5bc <SPI_WaitFlagStateUntilTimeout>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d016      	beq.n	800a808 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7de:	f043 0220 	orr.w	r2, r3, #32
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a7e6:	2303      	movs	r3, #3
 800a7e8:	e00f      	b.n	800a80a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00a      	beq.n	800a806 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a800:	2b80      	cmp	r3, #128	; 0x80
 800a802:	d0f2      	beq.n	800a7ea <SPI_EndRxTxTransaction+0x52>
 800a804:	e000      	b.n	800a808 <SPI_EndRxTxTransaction+0x70>
        break;
 800a806:	bf00      	nop
  }

  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	20000004 	.word	0x20000004
 800a818:	165e9f81 	.word	0x165e9f81

0800a81c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d101      	bne.n	800a82e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	e041      	b.n	800a8b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b00      	cmp	r3, #0
 800a838:	d106      	bne.n	800a848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7fa f894 	bl	8004970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2202      	movs	r2, #2
 800a84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	3304      	adds	r3, #4
 800a858:	4619      	mov	r1, r3
 800a85a:	4610      	mov	r0, r2
 800a85c:	f000 fc70 	bl	800b140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
	...

0800a8bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d001      	beq.n	800a8d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e04e      	b.n	800a972 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68da      	ldr	r2, [r3, #12]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f042 0201 	orr.w	r2, r2, #1
 800a8ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a23      	ldr	r2, [pc, #140]	; (800a980 <HAL_TIM_Base_Start_IT+0xc4>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d022      	beq.n	800a93c <HAL_TIM_Base_Start_IT+0x80>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8fe:	d01d      	beq.n	800a93c <HAL_TIM_Base_Start_IT+0x80>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a1f      	ldr	r2, [pc, #124]	; (800a984 <HAL_TIM_Base_Start_IT+0xc8>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d018      	beq.n	800a93c <HAL_TIM_Base_Start_IT+0x80>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a1e      	ldr	r2, [pc, #120]	; (800a988 <HAL_TIM_Base_Start_IT+0xcc>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d013      	beq.n	800a93c <HAL_TIM_Base_Start_IT+0x80>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a1c      	ldr	r2, [pc, #112]	; (800a98c <HAL_TIM_Base_Start_IT+0xd0>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d00e      	beq.n	800a93c <HAL_TIM_Base_Start_IT+0x80>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a1b      	ldr	r2, [pc, #108]	; (800a990 <HAL_TIM_Base_Start_IT+0xd4>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d009      	beq.n	800a93c <HAL_TIM_Base_Start_IT+0x80>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a19      	ldr	r2, [pc, #100]	; (800a994 <HAL_TIM_Base_Start_IT+0xd8>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d004      	beq.n	800a93c <HAL_TIM_Base_Start_IT+0x80>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a18      	ldr	r2, [pc, #96]	; (800a998 <HAL_TIM_Base_Start_IT+0xdc>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d111      	bne.n	800a960 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	f003 0307 	and.w	r3, r3, #7
 800a946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2b06      	cmp	r3, #6
 800a94c:	d010      	beq.n	800a970 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f042 0201 	orr.w	r2, r2, #1
 800a95c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95e:	e007      	b.n	800a970 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f042 0201 	orr.w	r2, r2, #1
 800a96e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	40010000 	.word	0x40010000
 800a984:	40000400 	.word	0x40000400
 800a988:	40000800 	.word	0x40000800
 800a98c:	40000c00 	.word	0x40000c00
 800a990:	40010400 	.word	0x40010400
 800a994:	40014000 	.word	0x40014000
 800a998:	40001800 	.word	0x40001800

0800a99c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d101      	bne.n	800a9ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e041      	b.n	800aa32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d106      	bne.n	800a9c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f839 	bl	800aa3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	3304      	adds	r3, #4
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4610      	mov	r0, r2
 800a9dc:	f000 fbb0 	bl	800b140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b083      	sub	sp, #12
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aa42:	bf00      	nop
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
	...

0800aa50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d109      	bne.n	800aa74 <HAL_TIM_PWM_Start+0x24>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	bf14      	ite	ne
 800aa6c:	2301      	movne	r3, #1
 800aa6e:	2300      	moveq	r3, #0
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	e022      	b.n	800aaba <HAL_TIM_PWM_Start+0x6a>
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2b04      	cmp	r3, #4
 800aa78:	d109      	bne.n	800aa8e <HAL_TIM_PWM_Start+0x3e>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	bf14      	ite	ne
 800aa86:	2301      	movne	r3, #1
 800aa88:	2300      	moveq	r3, #0
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	e015      	b.n	800aaba <HAL_TIM_PWM_Start+0x6a>
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2b08      	cmp	r3, #8
 800aa92:	d109      	bne.n	800aaa8 <HAL_TIM_PWM_Start+0x58>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	bf14      	ite	ne
 800aaa0:	2301      	movne	r3, #1
 800aaa2:	2300      	moveq	r3, #0
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	e008      	b.n	800aaba <HAL_TIM_PWM_Start+0x6a>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	bf14      	ite	ne
 800aab4:	2301      	movne	r3, #1
 800aab6:	2300      	moveq	r3, #0
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e07c      	b.n	800abbc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d104      	bne.n	800aad2 <HAL_TIM_PWM_Start+0x82>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2202      	movs	r2, #2
 800aacc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aad0:	e013      	b.n	800aafa <HAL_TIM_PWM_Start+0xaa>
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2b04      	cmp	r3, #4
 800aad6:	d104      	bne.n	800aae2 <HAL_TIM_PWM_Start+0x92>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2202      	movs	r2, #2
 800aadc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aae0:	e00b      	b.n	800aafa <HAL_TIM_PWM_Start+0xaa>
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b08      	cmp	r3, #8
 800aae6:	d104      	bne.n	800aaf2 <HAL_TIM_PWM_Start+0xa2>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2202      	movs	r2, #2
 800aaec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aaf0:	e003      	b.n	800aafa <HAL_TIM_PWM_Start+0xaa>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2202      	movs	r2, #2
 800aaf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2201      	movs	r2, #1
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 fe7a 	bl	800b7fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a2d      	ldr	r2, [pc, #180]	; (800abc4 <HAL_TIM_PWM_Start+0x174>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d004      	beq.n	800ab1c <HAL_TIM_PWM_Start+0xcc>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a2c      	ldr	r2, [pc, #176]	; (800abc8 <HAL_TIM_PWM_Start+0x178>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d101      	bne.n	800ab20 <HAL_TIM_PWM_Start+0xd0>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e000      	b.n	800ab22 <HAL_TIM_PWM_Start+0xd2>
 800ab20:	2300      	movs	r3, #0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d007      	beq.n	800ab36 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a22      	ldr	r2, [pc, #136]	; (800abc4 <HAL_TIM_PWM_Start+0x174>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d022      	beq.n	800ab86 <HAL_TIM_PWM_Start+0x136>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab48:	d01d      	beq.n	800ab86 <HAL_TIM_PWM_Start+0x136>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a1f      	ldr	r2, [pc, #124]	; (800abcc <HAL_TIM_PWM_Start+0x17c>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d018      	beq.n	800ab86 <HAL_TIM_PWM_Start+0x136>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a1d      	ldr	r2, [pc, #116]	; (800abd0 <HAL_TIM_PWM_Start+0x180>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d013      	beq.n	800ab86 <HAL_TIM_PWM_Start+0x136>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a1c      	ldr	r2, [pc, #112]	; (800abd4 <HAL_TIM_PWM_Start+0x184>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d00e      	beq.n	800ab86 <HAL_TIM_PWM_Start+0x136>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a16      	ldr	r2, [pc, #88]	; (800abc8 <HAL_TIM_PWM_Start+0x178>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d009      	beq.n	800ab86 <HAL_TIM_PWM_Start+0x136>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a18      	ldr	r2, [pc, #96]	; (800abd8 <HAL_TIM_PWM_Start+0x188>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d004      	beq.n	800ab86 <HAL_TIM_PWM_Start+0x136>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a16      	ldr	r2, [pc, #88]	; (800abdc <HAL_TIM_PWM_Start+0x18c>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d111      	bne.n	800abaa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	f003 0307 	and.w	r3, r3, #7
 800ab90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2b06      	cmp	r3, #6
 800ab96:	d010      	beq.n	800abba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f042 0201 	orr.w	r2, r2, #1
 800aba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aba8:	e007      	b.n	800abba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f042 0201 	orr.w	r2, r2, #1
 800abb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	40010000 	.word	0x40010000
 800abc8:	40010400 	.word	0x40010400
 800abcc:	40000400 	.word	0x40000400
 800abd0:	40000800 	.word	0x40000800
 800abd4:	40000c00 	.word	0x40000c00
 800abd8:	40014000 	.word	0x40014000
 800abdc:	40001800 	.word	0x40001800

0800abe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	f003 0302 	and.w	r3, r3, #2
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d122      	bne.n	800ac3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	f003 0302 	and.w	r3, r3, #2
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d11b      	bne.n	800ac3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f06f 0202 	mvn.w	r2, #2
 800ac0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	699b      	ldr	r3, [r3, #24]
 800ac1a:	f003 0303 	and.w	r3, r3, #3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d003      	beq.n	800ac2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7f8 fa90 	bl	8003148 <HAL_TIM_IC_CaptureCallback>
 800ac28:	e005      	b.n	800ac36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fa69 	bl	800b102 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fa70 	bl	800b116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	f003 0304 	and.w	r3, r3, #4
 800ac46:	2b04      	cmp	r3, #4
 800ac48:	d122      	bne.n	800ac90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	f003 0304 	and.w	r3, r3, #4
 800ac54:	2b04      	cmp	r3, #4
 800ac56:	d11b      	bne.n	800ac90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f06f 0204 	mvn.w	r2, #4
 800ac60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2202      	movs	r2, #2
 800ac66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d003      	beq.n	800ac7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7f8 fa66 	bl	8003148 <HAL_TIM_IC_CaptureCallback>
 800ac7c:	e005      	b.n	800ac8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fa3f 	bl	800b102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fa46 	bl	800b116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	691b      	ldr	r3, [r3, #16]
 800ac96:	f003 0308 	and.w	r3, r3, #8
 800ac9a:	2b08      	cmp	r3, #8
 800ac9c:	d122      	bne.n	800ace4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	f003 0308 	and.w	r3, r3, #8
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d11b      	bne.n	800ace4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f06f 0208 	mvn.w	r2, #8
 800acb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2204      	movs	r2, #4
 800acba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	69db      	ldr	r3, [r3, #28]
 800acc2:	f003 0303 	and.w	r3, r3, #3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d003      	beq.n	800acd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7f8 fa3c 	bl	8003148 <HAL_TIM_IC_CaptureCallback>
 800acd0:	e005      	b.n	800acde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 fa15 	bl	800b102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fa1c 	bl	800b116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	f003 0310 	and.w	r3, r3, #16
 800acee:	2b10      	cmp	r3, #16
 800acf0:	d122      	bne.n	800ad38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	f003 0310 	and.w	r3, r3, #16
 800acfc:	2b10      	cmp	r3, #16
 800acfe:	d11b      	bne.n	800ad38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f06f 0210 	mvn.w	r2, #16
 800ad08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2208      	movs	r2, #8
 800ad0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d003      	beq.n	800ad26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7f8 fa12 	bl	8003148 <HAL_TIM_IC_CaptureCallback>
 800ad24:	e005      	b.n	800ad32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f9eb 	bl	800b102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 f9f2 	bl	800b116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d10e      	bne.n	800ad64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d107      	bne.n	800ad64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f06f 0201 	mvn.w	r2, #1
 800ad5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7f8 fa16 	bl	8003190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad6e:	2b80      	cmp	r3, #128	; 0x80
 800ad70:	d10e      	bne.n	800ad90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad7c:	2b80      	cmp	r3, #128	; 0x80
 800ad7e:	d107      	bne.n	800ad90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 ff7c 	bl	800bc88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9a:	2b40      	cmp	r3, #64	; 0x40
 800ad9c:	d10e      	bne.n	800adbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada8:	2b40      	cmp	r3, #64	; 0x40
 800adaa:	d107      	bne.n	800adbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800adb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f9b7 	bl	800b12a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	f003 0320 	and.w	r3, r3, #32
 800adc6:	2b20      	cmp	r3, #32
 800adc8:	d10e      	bne.n	800ade8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	f003 0320 	and.w	r3, r3, #32
 800add4:	2b20      	cmp	r3, #32
 800add6:	d107      	bne.n	800ade8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f06f 0220 	mvn.w	r2, #32
 800ade0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 ff46 	bl	800bc74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ade8:	bf00      	nop
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d101      	bne.n	800ae0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	e0ae      	b.n	800af6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2b0c      	cmp	r3, #12
 800ae1a:	f200 809f 	bhi.w	800af5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ae1e:	a201      	add	r2, pc, #4	; (adr r2, 800ae24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae24:	0800ae59 	.word	0x0800ae59
 800ae28:	0800af5d 	.word	0x0800af5d
 800ae2c:	0800af5d 	.word	0x0800af5d
 800ae30:	0800af5d 	.word	0x0800af5d
 800ae34:	0800ae99 	.word	0x0800ae99
 800ae38:	0800af5d 	.word	0x0800af5d
 800ae3c:	0800af5d 	.word	0x0800af5d
 800ae40:	0800af5d 	.word	0x0800af5d
 800ae44:	0800aedb 	.word	0x0800aedb
 800ae48:	0800af5d 	.word	0x0800af5d
 800ae4c:	0800af5d 	.word	0x0800af5d
 800ae50:	0800af5d 	.word	0x0800af5d
 800ae54:	0800af1b 	.word	0x0800af1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68b9      	ldr	r1, [r7, #8]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 fa0e 	bl	800b280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	699a      	ldr	r2, [r3, #24]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f042 0208 	orr.w	r2, r2, #8
 800ae72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	699a      	ldr	r2, [r3, #24]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f022 0204 	bic.w	r2, r2, #4
 800ae82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	6999      	ldr	r1, [r3, #24]
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	691a      	ldr	r2, [r3, #16]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	430a      	orrs	r2, r1
 800ae94:	619a      	str	r2, [r3, #24]
      break;
 800ae96:	e064      	b.n	800af62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68b9      	ldr	r1, [r7, #8]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 fa5e 	bl	800b360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	699a      	ldr	r2, [r3, #24]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aeb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	699a      	ldr	r2, [r3, #24]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6999      	ldr	r1, [r3, #24]
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	021a      	lsls	r2, r3, #8
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	430a      	orrs	r2, r1
 800aed6:	619a      	str	r2, [r3, #24]
      break;
 800aed8:	e043      	b.n	800af62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68b9      	ldr	r1, [r7, #8]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 fab3 	bl	800b44c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	69da      	ldr	r2, [r3, #28]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f042 0208 	orr.w	r2, r2, #8
 800aef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	69da      	ldr	r2, [r3, #28]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f022 0204 	bic.w	r2, r2, #4
 800af04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	69d9      	ldr	r1, [r3, #28]
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	691a      	ldr	r2, [r3, #16]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	430a      	orrs	r2, r1
 800af16:	61da      	str	r2, [r3, #28]
      break;
 800af18:	e023      	b.n	800af62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68b9      	ldr	r1, [r7, #8]
 800af20:	4618      	mov	r0, r3
 800af22:	f000 fb07 	bl	800b534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	69da      	ldr	r2, [r3, #28]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	69da      	ldr	r2, [r3, #28]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	69d9      	ldr	r1, [r3, #28]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	021a      	lsls	r2, r3, #8
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	430a      	orrs	r2, r1
 800af58:	61da      	str	r2, [r3, #28]
      break;
 800af5a:	e002      	b.n	800af62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	75fb      	strb	r3, [r7, #23]
      break;
 800af60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800af6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af7e:	2300      	movs	r3, #0
 800af80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d101      	bne.n	800af90 <HAL_TIM_ConfigClockSource+0x1c>
 800af8c:	2302      	movs	r3, #2
 800af8e:	e0b4      	b.n	800b0fa <HAL_TIM_ConfigClockSource+0x186>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2202      	movs	r2, #2
 800af9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800afae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afc8:	d03e      	beq.n	800b048 <HAL_TIM_ConfigClockSource+0xd4>
 800afca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afce:	f200 8087 	bhi.w	800b0e0 <HAL_TIM_ConfigClockSource+0x16c>
 800afd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afd6:	f000 8086 	beq.w	800b0e6 <HAL_TIM_ConfigClockSource+0x172>
 800afda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afde:	d87f      	bhi.n	800b0e0 <HAL_TIM_ConfigClockSource+0x16c>
 800afe0:	2b70      	cmp	r3, #112	; 0x70
 800afe2:	d01a      	beq.n	800b01a <HAL_TIM_ConfigClockSource+0xa6>
 800afe4:	2b70      	cmp	r3, #112	; 0x70
 800afe6:	d87b      	bhi.n	800b0e0 <HAL_TIM_ConfigClockSource+0x16c>
 800afe8:	2b60      	cmp	r3, #96	; 0x60
 800afea:	d050      	beq.n	800b08e <HAL_TIM_ConfigClockSource+0x11a>
 800afec:	2b60      	cmp	r3, #96	; 0x60
 800afee:	d877      	bhi.n	800b0e0 <HAL_TIM_ConfigClockSource+0x16c>
 800aff0:	2b50      	cmp	r3, #80	; 0x50
 800aff2:	d03c      	beq.n	800b06e <HAL_TIM_ConfigClockSource+0xfa>
 800aff4:	2b50      	cmp	r3, #80	; 0x50
 800aff6:	d873      	bhi.n	800b0e0 <HAL_TIM_ConfigClockSource+0x16c>
 800aff8:	2b40      	cmp	r3, #64	; 0x40
 800affa:	d058      	beq.n	800b0ae <HAL_TIM_ConfigClockSource+0x13a>
 800affc:	2b40      	cmp	r3, #64	; 0x40
 800affe:	d86f      	bhi.n	800b0e0 <HAL_TIM_ConfigClockSource+0x16c>
 800b000:	2b30      	cmp	r3, #48	; 0x30
 800b002:	d064      	beq.n	800b0ce <HAL_TIM_ConfigClockSource+0x15a>
 800b004:	2b30      	cmp	r3, #48	; 0x30
 800b006:	d86b      	bhi.n	800b0e0 <HAL_TIM_ConfigClockSource+0x16c>
 800b008:	2b20      	cmp	r3, #32
 800b00a:	d060      	beq.n	800b0ce <HAL_TIM_ConfigClockSource+0x15a>
 800b00c:	2b20      	cmp	r3, #32
 800b00e:	d867      	bhi.n	800b0e0 <HAL_TIM_ConfigClockSource+0x16c>
 800b010:	2b00      	cmp	r3, #0
 800b012:	d05c      	beq.n	800b0ce <HAL_TIM_ConfigClockSource+0x15a>
 800b014:	2b10      	cmp	r3, #16
 800b016:	d05a      	beq.n	800b0ce <HAL_TIM_ConfigClockSource+0x15a>
 800b018:	e062      	b.n	800b0e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6818      	ldr	r0, [r3, #0]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	6899      	ldr	r1, [r3, #8]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	685a      	ldr	r2, [r3, #4]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	f000 fbc7 	bl	800b7bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b03c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	609a      	str	r2, [r3, #8]
      break;
 800b046:	e04f      	b.n	800b0e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6818      	ldr	r0, [r3, #0]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	6899      	ldr	r1, [r3, #8]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	f000 fbb0 	bl	800b7bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	689a      	ldr	r2, [r3, #8]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b06a:	609a      	str	r2, [r3, #8]
      break;
 800b06c:	e03c      	b.n	800b0e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6818      	ldr	r0, [r3, #0]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	6859      	ldr	r1, [r3, #4]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	461a      	mov	r2, r3
 800b07c:	f000 fb24 	bl	800b6c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2150      	movs	r1, #80	; 0x50
 800b086:	4618      	mov	r0, r3
 800b088:	f000 fb7d 	bl	800b786 <TIM_ITRx_SetConfig>
      break;
 800b08c:	e02c      	b.n	800b0e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6818      	ldr	r0, [r3, #0]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	6859      	ldr	r1, [r3, #4]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	461a      	mov	r2, r3
 800b09c:	f000 fb43 	bl	800b726 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2160      	movs	r1, #96	; 0x60
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 fb6d 	bl	800b786 <TIM_ITRx_SetConfig>
      break;
 800b0ac:	e01c      	b.n	800b0e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6818      	ldr	r0, [r3, #0]
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	6859      	ldr	r1, [r3, #4]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	f000 fb04 	bl	800b6c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2140      	movs	r1, #64	; 0x40
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f000 fb5d 	bl	800b786 <TIM_ITRx_SetConfig>
      break;
 800b0cc:	e00c      	b.n	800b0e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	4610      	mov	r0, r2
 800b0da:	f000 fb54 	bl	800b786 <TIM_ITRx_SetConfig>
      break;
 800b0de:	e003      	b.n	800b0e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e4:	e000      	b.n	800b0e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b0e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b102:	b480      	push	{r7}
 800b104:	b083      	sub	sp, #12
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b10a:	bf00      	nop
 800b10c:	370c      	adds	r7, #12
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr

0800b116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b116:	b480      	push	{r7}
 800b118:	b083      	sub	sp, #12
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b11e:	bf00      	nop
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b12a:	b480      	push	{r7}
 800b12c:	b083      	sub	sp, #12
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b132:	bf00      	nop
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
	...

0800b140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a40      	ldr	r2, [pc, #256]	; (800b254 <TIM_Base_SetConfig+0x114>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d013      	beq.n	800b180 <TIM_Base_SetConfig+0x40>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b15e:	d00f      	beq.n	800b180 <TIM_Base_SetConfig+0x40>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a3d      	ldr	r2, [pc, #244]	; (800b258 <TIM_Base_SetConfig+0x118>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d00b      	beq.n	800b180 <TIM_Base_SetConfig+0x40>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a3c      	ldr	r2, [pc, #240]	; (800b25c <TIM_Base_SetConfig+0x11c>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d007      	beq.n	800b180 <TIM_Base_SetConfig+0x40>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a3b      	ldr	r2, [pc, #236]	; (800b260 <TIM_Base_SetConfig+0x120>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d003      	beq.n	800b180 <TIM_Base_SetConfig+0x40>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a3a      	ldr	r2, [pc, #232]	; (800b264 <TIM_Base_SetConfig+0x124>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d108      	bne.n	800b192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a2f      	ldr	r2, [pc, #188]	; (800b254 <TIM_Base_SetConfig+0x114>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d02b      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1a0:	d027      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4a2c      	ldr	r2, [pc, #176]	; (800b258 <TIM_Base_SetConfig+0x118>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d023      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a2b      	ldr	r2, [pc, #172]	; (800b25c <TIM_Base_SetConfig+0x11c>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d01f      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a2a      	ldr	r2, [pc, #168]	; (800b260 <TIM_Base_SetConfig+0x120>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d01b      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4a29      	ldr	r2, [pc, #164]	; (800b264 <TIM_Base_SetConfig+0x124>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d017      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4a28      	ldr	r2, [pc, #160]	; (800b268 <TIM_Base_SetConfig+0x128>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d013      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a27      	ldr	r2, [pc, #156]	; (800b26c <TIM_Base_SetConfig+0x12c>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d00f      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a26      	ldr	r2, [pc, #152]	; (800b270 <TIM_Base_SetConfig+0x130>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d00b      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a25      	ldr	r2, [pc, #148]	; (800b274 <TIM_Base_SetConfig+0x134>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d007      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a24      	ldr	r2, [pc, #144]	; (800b278 <TIM_Base_SetConfig+0x138>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d003      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a23      	ldr	r2, [pc, #140]	; (800b27c <TIM_Base_SetConfig+0x13c>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d108      	bne.n	800b204 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	4313      	orrs	r3, r2
 800b202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	695b      	ldr	r3, [r3, #20]
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	689a      	ldr	r2, [r3, #8]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a0a      	ldr	r2, [pc, #40]	; (800b254 <TIM_Base_SetConfig+0x114>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d003      	beq.n	800b238 <TIM_Base_SetConfig+0xf8>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a0c      	ldr	r2, [pc, #48]	; (800b264 <TIM_Base_SetConfig+0x124>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d103      	bne.n	800b240 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	691a      	ldr	r2, [r3, #16]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	615a      	str	r2, [r3, #20]
}
 800b246:	bf00      	nop
 800b248:	3714      	adds	r7, #20
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	40010000 	.word	0x40010000
 800b258:	40000400 	.word	0x40000400
 800b25c:	40000800 	.word	0x40000800
 800b260:	40000c00 	.word	0x40000c00
 800b264:	40010400 	.word	0x40010400
 800b268:	40014000 	.word	0x40014000
 800b26c:	40014400 	.word	0x40014400
 800b270:	40014800 	.word	0x40014800
 800b274:	40001800 	.word	0x40001800
 800b278:	40001c00 	.word	0x40001c00
 800b27c:	40002000 	.word	0x40002000

0800b280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	f023 0201 	bic.w	r2, r3, #1
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f023 0303 	bic.w	r3, r3, #3
 800b2b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f023 0302 	bic.w	r3, r3, #2
 800b2c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	697a      	ldr	r2, [r7, #20]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a20      	ldr	r2, [pc, #128]	; (800b358 <TIM_OC1_SetConfig+0xd8>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d003      	beq.n	800b2e4 <TIM_OC1_SetConfig+0x64>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a1f      	ldr	r2, [pc, #124]	; (800b35c <TIM_OC1_SetConfig+0xdc>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d10c      	bne.n	800b2fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	f023 0308 	bic.w	r3, r3, #8
 800b2ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f023 0304 	bic.w	r3, r3, #4
 800b2fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a15      	ldr	r2, [pc, #84]	; (800b358 <TIM_OC1_SetConfig+0xd8>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d003      	beq.n	800b30e <TIM_OC1_SetConfig+0x8e>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a14      	ldr	r2, [pc, #80]	; (800b35c <TIM_OC1_SetConfig+0xdc>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d111      	bne.n	800b332 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b31c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	695b      	ldr	r3, [r3, #20]
 800b322:	693a      	ldr	r2, [r7, #16]
 800b324:	4313      	orrs	r3, r2
 800b326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	699b      	ldr	r3, [r3, #24]
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	4313      	orrs	r3, r2
 800b330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	693a      	ldr	r2, [r7, #16]
 800b336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	697a      	ldr	r2, [r7, #20]
 800b34a:	621a      	str	r2, [r3, #32]
}
 800b34c:	bf00      	nop
 800b34e:	371c      	adds	r7, #28
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr
 800b358:	40010000 	.word	0x40010000
 800b35c:	40010400 	.word	0x40010400

0800b360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b360:	b480      	push	{r7}
 800b362:	b087      	sub	sp, #28
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a1b      	ldr	r3, [r3, #32]
 800b36e:	f023 0210 	bic.w	r2, r3, #16
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b38e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	021b      	lsls	r3, r3, #8
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	f023 0320 	bic.w	r3, r3, #32
 800b3aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	011b      	lsls	r3, r3, #4
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a22      	ldr	r2, [pc, #136]	; (800b444 <TIM_OC2_SetConfig+0xe4>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d003      	beq.n	800b3c8 <TIM_OC2_SetConfig+0x68>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a21      	ldr	r2, [pc, #132]	; (800b448 <TIM_OC2_SetConfig+0xe8>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d10d      	bne.n	800b3e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	011b      	lsls	r3, r3, #4
 800b3d6:	697a      	ldr	r2, [r7, #20]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a17      	ldr	r2, [pc, #92]	; (800b444 <TIM_OC2_SetConfig+0xe4>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d003      	beq.n	800b3f4 <TIM_OC2_SetConfig+0x94>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a16      	ldr	r2, [pc, #88]	; (800b448 <TIM_OC2_SetConfig+0xe8>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d113      	bne.n	800b41c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	695b      	ldr	r3, [r3, #20]
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	693a      	ldr	r2, [r7, #16]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	4313      	orrs	r3, r2
 800b41a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	693a      	ldr	r2, [r7, #16]
 800b420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	685a      	ldr	r2, [r3, #4]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	697a      	ldr	r2, [r7, #20]
 800b434:	621a      	str	r2, [r3, #32]
}
 800b436:	bf00      	nop
 800b438:	371c      	adds	r7, #28
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	40010000 	.word	0x40010000
 800b448:	40010400 	.word	0x40010400

0800b44c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b087      	sub	sp, #28
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a1b      	ldr	r3, [r3, #32]
 800b45a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a1b      	ldr	r3, [r3, #32]
 800b466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	69db      	ldr	r3, [r3, #28]
 800b472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b47a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f023 0303 	bic.w	r3, r3, #3
 800b482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	021b      	lsls	r3, r3, #8
 800b49c:	697a      	ldr	r2, [r7, #20]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a21      	ldr	r2, [pc, #132]	; (800b52c <TIM_OC3_SetConfig+0xe0>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d003      	beq.n	800b4b2 <TIM_OC3_SetConfig+0x66>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a20      	ldr	r2, [pc, #128]	; (800b530 <TIM_OC3_SetConfig+0xe4>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d10d      	bne.n	800b4ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	021b      	lsls	r3, r3, #8
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a16      	ldr	r2, [pc, #88]	; (800b52c <TIM_OC3_SetConfig+0xe0>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d003      	beq.n	800b4de <TIM_OC3_SetConfig+0x92>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a15      	ldr	r2, [pc, #84]	; (800b530 <TIM_OC3_SetConfig+0xe4>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d113      	bne.n	800b506 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b4ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	695b      	ldr	r3, [r3, #20]
 800b4f2:	011b      	lsls	r3, r3, #4
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	699b      	ldr	r3, [r3, #24]
 800b4fe:	011b      	lsls	r3, r3, #4
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	4313      	orrs	r3, r2
 800b504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	685a      	ldr	r2, [r3, #4]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	621a      	str	r2, [r3, #32]
}
 800b520:	bf00      	nop
 800b522:	371c      	adds	r7, #28
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	40010000 	.word	0x40010000
 800b530:	40010400 	.word	0x40010400

0800b534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b534:	b480      	push	{r7}
 800b536:	b087      	sub	sp, #28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a1b      	ldr	r3, [r3, #32]
 800b542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a1b      	ldr	r3, [r3, #32]
 800b54e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	69db      	ldr	r3, [r3, #28]
 800b55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b56a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	021b      	lsls	r3, r3, #8
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	4313      	orrs	r3, r2
 800b576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b57e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	031b      	lsls	r3, r3, #12
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	4313      	orrs	r3, r2
 800b58a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a12      	ldr	r2, [pc, #72]	; (800b5d8 <TIM_OC4_SetConfig+0xa4>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d003      	beq.n	800b59c <TIM_OC4_SetConfig+0x68>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a11      	ldr	r2, [pc, #68]	; (800b5dc <TIM_OC4_SetConfig+0xa8>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d109      	bne.n	800b5b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	695b      	ldr	r3, [r3, #20]
 800b5a8:	019b      	lsls	r3, r3, #6
 800b5aa:	697a      	ldr	r2, [r7, #20]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	685a      	ldr	r2, [r3, #4]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	621a      	str	r2, [r3, #32]
}
 800b5ca:	bf00      	nop
 800b5cc:	371c      	adds	r7, #28
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	40010000 	.word	0x40010000
 800b5dc:	40010400 	.word	0x40010400

0800b5e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b087      	sub	sp, #28
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
 800b5ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	f023 0201 	bic.w	r2, r3, #1
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	699b      	ldr	r3, [r3, #24]
 800b5fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6a1b      	ldr	r3, [r3, #32]
 800b604:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	4a28      	ldr	r2, [pc, #160]	; (800b6ac <TIM_TI1_SetConfig+0xcc>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d01b      	beq.n	800b646 <TIM_TI1_SetConfig+0x66>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b614:	d017      	beq.n	800b646 <TIM_TI1_SetConfig+0x66>
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	4a25      	ldr	r2, [pc, #148]	; (800b6b0 <TIM_TI1_SetConfig+0xd0>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d013      	beq.n	800b646 <TIM_TI1_SetConfig+0x66>
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	4a24      	ldr	r2, [pc, #144]	; (800b6b4 <TIM_TI1_SetConfig+0xd4>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d00f      	beq.n	800b646 <TIM_TI1_SetConfig+0x66>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	4a23      	ldr	r2, [pc, #140]	; (800b6b8 <TIM_TI1_SetConfig+0xd8>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d00b      	beq.n	800b646 <TIM_TI1_SetConfig+0x66>
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	4a22      	ldr	r2, [pc, #136]	; (800b6bc <TIM_TI1_SetConfig+0xdc>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d007      	beq.n	800b646 <TIM_TI1_SetConfig+0x66>
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	4a21      	ldr	r2, [pc, #132]	; (800b6c0 <TIM_TI1_SetConfig+0xe0>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d003      	beq.n	800b646 <TIM_TI1_SetConfig+0x66>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	4a20      	ldr	r2, [pc, #128]	; (800b6c4 <TIM_TI1_SetConfig+0xe4>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d101      	bne.n	800b64a <TIM_TI1_SetConfig+0x6a>
 800b646:	2301      	movs	r3, #1
 800b648:	e000      	b.n	800b64c <TIM_TI1_SetConfig+0x6c>
 800b64a:	2300      	movs	r3, #0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d008      	beq.n	800b662 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	f023 0303 	bic.w	r3, r3, #3
 800b656:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	617b      	str	r3, [r7, #20]
 800b660:	e003      	b.n	800b66a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	f043 0301 	orr.w	r3, r3, #1
 800b668:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	011b      	lsls	r3, r3, #4
 800b676:	b2db      	uxtb	r3, r3
 800b678:	697a      	ldr	r2, [r7, #20]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	f023 030a 	bic.w	r3, r3, #10
 800b684:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	f003 030a 	and.w	r3, r3, #10
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	4313      	orrs	r3, r2
 800b690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	693a      	ldr	r2, [r7, #16]
 800b69c:	621a      	str	r2, [r3, #32]
}
 800b69e:	bf00      	nop
 800b6a0:	371c      	adds	r7, #28
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	40010000 	.word	0x40010000
 800b6b0:	40000400 	.word	0x40000400
 800b6b4:	40000800 	.word	0x40000800
 800b6b8:	40000c00 	.word	0x40000c00
 800b6bc:	40010400 	.word	0x40010400
 800b6c0:	40014000 	.word	0x40014000
 800b6c4:	40001800 	.word	0x40001800

0800b6c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6a1b      	ldr	r3, [r3, #32]
 800b6d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6a1b      	ldr	r3, [r3, #32]
 800b6de:	f023 0201 	bic.w	r2, r3, #1
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	011b      	lsls	r3, r3, #4
 800b6f8:	693a      	ldr	r2, [r7, #16]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f023 030a 	bic.w	r3, r3, #10
 800b704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	621a      	str	r2, [r3, #32]
}
 800b71a:	bf00      	nop
 800b71c:	371c      	adds	r7, #28
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b726:	b480      	push	{r7}
 800b728:	b087      	sub	sp, #28
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	60f8      	str	r0, [r7, #12]
 800b72e:	60b9      	str	r1, [r7, #8]
 800b730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	f023 0210 	bic.w	r2, r3, #16
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	031b      	lsls	r3, r3, #12
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	4313      	orrs	r3, r2
 800b75a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b762:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	011b      	lsls	r3, r3, #4
 800b768:	693a      	ldr	r2, [r7, #16]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	697a      	ldr	r2, [r7, #20]
 800b772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	693a      	ldr	r2, [r7, #16]
 800b778:	621a      	str	r2, [r3, #32]
}
 800b77a:	bf00      	nop
 800b77c:	371c      	adds	r7, #28
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b786:	b480      	push	{r7}
 800b788:	b085      	sub	sp, #20
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b79c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	f043 0307 	orr.w	r3, r3, #7
 800b7a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	609a      	str	r2, [r3, #8]
}
 800b7b0:	bf00      	nop
 800b7b2:	3714      	adds	r7, #20
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b087      	sub	sp, #28
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
 800b7c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	021a      	lsls	r2, r3, #8
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	697a      	ldr	r2, [r7, #20]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	697a      	ldr	r2, [r7, #20]
 800b7ee:	609a      	str	r2, [r3, #8]
}
 800b7f0:	bf00      	nop
 800b7f2:	371c      	adds	r7, #28
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b087      	sub	sp, #28
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	f003 031f 	and.w	r3, r3, #31
 800b80e:	2201      	movs	r2, #1
 800b810:	fa02 f303 	lsl.w	r3, r2, r3
 800b814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6a1a      	ldr	r2, [r3, #32]
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	43db      	mvns	r3, r3
 800b81e:	401a      	ands	r2, r3
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6a1a      	ldr	r2, [r3, #32]
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	f003 031f 	and.w	r3, r3, #31
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	fa01 f303 	lsl.w	r3, r1, r3
 800b834:	431a      	orrs	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	621a      	str	r2, [r3, #32]
}
 800b83a:	bf00      	nop
 800b83c:	371c      	adds	r7, #28
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b08a      	sub	sp, #40	; 0x28
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	e09a      	b.n	800b990 <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b00      	cmp	r3, #0
 800b864:	d106      	bne.n	800b874 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 f892 	bl	800b998 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2202      	movs	r2, #2
 800b878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	3304      	adds	r3, #4
 800b884:	4619      	mov	r1, r3
 800b886:	4610      	mov	r0, r2
 800b888:	f7ff fc5a 	bl	800b140 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6818      	ldr	r0, [r3, #0]
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	6819      	ldr	r1, [r3, #0]
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	2203      	movs	r2, #3
 800b89a:	f7ff fea1 	bl	800b5e0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	699a      	ldr	r2, [r3, #24]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f022 020c 	bic.w	r2, r2, #12
 800b8ac:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	6999      	ldr	r1, [r3, #24]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	685a      	ldr	r2, [r3, #4]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	430a      	orrs	r2, r1
 800b8be:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	685a      	ldr	r2, [r3, #4]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b8ce:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	689a      	ldr	r2, [r3, #8]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b8de:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	689a      	ldr	r2, [r3, #8]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8ee:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	689a      	ldr	r2, [r3, #8]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f022 0207 	bic.w	r2, r2, #7
 800b8fe:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689a      	ldr	r2, [r3, #8]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f042 0204 	orr.w	r2, r2, #4
 800b90e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800b910:	2300      	movs	r3, #0
 800b912:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b914:	2300      	movs	r3, #0
 800b916:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800b918:	2370      	movs	r3, #112	; 0x70
 800b91a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b91c:	2300      	movs	r3, #0
 800b91e:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b920:	2300      	movs	r3, #0
 800b922:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b924:	2300      	movs	r3, #0
 800b926:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f107 020c 	add.w	r2, r7, #12
 800b936:	4611      	mov	r1, r2
 800b938:	4618      	mov	r0, r3
 800b93a:	f7ff fd11 	bl	800b360 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	685a      	ldr	r2, [r3, #4]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b94c:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	685a      	ldr	r2, [r3, #4]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800b95c:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2201      	movs	r2, #1
 800b96a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2201      	movs	r2, #1
 800b97a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2201      	movs	r2, #1
 800b98a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3728      	adds	r7, #40	; 0x28
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9ba:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b9c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9ca:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b9d2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9d4:	7bfb      	ldrb	r3, [r7, #15]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d108      	bne.n	800b9ec <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9da:	7bbb      	ldrb	r3, [r7, #14]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d105      	bne.n	800b9ec <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9e0:	7b7b      	ldrb	r3, [r7, #13]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d102      	bne.n	800b9ec <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b9e6:	7b3b      	ldrb	r3, [r7, #12]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d001      	beq.n	800b9f0 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e061      	b.n	800bab4 <HAL_TIMEx_HallSensor_Start_IT+0x108>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2202      	movs	r2, #2
 800b9f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2202      	movs	r2, #2
 800b9fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2202      	movs	r2, #2
 800ba04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68da      	ldr	r2, [r3, #12]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f042 0202 	orr.w	r2, r2, #2
 800ba1e:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2201      	movs	r2, #1
 800ba26:	2100      	movs	r1, #0
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff fee7 	bl	800b7fc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a22      	ldr	r2, [pc, #136]	; (800babc <HAL_TIMEx_HallSensor_Start_IT+0x110>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d022      	beq.n	800ba7e <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba40:	d01d      	beq.n	800ba7e <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a1e      	ldr	r2, [pc, #120]	; (800bac0 <HAL_TIMEx_HallSensor_Start_IT+0x114>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d018      	beq.n	800ba7e <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a1c      	ldr	r2, [pc, #112]	; (800bac4 <HAL_TIMEx_HallSensor_Start_IT+0x118>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d013      	beq.n	800ba7e <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a1b      	ldr	r2, [pc, #108]	; (800bac8 <HAL_TIMEx_HallSensor_Start_IT+0x11c>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d00e      	beq.n	800ba7e <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a19      	ldr	r2, [pc, #100]	; (800bacc <HAL_TIMEx_HallSensor_Start_IT+0x120>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d009      	beq.n	800ba7e <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a18      	ldr	r2, [pc, #96]	; (800bad0 <HAL_TIMEx_HallSensor_Start_IT+0x124>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d004      	beq.n	800ba7e <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a16      	ldr	r2, [pc, #88]	; (800bad4 <HAL_TIMEx_HallSensor_Start_IT+0x128>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d111      	bne.n	800baa2 <HAL_TIMEx_HallSensor_Start_IT+0xf6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	f003 0307 	and.w	r3, r3, #7
 800ba88:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	2b06      	cmp	r3, #6
 800ba8e:	d010      	beq.n	800bab2 <HAL_TIMEx_HallSensor_Start_IT+0x106>
    {
      __HAL_TIM_ENABLE(htim);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f042 0201 	orr.w	r2, r2, #1
 800ba9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baa0:	e007      	b.n	800bab2 <HAL_TIMEx_HallSensor_Start_IT+0x106>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f042 0201 	orr.w	r2, r2, #1
 800bab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	40010000 	.word	0x40010000
 800bac0:	40000400 	.word	0x40000400
 800bac4:	40000800 	.word	0x40000800
 800bac8:	40000c00 	.word	0x40000c00
 800bacc:	40010400 	.word	0x40010400
 800bad0:	40014000 	.word	0x40014000
 800bad4:	40001800 	.word	0x40001800

0800bad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d101      	bne.n	800baf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800baec:	2302      	movs	r3, #2
 800baee:	e05a      	b.n	800bba6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2202      	movs	r2, #2
 800bafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a21      	ldr	r2, [pc, #132]	; (800bbb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d022      	beq.n	800bb7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb3c:	d01d      	beq.n	800bb7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a1d      	ldr	r2, [pc, #116]	; (800bbb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d018      	beq.n	800bb7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a1b      	ldr	r2, [pc, #108]	; (800bbbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d013      	beq.n	800bb7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a1a      	ldr	r2, [pc, #104]	; (800bbc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d00e      	beq.n	800bb7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a18      	ldr	r2, [pc, #96]	; (800bbc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d009      	beq.n	800bb7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a17      	ldr	r2, [pc, #92]	; (800bbc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d004      	beq.n	800bb7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a15      	ldr	r2, [pc, #84]	; (800bbcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d10c      	bne.n	800bb94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3714      	adds	r7, #20
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	40010000 	.word	0x40010000
 800bbb8:	40000400 	.word	0x40000400
 800bbbc:	40000800 	.word	0x40000800
 800bbc0:	40000c00 	.word	0x40000c00
 800bbc4:	40010400 	.word	0x40010400
 800bbc8:	40014000 	.word	0x40014000
 800bbcc:	40001800 	.word	0x40001800

0800bbd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d101      	bne.n	800bbec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bbe8:	2302      	movs	r3, #2
 800bbea:	e03d      	b.n	800bc68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	4313      	orrs	r3, r2
 800bc46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	4313      	orrs	r3, r2
 800bc54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3714      	adds	r7, #20
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc7c:	bf00      	nop
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc90:	bf00      	nop
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc9c:	b084      	sub	sp, #16
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b084      	sub	sp, #16
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	f107 001c 	add.w	r0, r7, #28
 800bcaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d122      	bne.n	800bcfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bcc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bcdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d105      	bne.n	800bcee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f001 fbee 	bl	800d4d0 <USB_CoreReset>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	73fb      	strb	r3, [r7, #15]
 800bcf8:	e01a      	b.n	800bd30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f001 fbe2 	bl	800d4d0 <USB_CoreReset>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bd10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d106      	bne.n	800bd24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	639a      	str	r2, [r3, #56]	; 0x38
 800bd22:	e005      	b.n	800bd30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d10b      	bne.n	800bd4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	f043 0206 	orr.w	r2, r3, #6
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	f043 0220 	orr.w	r2, r3, #32
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bd4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd5a:	b004      	add	sp, #16
 800bd5c:	4770      	bx	lr
	...

0800bd60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b087      	sub	sp, #28
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bd6e:	79fb      	ldrb	r3, [r7, #7]
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d165      	bne.n	800be40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	4a41      	ldr	r2, [pc, #260]	; (800be7c <USB_SetTurnaroundTime+0x11c>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d906      	bls.n	800bd8a <USB_SetTurnaroundTime+0x2a>
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	4a40      	ldr	r2, [pc, #256]	; (800be80 <USB_SetTurnaroundTime+0x120>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d202      	bcs.n	800bd8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bd84:	230f      	movs	r3, #15
 800bd86:	617b      	str	r3, [r7, #20]
 800bd88:	e062      	b.n	800be50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	4a3c      	ldr	r2, [pc, #240]	; (800be80 <USB_SetTurnaroundTime+0x120>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d306      	bcc.n	800bda0 <USB_SetTurnaroundTime+0x40>
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	4a3b      	ldr	r2, [pc, #236]	; (800be84 <USB_SetTurnaroundTime+0x124>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d202      	bcs.n	800bda0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bd9a:	230e      	movs	r3, #14
 800bd9c:	617b      	str	r3, [r7, #20]
 800bd9e:	e057      	b.n	800be50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	4a38      	ldr	r2, [pc, #224]	; (800be84 <USB_SetTurnaroundTime+0x124>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d306      	bcc.n	800bdb6 <USB_SetTurnaroundTime+0x56>
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	4a37      	ldr	r2, [pc, #220]	; (800be88 <USB_SetTurnaroundTime+0x128>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d202      	bcs.n	800bdb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bdb0:	230d      	movs	r3, #13
 800bdb2:	617b      	str	r3, [r7, #20]
 800bdb4:	e04c      	b.n	800be50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	4a33      	ldr	r2, [pc, #204]	; (800be88 <USB_SetTurnaroundTime+0x128>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d306      	bcc.n	800bdcc <USB_SetTurnaroundTime+0x6c>
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	4a32      	ldr	r2, [pc, #200]	; (800be8c <USB_SetTurnaroundTime+0x12c>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d802      	bhi.n	800bdcc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bdc6:	230c      	movs	r3, #12
 800bdc8:	617b      	str	r3, [r7, #20]
 800bdca:	e041      	b.n	800be50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	4a2f      	ldr	r2, [pc, #188]	; (800be8c <USB_SetTurnaroundTime+0x12c>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d906      	bls.n	800bde2 <USB_SetTurnaroundTime+0x82>
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	4a2e      	ldr	r2, [pc, #184]	; (800be90 <USB_SetTurnaroundTime+0x130>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d802      	bhi.n	800bde2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bddc:	230b      	movs	r3, #11
 800bdde:	617b      	str	r3, [r7, #20]
 800bde0:	e036      	b.n	800be50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	4a2a      	ldr	r2, [pc, #168]	; (800be90 <USB_SetTurnaroundTime+0x130>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d906      	bls.n	800bdf8 <USB_SetTurnaroundTime+0x98>
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	4a29      	ldr	r2, [pc, #164]	; (800be94 <USB_SetTurnaroundTime+0x134>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d802      	bhi.n	800bdf8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bdf2:	230a      	movs	r3, #10
 800bdf4:	617b      	str	r3, [r7, #20]
 800bdf6:	e02b      	b.n	800be50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	4a26      	ldr	r2, [pc, #152]	; (800be94 <USB_SetTurnaroundTime+0x134>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d906      	bls.n	800be0e <USB_SetTurnaroundTime+0xae>
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	4a25      	ldr	r2, [pc, #148]	; (800be98 <USB_SetTurnaroundTime+0x138>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d202      	bcs.n	800be0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800be08:	2309      	movs	r3, #9
 800be0a:	617b      	str	r3, [r7, #20]
 800be0c:	e020      	b.n	800be50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	4a21      	ldr	r2, [pc, #132]	; (800be98 <USB_SetTurnaroundTime+0x138>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d306      	bcc.n	800be24 <USB_SetTurnaroundTime+0xc4>
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	4a20      	ldr	r2, [pc, #128]	; (800be9c <USB_SetTurnaroundTime+0x13c>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d802      	bhi.n	800be24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800be1e:	2308      	movs	r3, #8
 800be20:	617b      	str	r3, [r7, #20]
 800be22:	e015      	b.n	800be50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	4a1d      	ldr	r2, [pc, #116]	; (800be9c <USB_SetTurnaroundTime+0x13c>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d906      	bls.n	800be3a <USB_SetTurnaroundTime+0xda>
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	4a1c      	ldr	r2, [pc, #112]	; (800bea0 <USB_SetTurnaroundTime+0x140>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d202      	bcs.n	800be3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800be34:	2307      	movs	r3, #7
 800be36:	617b      	str	r3, [r7, #20]
 800be38:	e00a      	b.n	800be50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800be3a:	2306      	movs	r3, #6
 800be3c:	617b      	str	r3, [r7, #20]
 800be3e:	e007      	b.n	800be50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800be40:	79fb      	ldrb	r3, [r7, #7]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d102      	bne.n	800be4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800be46:	2309      	movs	r3, #9
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	e001      	b.n	800be50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800be4c:	2309      	movs	r3, #9
 800be4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	68da      	ldr	r2, [r3, #12]
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	029b      	lsls	r3, r3, #10
 800be64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800be68:	431a      	orrs	r2, r3
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	371c      	adds	r7, #28
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	00d8acbf 	.word	0x00d8acbf
 800be80:	00e4e1c0 	.word	0x00e4e1c0
 800be84:	00f42400 	.word	0x00f42400
 800be88:	01067380 	.word	0x01067380
 800be8c:	011a499f 	.word	0x011a499f
 800be90:	01312cff 	.word	0x01312cff
 800be94:	014ca43f 	.word	0x014ca43f
 800be98:	016e3600 	.word	0x016e3600
 800be9c:	01a6ab1f 	.word	0x01a6ab1f
 800bea0:	01e84800 	.word	0x01e84800

0800bea4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	f043 0201 	orr.w	r2, r3, #1
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bec6:	b480      	push	{r7}
 800bec8:	b083      	sub	sp, #12
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	f023 0201 	bic.w	r2, r3, #1
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	460b      	mov	r3, r1
 800bef2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bef4:	2300      	movs	r3, #0
 800bef6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf04:	78fb      	ldrb	r3, [r7, #3]
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d115      	bne.n	800bf36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bf16:	2001      	movs	r0, #1
 800bf18:	f7f9 fbdc 	bl	80056d4 <HAL_Delay>
      ms++;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f001 fa45 	bl	800d3b2 <USB_GetMode>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d01e      	beq.n	800bf6c <USB_SetCurrentMode+0x84>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2b31      	cmp	r3, #49	; 0x31
 800bf32:	d9f0      	bls.n	800bf16 <USB_SetCurrentMode+0x2e>
 800bf34:	e01a      	b.n	800bf6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bf36:	78fb      	ldrb	r3, [r7, #3]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d115      	bne.n	800bf68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bf48:	2001      	movs	r0, #1
 800bf4a:	f7f9 fbc3 	bl	80056d4 <HAL_Delay>
      ms++;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	3301      	adds	r3, #1
 800bf52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f001 fa2c 	bl	800d3b2 <USB_GetMode>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d005      	beq.n	800bf6c <USB_SetCurrentMode+0x84>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2b31      	cmp	r3, #49	; 0x31
 800bf64:	d9f0      	bls.n	800bf48 <USB_SetCurrentMode+0x60>
 800bf66:	e001      	b.n	800bf6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e005      	b.n	800bf78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2b32      	cmp	r3, #50	; 0x32
 800bf70:	d101      	bne.n	800bf76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	e000      	b.n	800bf78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf80:	b084      	sub	sp, #16
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b086      	sub	sp, #24
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bf8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bf92:	2300      	movs	r3, #0
 800bf94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	613b      	str	r3, [r7, #16]
 800bf9e:	e009      	b.n	800bfb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	3340      	adds	r3, #64	; 0x40
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	4413      	add	r3, r2
 800bfaa:	2200      	movs	r2, #0
 800bfac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	613b      	str	r3, [r7, #16]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	2b0e      	cmp	r3, #14
 800bfb8:	d9f2      	bls.n	800bfa0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bfba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d11c      	bne.n	800bffa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfce:	f043 0302 	orr.w	r3, r3, #2
 800bfd2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	639a      	str	r2, [r3, #56]	; 0x38
 800bff8:	e00b      	b.n	800c012 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bffe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c00a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c018:	461a      	mov	r2, r3
 800c01a:	2300      	movs	r3, #0
 800c01c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c024:	4619      	mov	r1, r3
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c02c:	461a      	mov	r2, r3
 800c02e:	680b      	ldr	r3, [r1, #0]
 800c030:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c034:	2b01      	cmp	r3, #1
 800c036:	d10c      	bne.n	800c052 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d104      	bne.n	800c048 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c03e:	2100      	movs	r1, #0
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 f965 	bl	800c310 <USB_SetDevSpeed>
 800c046:	e008      	b.n	800c05a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c048:	2101      	movs	r1, #1
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f960 	bl	800c310 <USB_SetDevSpeed>
 800c050:	e003      	b.n	800c05a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c052:	2103      	movs	r1, #3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 f95b 	bl	800c310 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c05a:	2110      	movs	r1, #16
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 f8f3 	bl	800c248 <USB_FlushTxFifo>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 f91f 	bl	800c2b0 <USB_FlushRxFifo>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d001      	beq.n	800c07c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c082:	461a      	mov	r2, r3
 800c084:	2300      	movs	r3, #0
 800c086:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c08e:	461a      	mov	r2, r3
 800c090:	2300      	movs	r3, #0
 800c092:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c09a:	461a      	mov	r2, r3
 800c09c:	2300      	movs	r3, #0
 800c09e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	613b      	str	r3, [r7, #16]
 800c0a4:	e043      	b.n	800c12e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	015a      	lsls	r2, r3, #5
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0bc:	d118      	bne.n	800c0f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10a      	bne.n	800c0da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	015a      	lsls	r2, r3, #5
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c0d6:	6013      	str	r3, [r2, #0]
 800c0d8:	e013      	b.n	800c102 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	015a      	lsls	r2, r3, #5
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c0ec:	6013      	str	r3, [r2, #0]
 800c0ee:	e008      	b.n	800c102 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	015a      	lsls	r2, r3, #5
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	2300      	movs	r3, #0
 800c100:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	015a      	lsls	r2, r3, #5
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	4413      	add	r3, r2
 800c10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c10e:	461a      	mov	r2, r3
 800c110:	2300      	movs	r3, #0
 800c112:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	015a      	lsls	r2, r3, #5
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	4413      	add	r3, r2
 800c11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c120:	461a      	mov	r2, r3
 800c122:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c126:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	3301      	adds	r3, #1
 800c12c:	613b      	str	r3, [r7, #16]
 800c12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	429a      	cmp	r2, r3
 800c134:	d3b7      	bcc.n	800c0a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c136:	2300      	movs	r3, #0
 800c138:	613b      	str	r3, [r7, #16]
 800c13a:	e043      	b.n	800c1c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	015a      	lsls	r2, r3, #5
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	4413      	add	r3, r2
 800c144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c14e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c152:	d118      	bne.n	800c186 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10a      	bne.n	800c170 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	015a      	lsls	r2, r3, #5
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	4413      	add	r3, r2
 800c162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c166:	461a      	mov	r2, r3
 800c168:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c16c:	6013      	str	r3, [r2, #0]
 800c16e:	e013      	b.n	800c198 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	015a      	lsls	r2, r3, #5
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	4413      	add	r3, r2
 800c178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c17c:	461a      	mov	r2, r3
 800c17e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c182:	6013      	str	r3, [r2, #0]
 800c184:	e008      	b.n	800c198 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	015a      	lsls	r2, r3, #5
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	4413      	add	r3, r2
 800c18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c192:	461a      	mov	r2, r3
 800c194:	2300      	movs	r3, #0
 800c196:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	015a      	lsls	r2, r3, #5
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	4413      	add	r3, r2
 800c1a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	015a      	lsls	r2, r3, #5
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c1bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	613b      	str	r3, [r7, #16]
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	693a      	ldr	r2, [r7, #16]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d3b7      	bcc.n	800c13c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c1ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d105      	bne.n	800c200 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	699b      	ldr	r3, [r3, #24]
 800c1f8:	f043 0210 	orr.w	r2, r3, #16
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	699a      	ldr	r2, [r3, #24]
 800c204:	4b0f      	ldr	r3, [pc, #60]	; (800c244 <USB_DevInit+0x2c4>)
 800c206:	4313      	orrs	r3, r2
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d005      	beq.n	800c21e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	699b      	ldr	r3, [r3, #24]
 800c216:	f043 0208 	orr.w	r2, r3, #8
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c21e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c220:	2b01      	cmp	r3, #1
 800c222:	d107      	bne.n	800c234 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	699b      	ldr	r3, [r3, #24]
 800c228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c22c:	f043 0304 	orr.w	r3, r3, #4
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c234:	7dfb      	ldrb	r3, [r7, #23]
}
 800c236:	4618      	mov	r0, r3
 800c238:	3718      	adds	r7, #24
 800c23a:	46bd      	mov	sp, r7
 800c23c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c240:	b004      	add	sp, #16
 800c242:	4770      	bx	lr
 800c244:	803c3800 	.word	0x803c3800

0800c248 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c252:	2300      	movs	r3, #0
 800c254:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	3301      	adds	r3, #1
 800c25a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	4a13      	ldr	r2, [pc, #76]	; (800c2ac <USB_FlushTxFifo+0x64>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d901      	bls.n	800c268 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c264:	2303      	movs	r3, #3
 800c266:	e01b      	b.n	800c2a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	691b      	ldr	r3, [r3, #16]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	daf2      	bge.n	800c256 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c270:	2300      	movs	r3, #0
 800c272:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	019b      	lsls	r3, r3, #6
 800c278:	f043 0220 	orr.w	r2, r3, #32
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	3301      	adds	r3, #1
 800c284:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	4a08      	ldr	r2, [pc, #32]	; (800c2ac <USB_FlushTxFifo+0x64>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d901      	bls.n	800c292 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c28e:	2303      	movs	r3, #3
 800c290:	e006      	b.n	800c2a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	691b      	ldr	r3, [r3, #16]
 800c296:	f003 0320 	and.w	r3, r3, #32
 800c29a:	2b20      	cmp	r3, #32
 800c29c:	d0f0      	beq.n	800c280 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3714      	adds	r7, #20
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	00030d40 	.word	0x00030d40

0800c2b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	4a11      	ldr	r2, [pc, #68]	; (800c30c <USB_FlushRxFifo+0x5c>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d901      	bls.n	800c2ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	e018      	b.n	800c300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	691b      	ldr	r3, [r3, #16]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	daf2      	bge.n	800c2bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2210      	movs	r2, #16
 800c2de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	4a08      	ldr	r2, [pc, #32]	; (800c30c <USB_FlushRxFifo+0x5c>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d901      	bls.n	800c2f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c2ee:	2303      	movs	r3, #3
 800c2f0:	e006      	b.n	800c300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	f003 0310 	and.w	r3, r3, #16
 800c2fa:	2b10      	cmp	r3, #16
 800c2fc:	d0f0      	beq.n	800c2e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3714      	adds	r7, #20
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr
 800c30c:	00030d40 	.word	0x00030d40

0800c310 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	460b      	mov	r3, r1
 800c31a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	78fb      	ldrb	r3, [r7, #3]
 800c32a:	68f9      	ldr	r1, [r7, #12]
 800c32c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c330:	4313      	orrs	r3, r2
 800c332:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3714      	adds	r7, #20
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr

0800c342 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c342:	b480      	push	{r7}
 800c344:	b087      	sub	sp, #28
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	f003 0306 	and.w	r3, r3, #6
 800c35a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d102      	bne.n	800c368 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c362:	2300      	movs	r3, #0
 800c364:	75fb      	strb	r3, [r7, #23]
 800c366:	e00a      	b.n	800c37e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d002      	beq.n	800c374 <USB_GetDevSpeed+0x32>
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2b06      	cmp	r3, #6
 800c372:	d102      	bne.n	800c37a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c374:	2302      	movs	r3, #2
 800c376:	75fb      	strb	r3, [r7, #23]
 800c378:	e001      	b.n	800c37e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c37a:	230f      	movs	r3, #15
 800c37c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c37e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c380:	4618      	mov	r0, r3
 800c382:	371c      	adds	r7, #28
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	785b      	ldrb	r3, [r3, #1]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d13a      	bne.n	800c41e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ae:	69da      	ldr	r2, [r3, #28]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	f003 030f 	and.w	r3, r3, #15
 800c3b8:	2101      	movs	r1, #1
 800c3ba:	fa01 f303 	lsl.w	r3, r1, r3
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	68f9      	ldr	r1, [r7, #12]
 800c3c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	015a      	lsls	r2, r3, #5
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d155      	bne.n	800c48c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	015a      	lsls	r2, r3, #5
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	791b      	ldrb	r3, [r3, #4]
 800c3fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c3fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	059b      	lsls	r3, r3, #22
 800c402:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c404:	4313      	orrs	r3, r2
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	0151      	lsls	r1, r2, #5
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	440a      	add	r2, r1
 800c40e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	e036      	b.n	800c48c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c424:	69da      	ldr	r2, [r3, #28]
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	f003 030f 	and.w	r3, r3, #15
 800c42e:	2101      	movs	r1, #1
 800c430:	fa01 f303 	lsl.w	r3, r1, r3
 800c434:	041b      	lsls	r3, r3, #16
 800c436:	68f9      	ldr	r1, [r7, #12]
 800c438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c43c:	4313      	orrs	r3, r2
 800c43e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	015a      	lsls	r2, r3, #5
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	4413      	add	r3, r2
 800c448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c452:	2b00      	cmp	r3, #0
 800c454:	d11a      	bne.n	800c48c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	015a      	lsls	r2, r3, #5
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	4413      	add	r3, r2
 800c45e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	791b      	ldrb	r3, [r3, #4]
 800c470:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c472:	430b      	orrs	r3, r1
 800c474:	4313      	orrs	r3, r2
 800c476:	68ba      	ldr	r2, [r7, #8]
 800c478:	0151      	lsls	r1, r2, #5
 800c47a:	68fa      	ldr	r2, [r7, #12]
 800c47c:	440a      	add	r2, r1
 800c47e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c48a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3714      	adds	r7, #20
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr
	...

0800c49c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	785b      	ldrb	r3, [r3, #1]
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d161      	bne.n	800c57c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	015a      	lsls	r2, r3, #5
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	4413      	add	r3, r2
 800c4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c4ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4ce:	d11f      	bne.n	800c510 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	015a      	lsls	r2, r3, #5
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	0151      	lsls	r1, r2, #5
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	440a      	add	r2, r1
 800c4e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c4ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	015a      	lsls	r2, r3, #5
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	0151      	lsls	r1, r2, #5
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	440a      	add	r2, r1
 800c506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c50a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c50e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	f003 030f 	and.w	r3, r3, #15
 800c520:	2101      	movs	r1, #1
 800c522:	fa01 f303 	lsl.w	r3, r1, r3
 800c526:	b29b      	uxth	r3, r3
 800c528:	43db      	mvns	r3, r3
 800c52a:	68f9      	ldr	r1, [r7, #12]
 800c52c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c530:	4013      	ands	r3, r2
 800c532:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c53a:	69da      	ldr	r2, [r3, #28]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	f003 030f 	and.w	r3, r3, #15
 800c544:	2101      	movs	r1, #1
 800c546:	fa01 f303 	lsl.w	r3, r1, r3
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	43db      	mvns	r3, r3
 800c54e:	68f9      	ldr	r1, [r7, #12]
 800c550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c554:	4013      	ands	r3, r2
 800c556:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	015a      	lsls	r2, r3, #5
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4413      	add	r3, r2
 800c560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	0159      	lsls	r1, r3, #5
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	440b      	add	r3, r1
 800c56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c572:	4619      	mov	r1, r3
 800c574:	4b35      	ldr	r3, [pc, #212]	; (800c64c <USB_DeactivateEndpoint+0x1b0>)
 800c576:	4013      	ands	r3, r2
 800c578:	600b      	str	r3, [r1, #0]
 800c57a:	e060      	b.n	800c63e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c58e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c592:	d11f      	bne.n	800c5d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	015a      	lsls	r2, r3, #5
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	4413      	add	r3, r2
 800c59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	0151      	lsls	r1, r2, #5
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	440a      	add	r2, r1
 800c5aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c5b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	015a      	lsls	r2, r3, #5
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68ba      	ldr	r2, [r7, #8]
 800c5c4:	0151      	lsls	r1, r2, #5
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	440a      	add	r2, r1
 800c5ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	f003 030f 	and.w	r3, r3, #15
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ea:	041b      	lsls	r3, r3, #16
 800c5ec:	43db      	mvns	r3, r3
 800c5ee:	68f9      	ldr	r1, [r7, #12]
 800c5f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5f4:	4013      	ands	r3, r2
 800c5f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5fe:	69da      	ldr	r2, [r3, #28]
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	f003 030f 	and.w	r3, r3, #15
 800c608:	2101      	movs	r1, #1
 800c60a:	fa01 f303 	lsl.w	r3, r1, r3
 800c60e:	041b      	lsls	r3, r3, #16
 800c610:	43db      	mvns	r3, r3
 800c612:	68f9      	ldr	r1, [r7, #12]
 800c614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c618:	4013      	ands	r3, r2
 800c61a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	015a      	lsls	r2, r3, #5
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	4413      	add	r3, r2
 800c624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	0159      	lsls	r1, r3, #5
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	440b      	add	r3, r1
 800c632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c636:	4619      	mov	r1, r3
 800c638:	4b05      	ldr	r3, [pc, #20]	; (800c650 <USB_DeactivateEndpoint+0x1b4>)
 800c63a:	4013      	ands	r3, r2
 800c63c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3714      	adds	r7, #20
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr
 800c64c:	ec337800 	.word	0xec337800
 800c650:	eff37800 	.word	0xeff37800

0800c654 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b08a      	sub	sp, #40	; 0x28
 800c658:	af02      	add	r7, sp, #8
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	4613      	mov	r3, r2
 800c660:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	785b      	ldrb	r3, [r3, #1]
 800c670:	2b01      	cmp	r3, #1
 800c672:	f040 815c 	bne.w	800c92e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	699b      	ldr	r3, [r3, #24]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d132      	bne.n	800c6e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	015a      	lsls	r2, r3, #5
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	4413      	add	r3, r2
 800c686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	69ba      	ldr	r2, [r7, #24]
 800c68e:	0151      	lsls	r1, r2, #5
 800c690:	69fa      	ldr	r2, [r7, #28]
 800c692:	440a      	add	r2, r1
 800c694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c698:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c69c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	015a      	lsls	r2, r3, #5
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ae:	691b      	ldr	r3, [r3, #16]
 800c6b0:	69ba      	ldr	r2, [r7, #24]
 800c6b2:	0151      	lsls	r1, r2, #5
 800c6b4:	69fa      	ldr	r2, [r7, #28]
 800c6b6:	440a      	add	r2, r1
 800c6b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	015a      	lsls	r2, r3, #5
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	69ba      	ldr	r2, [r7, #24]
 800c6d2:	0151      	lsls	r1, r2, #5
 800c6d4:	69fa      	ldr	r2, [r7, #28]
 800c6d6:	440a      	add	r2, r1
 800c6d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6dc:	0cdb      	lsrs	r3, r3, #19
 800c6de:	04db      	lsls	r3, r3, #19
 800c6e0:	6113      	str	r3, [r2, #16]
 800c6e2:	e074      	b.n	800c7ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	015a      	lsls	r2, r3, #5
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	0151      	lsls	r1, r2, #5
 800c6f6:	69fa      	ldr	r2, [r7, #28]
 800c6f8:	440a      	add	r2, r1
 800c6fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6fe:	0cdb      	lsrs	r3, r3, #19
 800c700:	04db      	lsls	r3, r3, #19
 800c702:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	015a      	lsls	r2, r3, #5
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	4413      	add	r3, r2
 800c70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	69ba      	ldr	r2, [r7, #24]
 800c714:	0151      	lsls	r1, r2, #5
 800c716:	69fa      	ldr	r2, [r7, #28]
 800c718:	440a      	add	r2, r1
 800c71a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c71e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c722:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c726:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	015a      	lsls	r2, r3, #5
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	4413      	add	r3, r2
 800c730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c734:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	6999      	ldr	r1, [r3, #24]
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	440b      	add	r3, r1
 800c740:	1e59      	subs	r1, r3, #1
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	fbb1 f3f3 	udiv	r3, r1, r3
 800c74a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c74c:	4b9d      	ldr	r3, [pc, #628]	; (800c9c4 <USB_EPStartXfer+0x370>)
 800c74e:	400b      	ands	r3, r1
 800c750:	69b9      	ldr	r1, [r7, #24]
 800c752:	0148      	lsls	r0, r1, #5
 800c754:	69f9      	ldr	r1, [r7, #28]
 800c756:	4401      	add	r1, r0
 800c758:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c75c:	4313      	orrs	r3, r2
 800c75e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	015a      	lsls	r2, r3, #5
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	4413      	add	r3, r2
 800c768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c76c:	691a      	ldr	r2, [r3, #16]
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	699b      	ldr	r3, [r3, #24]
 800c772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c776:	69b9      	ldr	r1, [r7, #24]
 800c778:	0148      	lsls	r0, r1, #5
 800c77a:	69f9      	ldr	r1, [r7, #28]
 800c77c:	4401      	add	r1, r0
 800c77e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c782:	4313      	orrs	r3, r2
 800c784:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	791b      	ldrb	r3, [r3, #4]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d11f      	bne.n	800c7ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c78e:	69bb      	ldr	r3, [r7, #24]
 800c790:	015a      	lsls	r2, r3, #5
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	4413      	add	r3, r2
 800c796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	69ba      	ldr	r2, [r7, #24]
 800c79e:	0151      	lsls	r1, r2, #5
 800c7a0:	69fa      	ldr	r2, [r7, #28]
 800c7a2:	440a      	add	r2, r1
 800c7a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c7ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	015a      	lsls	r2, r3, #5
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ba:	691b      	ldr	r3, [r3, #16]
 800c7bc:	69ba      	ldr	r2, [r7, #24]
 800c7be:	0151      	lsls	r1, r2, #5
 800c7c0:	69fa      	ldr	r2, [r7, #28]
 800c7c2:	440a      	add	r2, r1
 800c7c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c7ce:	79fb      	ldrb	r3, [r7, #7]
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d14b      	bne.n	800c86c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	695b      	ldr	r3, [r3, #20]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d009      	beq.n	800c7f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	015a      	lsls	r2, r3, #5
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	791b      	ldrb	r3, [r3, #4]
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d128      	bne.n	800c84a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c804:	2b00      	cmp	r3, #0
 800c806:	d110      	bne.n	800c82a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	015a      	lsls	r2, r3, #5
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	4413      	add	r3, r2
 800c810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	69ba      	ldr	r2, [r7, #24]
 800c818:	0151      	lsls	r1, r2, #5
 800c81a:	69fa      	ldr	r2, [r7, #28]
 800c81c:	440a      	add	r2, r1
 800c81e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c822:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c826:	6013      	str	r3, [r2, #0]
 800c828:	e00f      	b.n	800c84a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	015a      	lsls	r2, r3, #5
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	4413      	add	r3, r2
 800c832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	69ba      	ldr	r2, [r7, #24]
 800c83a:	0151      	lsls	r1, r2, #5
 800c83c:	69fa      	ldr	r2, [r7, #28]
 800c83e:	440a      	add	r2, r1
 800c840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c848:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	015a      	lsls	r2, r3, #5
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	4413      	add	r3, r2
 800c852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	69ba      	ldr	r2, [r7, #24]
 800c85a:	0151      	lsls	r1, r2, #5
 800c85c:	69fa      	ldr	r2, [r7, #28]
 800c85e:	440a      	add	r2, r1
 800c860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c864:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c868:	6013      	str	r3, [r2, #0]
 800c86a:	e133      	b.n	800cad4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	015a      	lsls	r2, r3, #5
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	4413      	add	r3, r2
 800c874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	69ba      	ldr	r2, [r7, #24]
 800c87c:	0151      	lsls	r1, r2, #5
 800c87e:	69fa      	ldr	r2, [r7, #28]
 800c880:	440a      	add	r2, r1
 800c882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c886:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c88a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	791b      	ldrb	r3, [r3, #4]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d015      	beq.n	800c8c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 811b 	beq.w	800cad4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c89e:	69fb      	ldr	r3, [r7, #28]
 800c8a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	f003 030f 	and.w	r3, r3, #15
 800c8ae:	2101      	movs	r1, #1
 800c8b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c8b4:	69f9      	ldr	r1, [r7, #28]
 800c8b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	634b      	str	r3, [r1, #52]	; 0x34
 800c8be:	e109      	b.n	800cad4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d110      	bne.n	800c8f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	015a      	lsls	r2, r3, #5
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	69ba      	ldr	r2, [r7, #24]
 800c8e0:	0151      	lsls	r1, r2, #5
 800c8e2:	69fa      	ldr	r2, [r7, #28]
 800c8e4:	440a      	add	r2, r1
 800c8e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c8ee:	6013      	str	r3, [r2, #0]
 800c8f0:	e00f      	b.n	800c912 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	015a      	lsls	r2, r3, #5
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	69ba      	ldr	r2, [r7, #24]
 800c902:	0151      	lsls	r1, r2, #5
 800c904:	69fa      	ldr	r2, [r7, #28]
 800c906:	440a      	add	r2, r1
 800c908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c90c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c910:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	6919      	ldr	r1, [r3, #16]
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	781a      	ldrb	r2, [r3, #0]
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	699b      	ldr	r3, [r3, #24]
 800c91e:	b298      	uxth	r0, r3
 800c920:	79fb      	ldrb	r3, [r7, #7]
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	4603      	mov	r3, r0
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f000 fade 	bl	800cee8 <USB_WritePacket>
 800c92c:	e0d2      	b.n	800cad4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	015a      	lsls	r2, r3, #5
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	4413      	add	r3, r2
 800c936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	69ba      	ldr	r2, [r7, #24]
 800c93e:	0151      	lsls	r1, r2, #5
 800c940:	69fa      	ldr	r2, [r7, #28]
 800c942:	440a      	add	r2, r1
 800c944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c948:	0cdb      	lsrs	r3, r3, #19
 800c94a:	04db      	lsls	r3, r3, #19
 800c94c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	015a      	lsls	r2, r3, #5
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	4413      	add	r3, r2
 800c956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	69ba      	ldr	r2, [r7, #24]
 800c95e:	0151      	lsls	r1, r2, #5
 800c960:	69fa      	ldr	r2, [r7, #28]
 800c962:	440a      	add	r2, r1
 800c964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c968:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c96c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c970:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	699b      	ldr	r3, [r3, #24]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d126      	bne.n	800c9c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	015a      	lsls	r2, r3, #5
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	4413      	add	r3, r2
 800c982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c986:	691a      	ldr	r2, [r3, #16]
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c990:	69b9      	ldr	r1, [r7, #24]
 800c992:	0148      	lsls	r0, r1, #5
 800c994:	69f9      	ldr	r1, [r7, #28]
 800c996:	4401      	add	r1, r0
 800c998:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c99c:	4313      	orrs	r3, r2
 800c99e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	015a      	lsls	r2, r3, #5
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	4413      	add	r3, r2
 800c9a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ac:	691b      	ldr	r3, [r3, #16]
 800c9ae:	69ba      	ldr	r2, [r7, #24]
 800c9b0:	0151      	lsls	r1, r2, #5
 800c9b2:	69fa      	ldr	r2, [r7, #28]
 800c9b4:	440a      	add	r2, r1
 800c9b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9be:	6113      	str	r3, [r2, #16]
 800c9c0:	e03a      	b.n	800ca38 <USB_EPStartXfer+0x3e4>
 800c9c2:	bf00      	nop
 800c9c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	699a      	ldr	r2, [r3, #24]
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	1e5a      	subs	r2, r3, #1
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	8afa      	ldrh	r2, [r7, #22]
 800c9e4:	fb03 f202 	mul.w	r2, r3, r2
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	015a      	lsls	r2, r3, #5
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9f8:	691a      	ldr	r2, [r3, #16]
 800c9fa:	8afb      	ldrh	r3, [r7, #22]
 800c9fc:	04d9      	lsls	r1, r3, #19
 800c9fe:	4b38      	ldr	r3, [pc, #224]	; (800cae0 <USB_EPStartXfer+0x48c>)
 800ca00:	400b      	ands	r3, r1
 800ca02:	69b9      	ldr	r1, [r7, #24]
 800ca04:	0148      	lsls	r0, r1, #5
 800ca06:	69f9      	ldr	r1, [r7, #28]
 800ca08:	4401      	add	r1, r0
 800ca0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	015a      	lsls	r2, r3, #5
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	4413      	add	r3, r2
 800ca1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca1e:	691a      	ldr	r2, [r3, #16]
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	69db      	ldr	r3, [r3, #28]
 800ca24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca28:	69b9      	ldr	r1, [r7, #24]
 800ca2a:	0148      	lsls	r0, r1, #5
 800ca2c:	69f9      	ldr	r1, [r7, #28]
 800ca2e:	4401      	add	r1, r0
 800ca30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca34:	4313      	orrs	r3, r2
 800ca36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ca38:	79fb      	ldrb	r3, [r7, #7]
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	d10d      	bne.n	800ca5a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d009      	beq.n	800ca5a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	6919      	ldr	r1, [r3, #16]
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	015a      	lsls	r2, r3, #5
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	4413      	add	r3, r2
 800ca52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca56:	460a      	mov	r2, r1
 800ca58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	791b      	ldrb	r3, [r3, #4]
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d128      	bne.n	800cab4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d110      	bne.n	800ca94 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	015a      	lsls	r2, r3, #5
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	4413      	add	r3, r2
 800ca7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	69ba      	ldr	r2, [r7, #24]
 800ca82:	0151      	lsls	r1, r2, #5
 800ca84:	69fa      	ldr	r2, [r7, #28]
 800ca86:	440a      	add	r2, r1
 800ca88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca90:	6013      	str	r3, [r2, #0]
 800ca92:	e00f      	b.n	800cab4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ca94:	69bb      	ldr	r3, [r7, #24]
 800ca96:	015a      	lsls	r2, r3, #5
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	69ba      	ldr	r2, [r7, #24]
 800caa4:	0151      	lsls	r1, r2, #5
 800caa6:	69fa      	ldr	r2, [r7, #28]
 800caa8:	440a      	add	r2, r1
 800caaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cab2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	015a      	lsls	r2, r3, #5
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	4413      	add	r3, r2
 800cabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	69ba      	ldr	r2, [r7, #24]
 800cac4:	0151      	lsls	r1, r2, #5
 800cac6:	69fa      	ldr	r2, [r7, #28]
 800cac8:	440a      	add	r2, r1
 800caca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cace:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3720      	adds	r7, #32
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	1ff80000 	.word	0x1ff80000

0800cae4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b087      	sub	sp, #28
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	4613      	mov	r3, r2
 800caf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	785b      	ldrb	r3, [r3, #1]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	f040 80ce 	bne.w	800cca2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	699b      	ldr	r3, [r3, #24]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d132      	bne.n	800cb74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	015a      	lsls	r2, r3, #5
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	4413      	add	r3, r2
 800cb16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb1a:	691b      	ldr	r3, [r3, #16]
 800cb1c:	693a      	ldr	r2, [r7, #16]
 800cb1e:	0151      	lsls	r1, r2, #5
 800cb20:	697a      	ldr	r2, [r7, #20]
 800cb22:	440a      	add	r2, r1
 800cb24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cb2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cb30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	015a      	lsls	r2, r3, #5
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	4413      	add	r3, r2
 800cb3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb3e:	691b      	ldr	r3, [r3, #16]
 800cb40:	693a      	ldr	r2, [r7, #16]
 800cb42:	0151      	lsls	r1, r2, #5
 800cb44:	697a      	ldr	r2, [r7, #20]
 800cb46:	440a      	add	r2, r1
 800cb48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	015a      	lsls	r2, r3, #5
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	4413      	add	r3, r2
 800cb5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb5e:	691b      	ldr	r3, [r3, #16]
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	0151      	lsls	r1, r2, #5
 800cb64:	697a      	ldr	r2, [r7, #20]
 800cb66:	440a      	add	r2, r1
 800cb68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb6c:	0cdb      	lsrs	r3, r3, #19
 800cb6e:	04db      	lsls	r3, r3, #19
 800cb70:	6113      	str	r3, [r2, #16]
 800cb72:	e04e      	b.n	800cc12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	015a      	lsls	r2, r3, #5
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	0151      	lsls	r1, r2, #5
 800cb86:	697a      	ldr	r2, [r7, #20]
 800cb88:	440a      	add	r2, r1
 800cb8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb8e:	0cdb      	lsrs	r3, r3, #19
 800cb90:	04db      	lsls	r3, r3, #19
 800cb92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	015a      	lsls	r2, r3, #5
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cba0:	691b      	ldr	r3, [r3, #16]
 800cba2:	693a      	ldr	r2, [r7, #16]
 800cba4:	0151      	lsls	r1, r2, #5
 800cba6:	697a      	ldr	r2, [r7, #20]
 800cba8:	440a      	add	r2, r1
 800cbaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cbb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cbb6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	699a      	ldr	r2, [r3, #24]
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d903      	bls.n	800cbcc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	68da      	ldr	r2, [r3, #12]
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	015a      	lsls	r2, r3, #5
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbd8:	691b      	ldr	r3, [r3, #16]
 800cbda:	693a      	ldr	r2, [r7, #16]
 800cbdc:	0151      	lsls	r1, r2, #5
 800cbde:	697a      	ldr	r2, [r7, #20]
 800cbe0:	440a      	add	r2, r1
 800cbe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cbea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	015a      	lsls	r2, r3, #5
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbf8:	691a      	ldr	r2, [r3, #16]
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	699b      	ldr	r3, [r3, #24]
 800cbfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc02:	6939      	ldr	r1, [r7, #16]
 800cc04:	0148      	lsls	r0, r1, #5
 800cc06:	6979      	ldr	r1, [r7, #20]
 800cc08:	4401      	add	r1, r0
 800cc0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cc12:	79fb      	ldrb	r3, [r7, #7]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d11e      	bne.n	800cc56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	695b      	ldr	r3, [r3, #20]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d009      	beq.n	800cc34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	015a      	lsls	r2, r3, #5
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	4413      	add	r3, r2
 800cc28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	695b      	ldr	r3, [r3, #20]
 800cc32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	015a      	lsls	r2, r3, #5
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	693a      	ldr	r2, [r7, #16]
 800cc44:	0151      	lsls	r1, r2, #5
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	440a      	add	r2, r1
 800cc4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc52:	6013      	str	r3, [r2, #0]
 800cc54:	e097      	b.n	800cd86 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	015a      	lsls	r2, r3, #5
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	693a      	ldr	r2, [r7, #16]
 800cc66:	0151      	lsls	r1, r2, #5
 800cc68:	697a      	ldr	r2, [r7, #20]
 800cc6a:	440a      	add	r2, r1
 800cc6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	699b      	ldr	r3, [r3, #24]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	f000 8083 	beq.w	800cd86 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	f003 030f 	and.w	r3, r3, #15
 800cc90:	2101      	movs	r1, #1
 800cc92:	fa01 f303 	lsl.w	r3, r1, r3
 800cc96:	6979      	ldr	r1, [r7, #20]
 800cc98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	634b      	str	r3, [r1, #52]	; 0x34
 800cca0:	e071      	b.n	800cd86 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	015a      	lsls	r2, r3, #5
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	4413      	add	r3, r2
 800ccaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccae:	691b      	ldr	r3, [r3, #16]
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	0151      	lsls	r1, r2, #5
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	440a      	add	r2, r1
 800ccb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccbc:	0cdb      	lsrs	r3, r3, #19
 800ccbe:	04db      	lsls	r3, r3, #19
 800ccc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	015a      	lsls	r2, r3, #5
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	4413      	add	r3, r2
 800ccca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccce:	691b      	ldr	r3, [r3, #16]
 800ccd0:	693a      	ldr	r2, [r7, #16]
 800ccd2:	0151      	lsls	r1, r2, #5
 800ccd4:	697a      	ldr	r2, [r7, #20]
 800ccd6:	440a      	add	r2, r1
 800ccd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cce0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cce4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	699b      	ldr	r3, [r3, #24]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d003      	beq.n	800ccf6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	68da      	ldr	r2, [r3, #12]
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	68da      	ldr	r2, [r3, #12]
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	015a      	lsls	r2, r3, #5
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	4413      	add	r3, r2
 800cd06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd0a:	691b      	ldr	r3, [r3, #16]
 800cd0c:	693a      	ldr	r2, [r7, #16]
 800cd0e:	0151      	lsls	r1, r2, #5
 800cd10:	697a      	ldr	r2, [r7, #20]
 800cd12:	440a      	add	r2, r1
 800cd14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	015a      	lsls	r2, r3, #5
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	4413      	add	r3, r2
 800cd26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd2a:	691a      	ldr	r2, [r3, #16]
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	69db      	ldr	r3, [r3, #28]
 800cd30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd34:	6939      	ldr	r1, [r7, #16]
 800cd36:	0148      	lsls	r0, r1, #5
 800cd38:	6979      	ldr	r1, [r7, #20]
 800cd3a:	4401      	add	r1, r0
 800cd3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cd40:	4313      	orrs	r3, r2
 800cd42:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cd44:	79fb      	ldrb	r3, [r7, #7]
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d10d      	bne.n	800cd66 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	691b      	ldr	r3, [r3, #16]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d009      	beq.n	800cd66 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	6919      	ldr	r1, [r3, #16]
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	015a      	lsls	r2, r3, #5
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd62:	460a      	mov	r2, r1
 800cd64:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	015a      	lsls	r2, r3, #5
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	693a      	ldr	r2, [r7, #16]
 800cd76:	0151      	lsls	r1, r2, #5
 800cd78:	697a      	ldr	r2, [r7, #20]
 800cd7a:	440a      	add	r2, r1
 800cd7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	371c      	adds	r7, #28
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b087      	sub	sp, #28
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cda2:	2300      	movs	r3, #0
 800cda4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	785b      	ldrb	r3, [r3, #1]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d14a      	bne.n	800ce48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	015a      	lsls	r2, r3, #5
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	4413      	add	r3, r2
 800cdbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cdc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cdca:	f040 8086 	bne.w	800ceda <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	015a      	lsls	r2, r3, #5
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	683a      	ldr	r2, [r7, #0]
 800cde0:	7812      	ldrb	r2, [r2, #0]
 800cde2:	0151      	lsls	r1, r2, #5
 800cde4:	693a      	ldr	r2, [r7, #16]
 800cde6:	440a      	add	r2, r1
 800cde8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cdf0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	015a      	lsls	r2, r3, #5
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	683a      	ldr	r2, [r7, #0]
 800ce04:	7812      	ldrb	r2, [r2, #0]
 800ce06:	0151      	lsls	r1, r2, #5
 800ce08:	693a      	ldr	r2, [r7, #16]
 800ce0a:	440a      	add	r2, r1
 800ce0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f242 7210 	movw	r2, #10000	; 0x2710
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d902      	bls.n	800ce2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ce26:	2301      	movs	r3, #1
 800ce28:	75fb      	strb	r3, [r7, #23]
          break;
 800ce2a:	e056      	b.n	800ceda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	015a      	lsls	r2, r3, #5
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	4413      	add	r3, r2
 800ce36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce44:	d0e7      	beq.n	800ce16 <USB_EPStopXfer+0x82>
 800ce46:	e048      	b.n	800ceda <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	015a      	lsls	r2, r3, #5
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	4413      	add	r3, r2
 800ce52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce60:	d13b      	bne.n	800ceda <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	015a      	lsls	r2, r3, #5
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	683a      	ldr	r2, [r7, #0]
 800ce74:	7812      	ldrb	r2, [r2, #0]
 800ce76:	0151      	lsls	r1, r2, #5
 800ce78:	693a      	ldr	r2, [r7, #16]
 800ce7a:	440a      	add	r2, r1
 800ce7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ce84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	015a      	lsls	r2, r3, #5
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	4413      	add	r3, r2
 800ce90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	7812      	ldrb	r2, [r2, #0]
 800ce9a:	0151      	lsls	r1, r2, #5
 800ce9c:	693a      	ldr	r2, [r7, #16]
 800ce9e:	440a      	add	r2, r1
 800cea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cea8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	3301      	adds	r3, #1
 800ceae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f242 7210 	movw	r2, #10000	; 0x2710
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d902      	bls.n	800cec0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ceba:	2301      	movs	r3, #1
 800cebc:	75fb      	strb	r3, [r7, #23]
          break;
 800cebe:	e00c      	b.n	800ceda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	015a      	lsls	r2, r3, #5
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	4413      	add	r3, r2
 800ceca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ced4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ced8:	d0e7      	beq.n	800ceaa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ceda:	7dfb      	ldrb	r3, [r7, #23]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	371c      	adds	r7, #28
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b089      	sub	sp, #36	; 0x24
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	4611      	mov	r1, r2
 800cef4:	461a      	mov	r2, r3
 800cef6:	460b      	mov	r3, r1
 800cef8:	71fb      	strb	r3, [r7, #7]
 800cefa:	4613      	mov	r3, r2
 800cefc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cf06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d123      	bne.n	800cf56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cf0e:	88bb      	ldrh	r3, [r7, #4]
 800cf10:	3303      	adds	r3, #3
 800cf12:	089b      	lsrs	r3, r3, #2
 800cf14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cf16:	2300      	movs	r3, #0
 800cf18:	61bb      	str	r3, [r7, #24]
 800cf1a:	e018      	b.n	800cf4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cf1c:	79fb      	ldrb	r3, [r7, #7]
 800cf1e:	031a      	lsls	r2, r3, #12
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	4413      	add	r3, r2
 800cf24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf28:	461a      	mov	r2, r3
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	3301      	adds	r3, #1
 800cf34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf36:	69fb      	ldr	r3, [r7, #28]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf42:	69fb      	ldr	r3, [r7, #28]
 800cf44:	3301      	adds	r3, #1
 800cf46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	61bb      	str	r3, [r7, #24]
 800cf4e:	69ba      	ldr	r2, [r7, #24]
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d3e2      	bcc.n	800cf1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3724      	adds	r7, #36	; 0x24
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b08b      	sub	sp, #44	; 0x2c
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cf7a:	88fb      	ldrh	r3, [r7, #6]
 800cf7c:	089b      	lsrs	r3, r3, #2
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cf82:	88fb      	ldrh	r3, [r7, #6]
 800cf84:	f003 0303 	and.w	r3, r3, #3
 800cf88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	623b      	str	r3, [r7, #32]
 800cf8e:	e014      	b.n	800cfba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9a:	601a      	str	r2, [r3, #0]
    pDest++;
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfaa:	3301      	adds	r3, #1
 800cfac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cfb4:	6a3b      	ldr	r3, [r7, #32]
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	623b      	str	r3, [r7, #32]
 800cfba:	6a3a      	ldr	r2, [r7, #32]
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d3e6      	bcc.n	800cf90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cfc2:	8bfb      	ldrh	r3, [r7, #30]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d01e      	beq.n	800d006 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	f107 0310 	add.w	r3, r7, #16
 800cfd8:	6812      	ldr	r2, [r2, #0]
 800cfda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cfdc:	693a      	ldr	r2, [r7, #16]
 800cfde:	6a3b      	ldr	r3, [r7, #32]
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	00db      	lsls	r3, r3, #3
 800cfe4:	fa22 f303 	lsr.w	r3, r2, r3
 800cfe8:	b2da      	uxtb	r2, r3
 800cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfec:	701a      	strb	r2, [r3, #0]
      i++;
 800cfee:	6a3b      	ldr	r3, [r7, #32]
 800cff0:	3301      	adds	r3, #1
 800cff2:	623b      	str	r3, [r7, #32]
      pDest++;
 800cff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff6:	3301      	adds	r3, #1
 800cff8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cffa:	8bfb      	ldrh	r3, [r7, #30]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d000:	8bfb      	ldrh	r3, [r7, #30]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1ea      	bne.n	800cfdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d008:	4618      	mov	r0, r3
 800d00a:	372c      	adds	r7, #44	; 0x2c
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	785b      	ldrb	r3, [r3, #1]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d12c      	bne.n	800d08a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	015a      	lsls	r2, r3, #5
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	4413      	add	r3, r2
 800d038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	db12      	blt.n	800d068 <USB_EPSetStall+0x54>
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d00f      	beq.n	800d068 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	015a      	lsls	r2, r3, #5
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	4413      	add	r3, r2
 800d050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	68ba      	ldr	r2, [r7, #8]
 800d058:	0151      	lsls	r1, r2, #5
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	440a      	add	r2, r1
 800d05e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d066:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	015a      	lsls	r2, r3, #5
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	4413      	add	r3, r2
 800d070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	68ba      	ldr	r2, [r7, #8]
 800d078:	0151      	lsls	r1, r2, #5
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	440a      	add	r2, r1
 800d07e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d086:	6013      	str	r3, [r2, #0]
 800d088:	e02b      	b.n	800d0e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	015a      	lsls	r2, r3, #5
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	4413      	add	r3, r2
 800d092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	db12      	blt.n	800d0c2 <USB_EPSetStall+0xae>
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00f      	beq.n	800d0c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	015a      	lsls	r2, r3, #5
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	68ba      	ldr	r2, [r7, #8]
 800d0b2:	0151      	lsls	r1, r2, #5
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	440a      	add	r2, r1
 800d0b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d0c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	015a      	lsls	r2, r3, #5
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	68ba      	ldr	r2, [r7, #8]
 800d0d2:	0151      	lsls	r1, r2, #5
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	440a      	add	r2, r1
 800d0d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d0e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d0e2:	2300      	movs	r3, #0
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3714      	adds	r7, #20
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b085      	sub	sp, #20
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	785b      	ldrb	r3, [r3, #1]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d128      	bne.n	800d15e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	015a      	lsls	r2, r3, #5
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	4413      	add	r3, r2
 800d114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	68ba      	ldr	r2, [r7, #8]
 800d11c:	0151      	lsls	r1, r2, #5
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	440a      	add	r2, r1
 800d122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d126:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d12a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	791b      	ldrb	r3, [r3, #4]
 800d130:	2b03      	cmp	r3, #3
 800d132:	d003      	beq.n	800d13c <USB_EPClearStall+0x4c>
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	791b      	ldrb	r3, [r3, #4]
 800d138:	2b02      	cmp	r3, #2
 800d13a:	d138      	bne.n	800d1ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	015a      	lsls	r2, r3, #5
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	4413      	add	r3, r2
 800d144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68ba      	ldr	r2, [r7, #8]
 800d14c:	0151      	lsls	r1, r2, #5
 800d14e:	68fa      	ldr	r2, [r7, #12]
 800d150:	440a      	add	r2, r1
 800d152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d15a:	6013      	str	r3, [r2, #0]
 800d15c:	e027      	b.n	800d1ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	015a      	lsls	r2, r3, #5
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	4413      	add	r3, r2
 800d166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	68ba      	ldr	r2, [r7, #8]
 800d16e:	0151      	lsls	r1, r2, #5
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	440a      	add	r2, r1
 800d174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d178:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d17c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	791b      	ldrb	r3, [r3, #4]
 800d182:	2b03      	cmp	r3, #3
 800d184:	d003      	beq.n	800d18e <USB_EPClearStall+0x9e>
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	791b      	ldrb	r3, [r3, #4]
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	d10f      	bne.n	800d1ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	015a      	lsls	r2, r3, #5
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	4413      	add	r3, r2
 800d196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	68ba      	ldr	r2, [r7, #8]
 800d19e:	0151      	lsls	r1, r2, #5
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	440a      	add	r2, r1
 800d1a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3714      	adds	r7, #20
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b085      	sub	sp, #20
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	68fa      	ldr	r2, [r7, #12]
 800d1d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d1de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	78fb      	ldrb	r3, [r7, #3]
 800d1ea:	011b      	lsls	r3, r3, #4
 800d1ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d1f0:	68f9      	ldr	r1, [r7, #12]
 800d1f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3714      	adds	r7, #20
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d222:	f023 0303 	bic.w	r3, r3, #3
 800d226:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d236:	f023 0302 	bic.w	r3, r3, #2
 800d23a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3714      	adds	r7, #20
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d24a:	b480      	push	{r7}
 800d24c:	b085      	sub	sp, #20
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d264:	f023 0303 	bic.w	r3, r3, #3
 800d268:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d278:	f043 0302 	orr.w	r3, r3, #2
 800d27c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d27e:	2300      	movs	r3, #0
}
 800d280:	4618      	mov	r0, r3
 800d282:	3714      	adds	r7, #20
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	695b      	ldr	r3, [r3, #20]
 800d298:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	699b      	ldr	r3, [r3, #24]
 800d29e:	68fa      	ldr	r2, [r7, #12]
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3714      	adds	r7, #20
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr

0800d2b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2b2:	b480      	push	{r7}
 800d2b4:	b085      	sub	sp, #20
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2c4:	699b      	ldr	r3, [r3, #24]
 800d2c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2ce:	69db      	ldr	r3, [r3, #28]
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	0c1b      	lsrs	r3, r3, #16
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3714      	adds	r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr

0800d2e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2e6:	b480      	push	{r7}
 800d2e8:	b085      	sub	sp, #20
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2f8:	699b      	ldr	r3, [r3, #24]
 800d2fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d302:	69db      	ldr	r3, [r3, #28]
 800d304:	68ba      	ldr	r2, [r7, #8]
 800d306:	4013      	ands	r3, r2
 800d308:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	b29b      	uxth	r3, r3
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3714      	adds	r7, #20
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d31a:	b480      	push	{r7}
 800d31c:	b085      	sub	sp, #20
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
 800d322:	460b      	mov	r3, r1
 800d324:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d32a:	78fb      	ldrb	r3, [r7, #3]
 800d32c:	015a      	lsls	r2, r3, #5
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	4413      	add	r3, r2
 800d332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d340:	695b      	ldr	r3, [r3, #20]
 800d342:	68ba      	ldr	r2, [r7, #8]
 800d344:	4013      	ands	r3, r2
 800d346:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d348:	68bb      	ldr	r3, [r7, #8]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3714      	adds	r7, #20
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d356:	b480      	push	{r7}
 800d358:	b087      	sub	sp, #28
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	460b      	mov	r3, r1
 800d360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d378:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d37a:	78fb      	ldrb	r3, [r7, #3]
 800d37c:	f003 030f 	and.w	r3, r3, #15
 800d380:	68fa      	ldr	r2, [r7, #12]
 800d382:	fa22 f303 	lsr.w	r3, r2, r3
 800d386:	01db      	lsls	r3, r3, #7
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	693a      	ldr	r2, [r7, #16]
 800d38c:	4313      	orrs	r3, r2
 800d38e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d390:	78fb      	ldrb	r3, [r7, #3]
 800d392:	015a      	lsls	r2, r3, #5
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	4413      	add	r3, r2
 800d398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	693a      	ldr	r2, [r7, #16]
 800d3a0:	4013      	ands	r3, r2
 800d3a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d3a4:	68bb      	ldr	r3, [r7, #8]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	371c      	adds	r7, #28
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr

0800d3b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d3b2:	b480      	push	{r7}
 800d3b4:	b083      	sub	sp, #12
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	695b      	ldr	r3, [r3, #20]
 800d3be:	f003 0301 	and.w	r3, r3, #1
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	370c      	adds	r7, #12
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr

0800d3ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d3ce:	b480      	push	{r7}
 800d3d0:	b085      	sub	sp, #20
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	68fa      	ldr	r2, [r7, #12]
 800d3e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d3ec:	f023 0307 	bic.w	r3, r3, #7
 800d3f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d404:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d406:	2300      	movs	r3, #0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3714      	adds	r7, #20
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d414:	b480      	push	{r7}
 800d416:	b087      	sub	sp, #28
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	460b      	mov	r3, r1
 800d41e:	607a      	str	r2, [r7, #4]
 800d420:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	333c      	adds	r3, #60	; 0x3c
 800d42a:	3304      	adds	r3, #4
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	4a26      	ldr	r2, [pc, #152]	; (800d4cc <USB_EP0_OutStart+0xb8>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d90a      	bls.n	800d44e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d448:	d101      	bne.n	800d44e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d44a:	2300      	movs	r3, #0
 800d44c:	e037      	b.n	800d4be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d454:	461a      	mov	r2, r3
 800d456:	2300      	movs	r3, #0
 800d458:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	697a      	ldr	r2, [r7, #20]
 800d464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d46c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	697a      	ldr	r2, [r7, #20]
 800d478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d47c:	f043 0318 	orr.w	r3, r3, #24
 800d480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d488:	691b      	ldr	r3, [r3, #16]
 800d48a:	697a      	ldr	r2, [r7, #20]
 800d48c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d490:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d494:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d496:	7afb      	ldrb	r3, [r7, #11]
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d10f      	bne.n	800d4bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	697a      	ldr	r2, [r7, #20]
 800d4b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d4ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d4bc:	2300      	movs	r3, #0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	371c      	adds	r7, #28
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop
 800d4cc:	4f54300a 	.word	0x4f54300a

0800d4d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	4a13      	ldr	r2, [pc, #76]	; (800d534 <USB_CoreReset+0x64>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d901      	bls.n	800d4ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d4ea:	2303      	movs	r3, #3
 800d4ec:	e01b      	b.n	800d526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	691b      	ldr	r3, [r3, #16]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	daf2      	bge.n	800d4dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	691b      	ldr	r3, [r3, #16]
 800d4fe:	f043 0201 	orr.w	r2, r3, #1
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	3301      	adds	r3, #1
 800d50a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	4a09      	ldr	r2, [pc, #36]	; (800d534 <USB_CoreReset+0x64>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d901      	bls.n	800d518 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d514:	2303      	movs	r3, #3
 800d516:	e006      	b.n	800d526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	f003 0301 	and.w	r3, r3, #1
 800d520:	2b01      	cmp	r3, #1
 800d522:	d0f0      	beq.n	800d506 <USB_CoreReset+0x36>

  return HAL_OK;
 800d524:	2300      	movs	r3, #0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3714      	adds	r7, #20
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop
 800d534:	00030d40 	.word	0x00030d40

0800d538 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	460b      	mov	r3, r1
 800d542:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d544:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d548:	f002 fc9a 	bl	800fe80 <USBD_static_malloc>
 800d54c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d109      	bne.n	800d568 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	32b0      	adds	r2, #176	; 0xb0
 800d55e:	2100      	movs	r1, #0
 800d560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d564:	2302      	movs	r3, #2
 800d566:	e0d4      	b.n	800d712 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d568:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d56c:	2100      	movs	r1, #0
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	f002 fcf4 	bl	800ff5c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	32b0      	adds	r2, #176	; 0xb0
 800d57e:	68f9      	ldr	r1, [r7, #12]
 800d580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	32b0      	adds	r2, #176	; 0xb0
 800d58e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	7c1b      	ldrb	r3, [r3, #16]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d138      	bne.n	800d612 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d5a0:	4b5e      	ldr	r3, [pc, #376]	; (800d71c <USBD_CDC_Init+0x1e4>)
 800d5a2:	7819      	ldrb	r1, [r3, #0]
 800d5a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5a8:	2202      	movs	r2, #2
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f002 fb45 	bl	800fc3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d5b0:	4b5a      	ldr	r3, [pc, #360]	; (800d71c <USBD_CDC_Init+0x1e4>)
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	f003 020f 	and.w	r2, r3, #15
 800d5b8:	6879      	ldr	r1, [r7, #4]
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	4413      	add	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	440b      	add	r3, r1
 800d5c4:	3324      	adds	r3, #36	; 0x24
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d5ca:	4b55      	ldr	r3, [pc, #340]	; (800d720 <USBD_CDC_Init+0x1e8>)
 800d5cc:	7819      	ldrb	r1, [r3, #0]
 800d5ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5d2:	2202      	movs	r2, #2
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f002 fb30 	bl	800fc3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d5da:	4b51      	ldr	r3, [pc, #324]	; (800d720 <USBD_CDC_Init+0x1e8>)
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	f003 020f 	and.w	r2, r3, #15
 800d5e2:	6879      	ldr	r1, [r7, #4]
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	4413      	add	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	440b      	add	r3, r1
 800d5ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d5f6:	4b4b      	ldr	r3, [pc, #300]	; (800d724 <USBD_CDC_Init+0x1ec>)
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	f003 020f 	and.w	r2, r3, #15
 800d5fe:	6879      	ldr	r1, [r7, #4]
 800d600:	4613      	mov	r3, r2
 800d602:	009b      	lsls	r3, r3, #2
 800d604:	4413      	add	r3, r2
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	440b      	add	r3, r1
 800d60a:	3326      	adds	r3, #38	; 0x26
 800d60c:	2210      	movs	r2, #16
 800d60e:	801a      	strh	r2, [r3, #0]
 800d610:	e035      	b.n	800d67e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d612:	4b42      	ldr	r3, [pc, #264]	; (800d71c <USBD_CDC_Init+0x1e4>)
 800d614:	7819      	ldrb	r1, [r3, #0]
 800d616:	2340      	movs	r3, #64	; 0x40
 800d618:	2202      	movs	r2, #2
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f002 fb0d 	bl	800fc3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d620:	4b3e      	ldr	r3, [pc, #248]	; (800d71c <USBD_CDC_Init+0x1e4>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	f003 020f 	and.w	r2, r3, #15
 800d628:	6879      	ldr	r1, [r7, #4]
 800d62a:	4613      	mov	r3, r2
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	4413      	add	r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	440b      	add	r3, r1
 800d634:	3324      	adds	r3, #36	; 0x24
 800d636:	2201      	movs	r2, #1
 800d638:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d63a:	4b39      	ldr	r3, [pc, #228]	; (800d720 <USBD_CDC_Init+0x1e8>)
 800d63c:	7819      	ldrb	r1, [r3, #0]
 800d63e:	2340      	movs	r3, #64	; 0x40
 800d640:	2202      	movs	r2, #2
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f002 faf9 	bl	800fc3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d648:	4b35      	ldr	r3, [pc, #212]	; (800d720 <USBD_CDC_Init+0x1e8>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	f003 020f 	and.w	r2, r3, #15
 800d650:	6879      	ldr	r1, [r7, #4]
 800d652:	4613      	mov	r3, r2
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	4413      	add	r3, r2
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	440b      	add	r3, r1
 800d65c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d660:	2201      	movs	r2, #1
 800d662:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d664:	4b2f      	ldr	r3, [pc, #188]	; (800d724 <USBD_CDC_Init+0x1ec>)
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	f003 020f 	and.w	r2, r3, #15
 800d66c:	6879      	ldr	r1, [r7, #4]
 800d66e:	4613      	mov	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	440b      	add	r3, r1
 800d678:	3326      	adds	r3, #38	; 0x26
 800d67a:	2210      	movs	r2, #16
 800d67c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d67e:	4b29      	ldr	r3, [pc, #164]	; (800d724 <USBD_CDC_Init+0x1ec>)
 800d680:	7819      	ldrb	r1, [r3, #0]
 800d682:	2308      	movs	r3, #8
 800d684:	2203      	movs	r2, #3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f002 fad7 	bl	800fc3a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d68c:	4b25      	ldr	r3, [pc, #148]	; (800d724 <USBD_CDC_Init+0x1ec>)
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	f003 020f 	and.w	r2, r3, #15
 800d694:	6879      	ldr	r1, [r7, #4]
 800d696:	4613      	mov	r3, r2
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	4413      	add	r3, r2
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	440b      	add	r3, r1
 800d6a0:	3324      	adds	r3, #36	; 0x24
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	33b0      	adds	r3, #176	; 0xb0
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d101      	bne.n	800d6e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d6dc:	2302      	movs	r3, #2
 800d6de:	e018      	b.n	800d712 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	7c1b      	ldrb	r3, [r3, #16]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10a      	bne.n	800d6fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d6e8:	4b0d      	ldr	r3, [pc, #52]	; (800d720 <USBD_CDC_Init+0x1e8>)
 800d6ea:	7819      	ldrb	r1, [r3, #0]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d6f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f002 fb8e 	bl	800fe18 <USBD_LL_PrepareReceive>
 800d6fc:	e008      	b.n	800d710 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d6fe:	4b08      	ldr	r3, [pc, #32]	; (800d720 <USBD_CDC_Init+0x1e8>)
 800d700:	7819      	ldrb	r1, [r3, #0]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d708:	2340      	movs	r3, #64	; 0x40
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f002 fb84 	bl	800fe18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d710:	2300      	movs	r3, #0
}
 800d712:	4618      	mov	r0, r3
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	20000097 	.word	0x20000097
 800d720:	20000098 	.word	0x20000098
 800d724:	20000099 	.word	0x20000099

0800d728 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	460b      	mov	r3, r1
 800d732:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d734:	4b3a      	ldr	r3, [pc, #232]	; (800d820 <USBD_CDC_DeInit+0xf8>)
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	4619      	mov	r1, r3
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f002 faa3 	bl	800fc86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d740:	4b37      	ldr	r3, [pc, #220]	; (800d820 <USBD_CDC_DeInit+0xf8>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	f003 020f 	and.w	r2, r3, #15
 800d748:	6879      	ldr	r1, [r7, #4]
 800d74a:	4613      	mov	r3, r2
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	4413      	add	r3, r2
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	440b      	add	r3, r1
 800d754:	3324      	adds	r3, #36	; 0x24
 800d756:	2200      	movs	r2, #0
 800d758:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d75a:	4b32      	ldr	r3, [pc, #200]	; (800d824 <USBD_CDC_DeInit+0xfc>)
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	4619      	mov	r1, r3
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f002 fa90 	bl	800fc86 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d766:	4b2f      	ldr	r3, [pc, #188]	; (800d824 <USBD_CDC_DeInit+0xfc>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	f003 020f 	and.w	r2, r3, #15
 800d76e:	6879      	ldr	r1, [r7, #4]
 800d770:	4613      	mov	r3, r2
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	4413      	add	r3, r2
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	440b      	add	r3, r1
 800d77a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d77e:	2200      	movs	r2, #0
 800d780:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d782:	4b29      	ldr	r3, [pc, #164]	; (800d828 <USBD_CDC_DeInit+0x100>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	4619      	mov	r1, r3
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f002 fa7c 	bl	800fc86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d78e:	4b26      	ldr	r3, [pc, #152]	; (800d828 <USBD_CDC_DeInit+0x100>)
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	f003 020f 	and.w	r2, r3, #15
 800d796:	6879      	ldr	r1, [r7, #4]
 800d798:	4613      	mov	r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4413      	add	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	440b      	add	r3, r1
 800d7a2:	3324      	adds	r3, #36	; 0x24
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d7a8:	4b1f      	ldr	r3, [pc, #124]	; (800d828 <USBD_CDC_DeInit+0x100>)
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	f003 020f 	and.w	r2, r3, #15
 800d7b0:	6879      	ldr	r1, [r7, #4]
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	4413      	add	r3, r2
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	440b      	add	r3, r1
 800d7bc:	3326      	adds	r3, #38	; 0x26
 800d7be:	2200      	movs	r2, #0
 800d7c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	32b0      	adds	r2, #176	; 0xb0
 800d7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d01f      	beq.n	800d814 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	33b0      	adds	r3, #176	; 0xb0
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	4413      	add	r3, r2
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	32b0      	adds	r2, #176	; 0xb0
 800d7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f002 fb50 	bl	800fe9c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	32b0      	adds	r2, #176	; 0xb0
 800d806:	2100      	movs	r1, #0
 800d808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	20000097 	.word	0x20000097
 800d824:	20000098 	.word	0x20000098
 800d828:	20000099 	.word	0x20000099

0800d82c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b086      	sub	sp, #24
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	32b0      	adds	r2, #176	; 0xb0
 800d840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d844:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d846:	2300      	movs	r3, #0
 800d848:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d84a:	2300      	movs	r3, #0
 800d84c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d101      	bne.n	800d85c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d858:	2303      	movs	r3, #3
 800d85a:	e0bf      	b.n	800d9dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d864:	2b00      	cmp	r3, #0
 800d866:	d050      	beq.n	800d90a <USBD_CDC_Setup+0xde>
 800d868:	2b20      	cmp	r3, #32
 800d86a:	f040 80af 	bne.w	800d9cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	88db      	ldrh	r3, [r3, #6]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d03a      	beq.n	800d8ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	b25b      	sxtb	r3, r3
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	da1b      	bge.n	800d8b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	33b0      	adds	r3, #176	; 0xb0
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4413      	add	r3, r2
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	683a      	ldr	r2, [r7, #0]
 800d894:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d896:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d898:	683a      	ldr	r2, [r7, #0]
 800d89a:	88d2      	ldrh	r2, [r2, #6]
 800d89c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	88db      	ldrh	r3, [r3, #6]
 800d8a2:	2b07      	cmp	r3, #7
 800d8a4:	bf28      	it	cs
 800d8a6:	2307      	movcs	r3, #7
 800d8a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	89fa      	ldrh	r2, [r7, #14]
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f001 fd89 	bl	800f3c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d8b6:	e090      	b.n	800d9da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	785a      	ldrb	r2, [r3, #1]
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	88db      	ldrh	r3, [r3, #6]
 800d8c6:	2b3f      	cmp	r3, #63	; 0x3f
 800d8c8:	d803      	bhi.n	800d8d2 <USBD_CDC_Setup+0xa6>
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	88db      	ldrh	r3, [r3, #6]
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	e000      	b.n	800d8d4 <USBD_CDC_Setup+0xa8>
 800d8d2:	2240      	movs	r2, #64	; 0x40
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d8da:	6939      	ldr	r1, [r7, #16]
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f001 fd9b 	bl	800f420 <USBD_CtlPrepareRx>
      break;
 800d8ea:	e076      	b.n	800d9da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	33b0      	adds	r3, #176	; 0xb0
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4413      	add	r3, r2
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	683a      	ldr	r2, [r7, #0]
 800d900:	7850      	ldrb	r0, [r2, #1]
 800d902:	2200      	movs	r2, #0
 800d904:	6839      	ldr	r1, [r7, #0]
 800d906:	4798      	blx	r3
      break;
 800d908:	e067      	b.n	800d9da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	785b      	ldrb	r3, [r3, #1]
 800d90e:	2b0b      	cmp	r3, #11
 800d910:	d851      	bhi.n	800d9b6 <USBD_CDC_Setup+0x18a>
 800d912:	a201      	add	r2, pc, #4	; (adr r2, 800d918 <USBD_CDC_Setup+0xec>)
 800d914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d918:	0800d949 	.word	0x0800d949
 800d91c:	0800d9c5 	.word	0x0800d9c5
 800d920:	0800d9b7 	.word	0x0800d9b7
 800d924:	0800d9b7 	.word	0x0800d9b7
 800d928:	0800d9b7 	.word	0x0800d9b7
 800d92c:	0800d9b7 	.word	0x0800d9b7
 800d930:	0800d9b7 	.word	0x0800d9b7
 800d934:	0800d9b7 	.word	0x0800d9b7
 800d938:	0800d9b7 	.word	0x0800d9b7
 800d93c:	0800d9b7 	.word	0x0800d9b7
 800d940:	0800d973 	.word	0x0800d973
 800d944:	0800d99d 	.word	0x0800d99d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	2b03      	cmp	r3, #3
 800d952:	d107      	bne.n	800d964 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d954:	f107 030a 	add.w	r3, r7, #10
 800d958:	2202      	movs	r2, #2
 800d95a:	4619      	mov	r1, r3
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f001 fd33 	bl	800f3c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d962:	e032      	b.n	800d9ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d964:	6839      	ldr	r1, [r7, #0]
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f001 fcbd 	bl	800f2e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d96c:	2303      	movs	r3, #3
 800d96e:	75fb      	strb	r3, [r7, #23]
          break;
 800d970:	e02b      	b.n	800d9ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	2b03      	cmp	r3, #3
 800d97c:	d107      	bne.n	800d98e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d97e:	f107 030d 	add.w	r3, r7, #13
 800d982:	2201      	movs	r2, #1
 800d984:	4619      	mov	r1, r3
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f001 fd1e 	bl	800f3c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d98c:	e01d      	b.n	800d9ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d98e:	6839      	ldr	r1, [r7, #0]
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f001 fca8 	bl	800f2e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d996:	2303      	movs	r3, #3
 800d998:	75fb      	strb	r3, [r7, #23]
          break;
 800d99a:	e016      	b.n	800d9ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	2b03      	cmp	r3, #3
 800d9a6:	d00f      	beq.n	800d9c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d9a8:	6839      	ldr	r1, [r7, #0]
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f001 fc9b 	bl	800f2e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d9b0:	2303      	movs	r3, #3
 800d9b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d9b4:	e008      	b.n	800d9c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d9b6:	6839      	ldr	r1, [r7, #0]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f001 fc94 	bl	800f2e6 <USBD_CtlError>
          ret = USBD_FAIL;
 800d9be:	2303      	movs	r3, #3
 800d9c0:	75fb      	strb	r3, [r7, #23]
          break;
 800d9c2:	e002      	b.n	800d9ca <USBD_CDC_Setup+0x19e>
          break;
 800d9c4:	bf00      	nop
 800d9c6:	e008      	b.n	800d9da <USBD_CDC_Setup+0x1ae>
          break;
 800d9c8:	bf00      	nop
      }
      break;
 800d9ca:	e006      	b.n	800d9da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d9cc:	6839      	ldr	r1, [r7, #0]
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f001 fc89 	bl	800f2e6 <USBD_CtlError>
      ret = USBD_FAIL;
 800d9d4:	2303      	movs	r3, #3
 800d9d6:	75fb      	strb	r3, [r7, #23]
      break;
 800d9d8:	bf00      	nop
  }

  return (uint8_t)ret;
 800d9da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3718      	adds	r7, #24
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	32b0      	adds	r2, #176	; 0xb0
 800da02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d101      	bne.n	800da0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800da0a:	2303      	movs	r3, #3
 800da0c:	e065      	b.n	800dada <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	32b0      	adds	r2, #176	; 0xb0
 800da18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800da1e:	78fb      	ldrb	r3, [r7, #3]
 800da20:	f003 020f 	and.w	r2, r3, #15
 800da24:	6879      	ldr	r1, [r7, #4]
 800da26:	4613      	mov	r3, r2
 800da28:	009b      	lsls	r3, r3, #2
 800da2a:	4413      	add	r3, r2
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	440b      	add	r3, r1
 800da30:	3318      	adds	r3, #24
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d02f      	beq.n	800da98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800da38:	78fb      	ldrb	r3, [r7, #3]
 800da3a:	f003 020f 	and.w	r2, r3, #15
 800da3e:	6879      	ldr	r1, [r7, #4]
 800da40:	4613      	mov	r3, r2
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	4413      	add	r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	440b      	add	r3, r1
 800da4a:	3318      	adds	r3, #24
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	78fb      	ldrb	r3, [r7, #3]
 800da50:	f003 010f 	and.w	r1, r3, #15
 800da54:	68f8      	ldr	r0, [r7, #12]
 800da56:	460b      	mov	r3, r1
 800da58:	00db      	lsls	r3, r3, #3
 800da5a:	440b      	add	r3, r1
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	4403      	add	r3, r0
 800da60:	3348      	adds	r3, #72	; 0x48
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	fbb2 f1f3 	udiv	r1, r2, r3
 800da68:	fb01 f303 	mul.w	r3, r1, r3
 800da6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d112      	bne.n	800da98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800da72:	78fb      	ldrb	r3, [r7, #3]
 800da74:	f003 020f 	and.w	r2, r3, #15
 800da78:	6879      	ldr	r1, [r7, #4]
 800da7a:	4613      	mov	r3, r2
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	4413      	add	r3, r2
 800da80:	009b      	lsls	r3, r3, #2
 800da82:	440b      	add	r3, r1
 800da84:	3318      	adds	r3, #24
 800da86:	2200      	movs	r2, #0
 800da88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800da8a:	78f9      	ldrb	r1, [r7, #3]
 800da8c:	2300      	movs	r3, #0
 800da8e:	2200      	movs	r2, #0
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f002 f9a0 	bl	800fdd6 <USBD_LL_Transmit>
 800da96:	e01f      	b.n	800dad8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	2200      	movs	r2, #0
 800da9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	33b0      	adds	r3, #176	; 0xb0
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	4413      	add	r3, r2
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d010      	beq.n	800dad8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	33b0      	adds	r3, #176	; 0xb0
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	4413      	add	r3, r2
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	691b      	ldr	r3, [r3, #16]
 800dac8:	68ba      	ldr	r2, [r7, #8]
 800daca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800dad4:	78fa      	ldrb	r2, [r7, #3]
 800dad6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dad8:	2300      	movs	r3, #0
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b084      	sub	sp, #16
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
 800daea:	460b      	mov	r3, r1
 800daec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	32b0      	adds	r2, #176	; 0xb0
 800daf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dafc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	32b0      	adds	r2, #176	; 0xb0
 800db08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d101      	bne.n	800db14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800db10:	2303      	movs	r3, #3
 800db12:	e01a      	b.n	800db4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800db14:	78fb      	ldrb	r3, [r7, #3]
 800db16:	4619      	mov	r1, r3
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f002 f99e 	bl	800fe5a <USBD_LL_GetRxDataSize>
 800db1e:	4602      	mov	r2, r0
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	33b0      	adds	r3, #176	; 0xb0
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	4413      	add	r3, r2
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800db3e:	68fa      	ldr	r2, [r7, #12]
 800db40:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800db44:	4611      	mov	r1, r2
 800db46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800db48:	2300      	movs	r3, #0
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3710      	adds	r7, #16
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b084      	sub	sp, #16
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	32b0      	adds	r2, #176	; 0xb0
 800db64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d101      	bne.n	800db74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800db70:	2303      	movs	r3, #3
 800db72:	e025      	b.n	800dbc0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	33b0      	adds	r3, #176	; 0xb0
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	4413      	add	r3, r2
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d01a      	beq.n	800dbbe <USBD_CDC_EP0_RxReady+0x6c>
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800db8e:	2bff      	cmp	r3, #255	; 0xff
 800db90:	d015      	beq.n	800dbbe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	33b0      	adds	r3, #176	; 0xb0
 800db9c:	009b      	lsls	r3, r3, #2
 800db9e:	4413      	add	r3, r2
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800dbaa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dbb2:	b292      	uxth	r2, r2
 800dbb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	22ff      	movs	r2, #255	; 0xff
 800dbba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800dbbe:	2300      	movs	r3, #0
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3710      	adds	r7, #16
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b086      	sub	sp, #24
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dbd0:	2182      	movs	r1, #130	; 0x82
 800dbd2:	4818      	ldr	r0, [pc, #96]	; (800dc34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dbd4:	f000 fd4f 	bl	800e676 <USBD_GetEpDesc>
 800dbd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dbda:	2101      	movs	r1, #1
 800dbdc:	4815      	ldr	r0, [pc, #84]	; (800dc34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dbde:	f000 fd4a 	bl	800e676 <USBD_GetEpDesc>
 800dbe2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dbe4:	2181      	movs	r1, #129	; 0x81
 800dbe6:	4813      	ldr	r0, [pc, #76]	; (800dc34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dbe8:	f000 fd45 	bl	800e676 <USBD_GetEpDesc>
 800dbec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d002      	beq.n	800dbfa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	2210      	movs	r2, #16
 800dbf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d006      	beq.n	800dc0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc08:	711a      	strb	r2, [r3, #4]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d006      	beq.n	800dc22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2200      	movs	r2, #0
 800dc18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc1c:	711a      	strb	r2, [r3, #4]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2243      	movs	r2, #67	; 0x43
 800dc26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dc28:	4b02      	ldr	r3, [pc, #8]	; (800dc34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3718      	adds	r7, #24
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	20000054 	.word	0x20000054

0800dc38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b086      	sub	sp, #24
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dc40:	2182      	movs	r1, #130	; 0x82
 800dc42:	4818      	ldr	r0, [pc, #96]	; (800dca4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dc44:	f000 fd17 	bl	800e676 <USBD_GetEpDesc>
 800dc48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dc4a:	2101      	movs	r1, #1
 800dc4c:	4815      	ldr	r0, [pc, #84]	; (800dca4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dc4e:	f000 fd12 	bl	800e676 <USBD_GetEpDesc>
 800dc52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dc54:	2181      	movs	r1, #129	; 0x81
 800dc56:	4813      	ldr	r0, [pc, #76]	; (800dca4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dc58:	f000 fd0d 	bl	800e676 <USBD_GetEpDesc>
 800dc5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d002      	beq.n	800dc6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	2210      	movs	r2, #16
 800dc68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d006      	beq.n	800dc7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	2200      	movs	r2, #0
 800dc74:	711a      	strb	r2, [r3, #4]
 800dc76:	2200      	movs	r2, #0
 800dc78:	f042 0202 	orr.w	r2, r2, #2
 800dc7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d006      	beq.n	800dc92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2200      	movs	r2, #0
 800dc88:	711a      	strb	r2, [r3, #4]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f042 0202 	orr.w	r2, r2, #2
 800dc90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2243      	movs	r2, #67	; 0x43
 800dc96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dc98:	4b02      	ldr	r3, [pc, #8]	; (800dca4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3718      	adds	r7, #24
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	20000054 	.word	0x20000054

0800dca8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b086      	sub	sp, #24
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dcb0:	2182      	movs	r1, #130	; 0x82
 800dcb2:	4818      	ldr	r0, [pc, #96]	; (800dd14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dcb4:	f000 fcdf 	bl	800e676 <USBD_GetEpDesc>
 800dcb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dcba:	2101      	movs	r1, #1
 800dcbc:	4815      	ldr	r0, [pc, #84]	; (800dd14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dcbe:	f000 fcda 	bl	800e676 <USBD_GetEpDesc>
 800dcc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dcc4:	2181      	movs	r1, #129	; 0x81
 800dcc6:	4813      	ldr	r0, [pc, #76]	; (800dd14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dcc8:	f000 fcd5 	bl	800e676 <USBD_GetEpDesc>
 800dccc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	2210      	movs	r2, #16
 800dcd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d006      	beq.n	800dcee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	2200      	movs	r2, #0
 800dce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dce8:	711a      	strb	r2, [r3, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d006      	beq.n	800dd02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dcfc:	711a      	strb	r2, [r3, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2243      	movs	r2, #67	; 0x43
 800dd06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dd08:	4b02      	ldr	r3, [pc, #8]	; (800dd14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3718      	adds	r7, #24
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20000054 	.word	0x20000054

0800dd18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	220a      	movs	r2, #10
 800dd24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dd26:	4b03      	ldr	r3, [pc, #12]	; (800dd34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	370c      	adds	r7, #12
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	20000010 	.word	0x20000010

0800dd38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d101      	bne.n	800dd4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dd48:	2303      	movs	r3, #3
 800dd4a:	e009      	b.n	800dd60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	33b0      	adds	r3, #176	; 0xb0
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	4413      	add	r3, r2
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dd5e:	2300      	movs	r3, #0
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b087      	sub	sp, #28
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	32b0      	adds	r2, #176	; 0xb0
 800dd82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd86:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d101      	bne.n	800dd92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dd8e:	2303      	movs	r3, #3
 800dd90:	e008      	b.n	800dda4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	68ba      	ldr	r2, [r7, #8]
 800dd96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	371c      	adds	r7, #28
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b085      	sub	sp, #20
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	32b0      	adds	r2, #176	; 0xb0
 800ddc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d101      	bne.n	800ddd4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ddd0:	2303      	movs	r3, #3
 800ddd2:	e004      	b.n	800ddde <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	683a      	ldr	r2, [r7, #0]
 800ddd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3714      	adds	r7, #20
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr
	...

0800ddec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	32b0      	adds	r2, #176	; 0xb0
 800ddfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800de04:	2301      	movs	r3, #1
 800de06:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	32b0      	adds	r2, #176	; 0xb0
 800de12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d101      	bne.n	800de1e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800de1a:	2303      	movs	r3, #3
 800de1c:	e025      	b.n	800de6a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800de24:	2b00      	cmp	r3, #0
 800de26:	d11f      	bne.n	800de68 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	2201      	movs	r2, #1
 800de2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800de30:	4b10      	ldr	r3, [pc, #64]	; (800de74 <USBD_CDC_TransmitPacket+0x88>)
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	f003 020f 	and.w	r2, r3, #15
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	4613      	mov	r3, r2
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	4413      	add	r3, r2
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	4403      	add	r3, r0
 800de4a:	3318      	adds	r3, #24
 800de4c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800de4e:	4b09      	ldr	r3, [pc, #36]	; (800de74 <USBD_CDC_TransmitPacket+0x88>)
 800de50:	7819      	ldrb	r1, [r3, #0]
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f001 ffb9 	bl	800fdd6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800de64:	2300      	movs	r3, #0
 800de66:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800de68:	7bfb      	ldrb	r3, [r7, #15]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	20000097 	.word	0x20000097

0800de78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	32b0      	adds	r2, #176	; 0xb0
 800de8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de8e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	32b0      	adds	r2, #176	; 0xb0
 800de9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d101      	bne.n	800dea6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dea2:	2303      	movs	r3, #3
 800dea4:	e018      	b.n	800ded8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	7c1b      	ldrb	r3, [r3, #16]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d10a      	bne.n	800dec4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800deae:	4b0c      	ldr	r3, [pc, #48]	; (800dee0 <USBD_CDC_ReceivePacket+0x68>)
 800deb0:	7819      	ldrb	r1, [r3, #0]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800deb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f001 ffab 	bl	800fe18 <USBD_LL_PrepareReceive>
 800dec2:	e008      	b.n	800ded6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dec4:	4b06      	ldr	r3, [pc, #24]	; (800dee0 <USBD_CDC_ReceivePacket+0x68>)
 800dec6:	7819      	ldrb	r1, [r3, #0]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dece:	2340      	movs	r3, #64	; 0x40
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f001 ffa1 	bl	800fe18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ded6:	2300      	movs	r3, #0
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3710      	adds	r7, #16
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	20000098 	.word	0x20000098

0800dee4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b086      	sub	sp, #24
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	4613      	mov	r3, r2
 800def0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d101      	bne.n	800defc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800def8:	2303      	movs	r3, #3
 800defa:	e01f      	b.n	800df3c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2200      	movs	r2, #0
 800df00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2200      	movs	r2, #0
 800df08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2200      	movs	r2, #0
 800df10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d003      	beq.n	800df22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	68ba      	ldr	r2, [r7, #8]
 800df1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2201      	movs	r2, #1
 800df26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	79fa      	ldrb	r2, [r7, #7]
 800df2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800df30:	68f8      	ldr	r0, [r7, #12]
 800df32:	f001 fe1b 	bl	800fb6c <USBD_LL_Init>
 800df36:	4603      	mov	r3, r0
 800df38:	75fb      	strb	r3, [r7, #23]

  return ret;
 800df3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3718      	adds	r7, #24
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800df4e:	2300      	movs	r3, #0
 800df50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d101      	bne.n	800df5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800df58:	2303      	movs	r3, #3
 800df5a:	e025      	b.n	800dfa8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	683a      	ldr	r2, [r7, #0]
 800df60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	32ae      	adds	r2, #174	; 0xae
 800df6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df74:	2b00      	cmp	r3, #0
 800df76:	d00f      	beq.n	800df98 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	32ae      	adds	r2, #174	; 0xae
 800df82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df88:	f107 020e 	add.w	r2, r7, #14
 800df8c:	4610      	mov	r0, r2
 800df8e:	4798      	blx	r3
 800df90:	4602      	mov	r2, r0
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800df9e:	1c5a      	adds	r2, r3, #1
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800dfa6:	2300      	movs	r3, #0
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3710      	adds	r7, #16
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f001 fe23 	bl	800fc04 <USBD_LL_Start>
 800dfbe:	4603      	mov	r3, r0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dfd0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	370c      	adds	r7, #12
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr

0800dfde <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b084      	sub	sp, #16
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d009      	beq.n	800e00c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	78fa      	ldrb	r2, [r7, #3]
 800e002:	4611      	mov	r1, r2
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	4798      	blx	r3
 800e008:	4603      	mov	r3, r0
 800e00a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b084      	sub	sp, #16
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
 800e01e:	460b      	mov	r3, r1
 800e020:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e022:	2300      	movs	r3, #0
 800e024:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	78fa      	ldrb	r2, [r7, #3]
 800e030:	4611      	mov	r1, r2
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	4798      	blx	r3
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d001      	beq.n	800e040 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e03c:	2303      	movs	r3, #3
 800e03e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e040:	7bfb      	ldrb	r3, [r7, #15]
}
 800e042:	4618      	mov	r0, r3
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b084      	sub	sp, #16
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
 800e052:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e05a:	6839      	ldr	r1, [r7, #0]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f001 f908 	bl	800f272 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2201      	movs	r2, #1
 800e066:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e070:	461a      	mov	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e07e:	f003 031f 	and.w	r3, r3, #31
 800e082:	2b02      	cmp	r3, #2
 800e084:	d01a      	beq.n	800e0bc <USBD_LL_SetupStage+0x72>
 800e086:	2b02      	cmp	r3, #2
 800e088:	d822      	bhi.n	800e0d0 <USBD_LL_SetupStage+0x86>
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d002      	beq.n	800e094 <USBD_LL_SetupStage+0x4a>
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d00a      	beq.n	800e0a8 <USBD_LL_SetupStage+0x5e>
 800e092:	e01d      	b.n	800e0d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e09a:	4619      	mov	r1, r3
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f000 fb5f 	bl	800e760 <USBD_StdDevReq>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	73fb      	strb	r3, [r7, #15]
      break;
 800e0a6:	e020      	b.n	800e0ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 fbc7 	bl	800e844 <USBD_StdItfReq>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	73fb      	strb	r3, [r7, #15]
      break;
 800e0ba:	e016      	b.n	800e0ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 fc29 	bl	800e91c <USBD_StdEPReq>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	73fb      	strb	r3, [r7, #15]
      break;
 800e0ce:	e00c      	b.n	800e0ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e0d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	4619      	mov	r1, r3
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f001 fdf0 	bl	800fcc4 <USBD_LL_StallEP>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	73fb      	strb	r3, [r7, #15]
      break;
 800e0e8:	bf00      	nop
  }

  return ret;
 800e0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3710      	adds	r7, #16
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b086      	sub	sp, #24
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	607a      	str	r2, [r7, #4]
 800e100:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e102:	2300      	movs	r3, #0
 800e104:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e106:	7afb      	ldrb	r3, [r7, #11]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d16e      	bne.n	800e1ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e112:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e11a:	2b03      	cmp	r3, #3
 800e11c:	f040 8098 	bne.w	800e250 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	689a      	ldr	r2, [r3, #8]
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d913      	bls.n	800e154 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	689a      	ldr	r2, [r3, #8]
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	1ad2      	subs	r2, r2, r3
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	68da      	ldr	r2, [r3, #12]
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	4293      	cmp	r3, r2
 800e144:	bf28      	it	cs
 800e146:	4613      	movcs	r3, r2
 800e148:	461a      	mov	r2, r3
 800e14a:	6879      	ldr	r1, [r7, #4]
 800e14c:	68f8      	ldr	r0, [r7, #12]
 800e14e:	f001 f984 	bl	800f45a <USBD_CtlContinueRx>
 800e152:	e07d      	b.n	800e250 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e15a:	f003 031f 	and.w	r3, r3, #31
 800e15e:	2b02      	cmp	r3, #2
 800e160:	d014      	beq.n	800e18c <USBD_LL_DataOutStage+0x98>
 800e162:	2b02      	cmp	r3, #2
 800e164:	d81d      	bhi.n	800e1a2 <USBD_LL_DataOutStage+0xae>
 800e166:	2b00      	cmp	r3, #0
 800e168:	d002      	beq.n	800e170 <USBD_LL_DataOutStage+0x7c>
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d003      	beq.n	800e176 <USBD_LL_DataOutStage+0x82>
 800e16e:	e018      	b.n	800e1a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e170:	2300      	movs	r3, #0
 800e172:	75bb      	strb	r3, [r7, #22]
            break;
 800e174:	e018      	b.n	800e1a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	4619      	mov	r1, r3
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f000 fa5e 	bl	800e642 <USBD_CoreFindIF>
 800e186:	4603      	mov	r3, r0
 800e188:	75bb      	strb	r3, [r7, #22]
            break;
 800e18a:	e00d      	b.n	800e1a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e192:	b2db      	uxtb	r3, r3
 800e194:	4619      	mov	r1, r3
 800e196:	68f8      	ldr	r0, [r7, #12]
 800e198:	f000 fa60 	bl	800e65c <USBD_CoreFindEP>
 800e19c:	4603      	mov	r3, r0
 800e19e:	75bb      	strb	r3, [r7, #22]
            break;
 800e1a0:	e002      	b.n	800e1a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	75bb      	strb	r3, [r7, #22]
            break;
 800e1a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e1a8:	7dbb      	ldrb	r3, [r7, #22]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d119      	bne.n	800e1e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	2b03      	cmp	r3, #3
 800e1b8:	d113      	bne.n	800e1e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e1ba:	7dba      	ldrb	r2, [r7, #22]
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	32ae      	adds	r2, #174	; 0xae
 800e1c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d00b      	beq.n	800e1e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e1ca:	7dba      	ldrb	r2, [r7, #22]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e1d2:	7dba      	ldrb	r2, [r7, #22]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	32ae      	adds	r2, #174	; 0xae
 800e1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1dc:	691b      	ldr	r3, [r3, #16]
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e1e2:	68f8      	ldr	r0, [r7, #12]
 800e1e4:	f001 f94a 	bl	800f47c <USBD_CtlSendStatus>
 800e1e8:	e032      	b.n	800e250 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e1ea:	7afb      	ldrb	r3, [r7, #11]
 800e1ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f000 fa31 	bl	800e65c <USBD_CoreFindEP>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e1fe:	7dbb      	ldrb	r3, [r7, #22]
 800e200:	2bff      	cmp	r3, #255	; 0xff
 800e202:	d025      	beq.n	800e250 <USBD_LL_DataOutStage+0x15c>
 800e204:	7dbb      	ldrb	r3, [r7, #22]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d122      	bne.n	800e250 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b03      	cmp	r3, #3
 800e214:	d117      	bne.n	800e246 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e216:	7dba      	ldrb	r2, [r7, #22]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	32ae      	adds	r2, #174	; 0xae
 800e21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e220:	699b      	ldr	r3, [r3, #24]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00f      	beq.n	800e246 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e226:	7dba      	ldrb	r2, [r7, #22]
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e22e:	7dba      	ldrb	r2, [r7, #22]
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	32ae      	adds	r2, #174	; 0xae
 800e234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e238:	699b      	ldr	r3, [r3, #24]
 800e23a:	7afa      	ldrb	r2, [r7, #11]
 800e23c:	4611      	mov	r1, r2
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	4798      	blx	r3
 800e242:	4603      	mov	r3, r0
 800e244:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e246:	7dfb      	ldrb	r3, [r7, #23]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d001      	beq.n	800e250 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e24c:	7dfb      	ldrb	r3, [r7, #23]
 800e24e:	e000      	b.n	800e252 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e250:	2300      	movs	r3, #0
}
 800e252:	4618      	mov	r0, r3
 800e254:	3718      	adds	r7, #24
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b086      	sub	sp, #24
 800e25e:	af00      	add	r7, sp, #0
 800e260:	60f8      	str	r0, [r7, #12]
 800e262:	460b      	mov	r3, r1
 800e264:	607a      	str	r2, [r7, #4]
 800e266:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e268:	7afb      	ldrb	r3, [r7, #11]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d16f      	bne.n	800e34e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	3314      	adds	r3, #20
 800e272:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d15a      	bne.n	800e334 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	689a      	ldr	r2, [r3, #8]
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	68db      	ldr	r3, [r3, #12]
 800e286:	429a      	cmp	r2, r3
 800e288:	d914      	bls.n	800e2b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	689a      	ldr	r2, [r3, #8]
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	1ad2      	subs	r2, r2, r3
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	461a      	mov	r2, r3
 800e29e:	6879      	ldr	r1, [r7, #4]
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	f001 f8ac 	bl	800f3fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f001 fdb3 	bl	800fe18 <USBD_LL_PrepareReceive>
 800e2b2:	e03f      	b.n	800e334 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	68da      	ldr	r2, [r3, #12]
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d11c      	bne.n	800e2fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	685a      	ldr	r2, [r3, #4]
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d316      	bcc.n	800e2fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	685a      	ldr	r2, [r3, #4]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d20f      	bcs.n	800e2fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e2da:	2200      	movs	r2, #0
 800e2dc:	2100      	movs	r1, #0
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f001 f88d 	bl	800f3fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f001 fd90 	bl	800fe18 <USBD_LL_PrepareReceive>
 800e2f8:	e01c      	b.n	800e334 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e300:	b2db      	uxtb	r3, r3
 800e302:	2b03      	cmp	r3, #3
 800e304:	d10f      	bne.n	800e326 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e30c:	68db      	ldr	r3, [r3, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d009      	beq.n	800e326 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2200      	movs	r2, #0
 800e316:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e326:	2180      	movs	r1, #128	; 0x80
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f001 fccb 	bl	800fcc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	f001 f8b7 	bl	800f4a2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d03a      	beq.n	800e3b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f7ff fe42 	bl	800dfc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e34c:	e032      	b.n	800e3b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e34e:	7afb      	ldrb	r3, [r7, #11]
 800e350:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e354:	b2db      	uxtb	r3, r3
 800e356:	4619      	mov	r1, r3
 800e358:	68f8      	ldr	r0, [r7, #12]
 800e35a:	f000 f97f 	bl	800e65c <USBD_CoreFindEP>
 800e35e:	4603      	mov	r3, r0
 800e360:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e362:	7dfb      	ldrb	r3, [r7, #23]
 800e364:	2bff      	cmp	r3, #255	; 0xff
 800e366:	d025      	beq.n	800e3b4 <USBD_LL_DataInStage+0x15a>
 800e368:	7dfb      	ldrb	r3, [r7, #23]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d122      	bne.n	800e3b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b03      	cmp	r3, #3
 800e378:	d11c      	bne.n	800e3b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e37a:	7dfa      	ldrb	r2, [r7, #23]
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	32ae      	adds	r2, #174	; 0xae
 800e380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e384:	695b      	ldr	r3, [r3, #20]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d014      	beq.n	800e3b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e38a:	7dfa      	ldrb	r2, [r7, #23]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e392:	7dfa      	ldrb	r2, [r7, #23]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	32ae      	adds	r2, #174	; 0xae
 800e398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e39c:	695b      	ldr	r3, [r3, #20]
 800e39e:	7afa      	ldrb	r2, [r7, #11]
 800e3a0:	4611      	mov	r1, r2
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	4798      	blx	r3
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e3aa:	7dbb      	ldrb	r3, [r7, #22]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d001      	beq.n	800e3b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e3b0:	7dbb      	ldrb	r3, [r7, #22]
 800e3b2:	e000      	b.n	800e3b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e3b4:	2300      	movs	r3, #0
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3718      	adds	r7, #24
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b084      	sub	sp, #16
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d014      	beq.n	800e424 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d00e      	beq.n	800e424 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	6852      	ldr	r2, [r2, #4]
 800e412:	b2d2      	uxtb	r2, r2
 800e414:	4611      	mov	r1, r2
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	4798      	blx	r3
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d001      	beq.n	800e424 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e420:	2303      	movs	r3, #3
 800e422:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e424:	2340      	movs	r3, #64	; 0x40
 800e426:	2200      	movs	r2, #0
 800e428:	2100      	movs	r1, #0
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f001 fc05 	bl	800fc3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2201      	movs	r2, #1
 800e434:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2240      	movs	r2, #64	; 0x40
 800e43c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e440:	2340      	movs	r3, #64	; 0x40
 800e442:	2200      	movs	r2, #0
 800e444:	2180      	movs	r1, #128	; 0x80
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f001 fbf7 	bl	800fc3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2201      	movs	r2, #1
 800e450:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2240      	movs	r2, #64	; 0x40
 800e456:	621a      	str	r2, [r3, #32]

  return ret;
 800e458:	7bfb      	ldrb	r3, [r7, #15]
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3710      	adds	r7, #16
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}

0800e462 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e462:	b480      	push	{r7}
 800e464:	b083      	sub	sp, #12
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
 800e46a:	460b      	mov	r3, r1
 800e46c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	78fa      	ldrb	r2, [r7, #3]
 800e472:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e474:	2300      	movs	r3, #0
}
 800e476:	4618      	mov	r0, r3
 800e478:	370c      	adds	r7, #12
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr

0800e482 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e482:	b480      	push	{r7}
 800e484:	b083      	sub	sp, #12
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e490:	b2da      	uxtb	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2204      	movs	r2, #4
 800e49c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e4a0:	2300      	movs	r3, #0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	370c      	adds	r7, #12
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr

0800e4ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e4ae:	b480      	push	{r7}
 800e4b0:	b083      	sub	sp, #12
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4bc:	b2db      	uxtb	r3, r3
 800e4be:	2b04      	cmp	r3, #4
 800e4c0:	d106      	bne.n	800e4d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e4c8:	b2da      	uxtb	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e4d0:	2300      	movs	r3, #0
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	370c      	adds	r7, #12
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr

0800e4de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e4de:	b580      	push	{r7, lr}
 800e4e0:	b082      	sub	sp, #8
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	2b03      	cmp	r3, #3
 800e4f0:	d110      	bne.n	800e514 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d00b      	beq.n	800e514 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e502:	69db      	ldr	r3, [r3, #28]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d005      	beq.n	800e514 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e50e:	69db      	ldr	r3, [r3, #28]
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3708      	adds	r7, #8
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}

0800e51e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e51e:	b580      	push	{r7, lr}
 800e520:	b082      	sub	sp, #8
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
 800e526:	460b      	mov	r3, r1
 800e528:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	32ae      	adds	r2, #174	; 0xae
 800e534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d101      	bne.n	800e540 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e53c:	2303      	movs	r3, #3
 800e53e:	e01c      	b.n	800e57a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e546:	b2db      	uxtb	r3, r3
 800e548:	2b03      	cmp	r3, #3
 800e54a:	d115      	bne.n	800e578 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	32ae      	adds	r2, #174	; 0xae
 800e556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e55a:	6a1b      	ldr	r3, [r3, #32]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00b      	beq.n	800e578 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	32ae      	adds	r2, #174	; 0xae
 800e56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e56e:	6a1b      	ldr	r3, [r3, #32]
 800e570:	78fa      	ldrb	r2, [r7, #3]
 800e572:	4611      	mov	r1, r2
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e578:	2300      	movs	r3, #0
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3708      	adds	r7, #8
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e582:	b580      	push	{r7, lr}
 800e584:	b082      	sub	sp, #8
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
 800e58a:	460b      	mov	r3, r1
 800e58c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	32ae      	adds	r2, #174	; 0xae
 800e598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d101      	bne.n	800e5a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e5a0:	2303      	movs	r3, #3
 800e5a2:	e01c      	b.n	800e5de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	2b03      	cmp	r3, #3
 800e5ae:	d115      	bne.n	800e5dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	32ae      	adds	r2, #174	; 0xae
 800e5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d00b      	beq.n	800e5dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	32ae      	adds	r2, #174	; 0xae
 800e5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d4:	78fa      	ldrb	r2, [r7, #3]
 800e5d6:	4611      	mov	r1, r2
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e5dc:	2300      	movs	r3, #0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3708      	adds	r7, #8
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e5e6:	b480      	push	{r7}
 800e5e8:	b083      	sub	sp, #12
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e5ee:	2300      	movs	r3, #0
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	370c      	adds	r7, #12
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr

0800e5fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e604:	2300      	movs	r3, #0
 800e606:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2201      	movs	r2, #1
 800e60c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e616:	2b00      	cmp	r3, #0
 800e618:	d00e      	beq.n	800e638 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	6852      	ldr	r2, [r2, #4]
 800e626:	b2d2      	uxtb	r2, r2
 800e628:	4611      	mov	r1, r2
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	4798      	blx	r3
 800e62e:	4603      	mov	r3, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	d001      	beq.n	800e638 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e634:	2303      	movs	r3, #3
 800e636:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e638:	7bfb      	ldrb	r3, [r7, #15]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e642:	b480      	push	{r7}
 800e644:	b083      	sub	sp, #12
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]
 800e64a:	460b      	mov	r3, r1
 800e64c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e64e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e650:	4618      	mov	r0, r3
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	460b      	mov	r3, r1
 800e666:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e668:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	370c      	adds	r7, #12
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr

0800e676 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e676:	b580      	push	{r7, lr}
 800e678:	b086      	sub	sp, #24
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
 800e67e:	460b      	mov	r3, r1
 800e680:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e68a:	2300      	movs	r3, #0
 800e68c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	885b      	ldrh	r3, [r3, #2]
 800e692:	b29a      	uxth	r2, r3
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	b29b      	uxth	r3, r3
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d920      	bls.n	800e6e0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e6a6:	e013      	b.n	800e6d0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e6a8:	f107 030a 	add.w	r3, r7, #10
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	6978      	ldr	r0, [r7, #20]
 800e6b0:	f000 f81b 	bl	800e6ea <USBD_GetNextDesc>
 800e6b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	785b      	ldrb	r3, [r3, #1]
 800e6ba:	2b05      	cmp	r3, #5
 800e6bc:	d108      	bne.n	800e6d0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	789b      	ldrb	r3, [r3, #2]
 800e6c6:	78fa      	ldrb	r2, [r7, #3]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d008      	beq.n	800e6de <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	885b      	ldrh	r3, [r3, #2]
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	897b      	ldrh	r3, [r7, #10]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d8e5      	bhi.n	800e6a8 <USBD_GetEpDesc+0x32>
 800e6dc:	e000      	b.n	800e6e0 <USBD_GetEpDesc+0x6a>
          break;
 800e6de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e6e0:	693b      	ldr	r3, [r7, #16]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3718      	adds	r7, #24
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e6ea:	b480      	push	{r7}
 800e6ec:	b085      	sub	sp, #20
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
 800e6f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	881a      	ldrh	r2, [r3, #0]
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	b29b      	uxth	r3, r3
 800e702:	4413      	add	r3, r2
 800e704:	b29a      	uxth	r2, r3
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	461a      	mov	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	4413      	add	r3, r2
 800e714:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e716:	68fb      	ldr	r3, [r7, #12]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3714      	adds	r7, #20
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e724:	b480      	push	{r7}
 800e726:	b087      	sub	sp, #28
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	3301      	adds	r3, #1
 800e73a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e742:	8a3b      	ldrh	r3, [r7, #16]
 800e744:	021b      	lsls	r3, r3, #8
 800e746:	b21a      	sxth	r2, r3
 800e748:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e74c:	4313      	orrs	r3, r2
 800e74e:	b21b      	sxth	r3, r3
 800e750:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e752:	89fb      	ldrh	r3, [r7, #14]
}
 800e754:	4618      	mov	r0, r3
 800e756:	371c      	adds	r7, #28
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e76a:	2300      	movs	r3, #0
 800e76c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e776:	2b40      	cmp	r3, #64	; 0x40
 800e778:	d005      	beq.n	800e786 <USBD_StdDevReq+0x26>
 800e77a:	2b40      	cmp	r3, #64	; 0x40
 800e77c:	d857      	bhi.n	800e82e <USBD_StdDevReq+0xce>
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d00f      	beq.n	800e7a2 <USBD_StdDevReq+0x42>
 800e782:	2b20      	cmp	r3, #32
 800e784:	d153      	bne.n	800e82e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	32ae      	adds	r2, #174	; 0xae
 800e790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e794:	689b      	ldr	r3, [r3, #8]
 800e796:	6839      	ldr	r1, [r7, #0]
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	4798      	blx	r3
 800e79c:	4603      	mov	r3, r0
 800e79e:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a0:	e04a      	b.n	800e838 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	785b      	ldrb	r3, [r3, #1]
 800e7a6:	2b09      	cmp	r3, #9
 800e7a8:	d83b      	bhi.n	800e822 <USBD_StdDevReq+0xc2>
 800e7aa:	a201      	add	r2, pc, #4	; (adr r2, 800e7b0 <USBD_StdDevReq+0x50>)
 800e7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b0:	0800e805 	.word	0x0800e805
 800e7b4:	0800e819 	.word	0x0800e819
 800e7b8:	0800e823 	.word	0x0800e823
 800e7bc:	0800e80f 	.word	0x0800e80f
 800e7c0:	0800e823 	.word	0x0800e823
 800e7c4:	0800e7e3 	.word	0x0800e7e3
 800e7c8:	0800e7d9 	.word	0x0800e7d9
 800e7cc:	0800e823 	.word	0x0800e823
 800e7d0:	0800e7fb 	.word	0x0800e7fb
 800e7d4:	0800e7ed 	.word	0x0800e7ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e7d8:	6839      	ldr	r1, [r7, #0]
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 fa3c 	bl	800ec58 <USBD_GetDescriptor>
          break;
 800e7e0:	e024      	b.n	800e82c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e7e2:	6839      	ldr	r1, [r7, #0]
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 fba1 	bl	800ef2c <USBD_SetAddress>
          break;
 800e7ea:	e01f      	b.n	800e82c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e7ec:	6839      	ldr	r1, [r7, #0]
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f000 fbe0 	bl	800efb4 <USBD_SetConfig>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	73fb      	strb	r3, [r7, #15]
          break;
 800e7f8:	e018      	b.n	800e82c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e7fa:	6839      	ldr	r1, [r7, #0]
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f000 fc83 	bl	800f108 <USBD_GetConfig>
          break;
 800e802:	e013      	b.n	800e82c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e804:	6839      	ldr	r1, [r7, #0]
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 fcb4 	bl	800f174 <USBD_GetStatus>
          break;
 800e80c:	e00e      	b.n	800e82c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e80e:	6839      	ldr	r1, [r7, #0]
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 fce3 	bl	800f1dc <USBD_SetFeature>
          break;
 800e816:	e009      	b.n	800e82c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e818:	6839      	ldr	r1, [r7, #0]
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 fd07 	bl	800f22e <USBD_ClrFeature>
          break;
 800e820:	e004      	b.n	800e82c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e822:	6839      	ldr	r1, [r7, #0]
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 fd5e 	bl	800f2e6 <USBD_CtlError>
          break;
 800e82a:	bf00      	nop
      }
      break;
 800e82c:	e004      	b.n	800e838 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e82e:	6839      	ldr	r1, [r7, #0]
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f000 fd58 	bl	800f2e6 <USBD_CtlError>
      break;
 800e836:	bf00      	nop
  }

  return ret;
 800e838:	7bfb      	ldrb	r3, [r7, #15]
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop

0800e844 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e84e:	2300      	movs	r3, #0
 800e850:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e85a:	2b40      	cmp	r3, #64	; 0x40
 800e85c:	d005      	beq.n	800e86a <USBD_StdItfReq+0x26>
 800e85e:	2b40      	cmp	r3, #64	; 0x40
 800e860:	d852      	bhi.n	800e908 <USBD_StdItfReq+0xc4>
 800e862:	2b00      	cmp	r3, #0
 800e864:	d001      	beq.n	800e86a <USBD_StdItfReq+0x26>
 800e866:	2b20      	cmp	r3, #32
 800e868:	d14e      	bne.n	800e908 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e870:	b2db      	uxtb	r3, r3
 800e872:	3b01      	subs	r3, #1
 800e874:	2b02      	cmp	r3, #2
 800e876:	d840      	bhi.n	800e8fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	889b      	ldrh	r3, [r3, #4]
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d836      	bhi.n	800e8f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	889b      	ldrh	r3, [r3, #4]
 800e886:	b2db      	uxtb	r3, r3
 800e888:	4619      	mov	r1, r3
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f7ff fed9 	bl	800e642 <USBD_CoreFindIF>
 800e890:	4603      	mov	r3, r0
 800e892:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e894:	7bbb      	ldrb	r3, [r7, #14]
 800e896:	2bff      	cmp	r3, #255	; 0xff
 800e898:	d01d      	beq.n	800e8d6 <USBD_StdItfReq+0x92>
 800e89a:	7bbb      	ldrb	r3, [r7, #14]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d11a      	bne.n	800e8d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e8a0:	7bba      	ldrb	r2, [r7, #14]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	32ae      	adds	r2, #174	; 0xae
 800e8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8aa:	689b      	ldr	r3, [r3, #8]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00f      	beq.n	800e8d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e8b0:	7bba      	ldrb	r2, [r7, #14]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e8b8:	7bba      	ldrb	r2, [r7, #14]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	32ae      	adds	r2, #174	; 0xae
 800e8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8c2:	689b      	ldr	r3, [r3, #8]
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	4798      	blx	r3
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e8ce:	e004      	b.n	800e8da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e8d0:	2303      	movs	r3, #3
 800e8d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e8d4:	e001      	b.n	800e8da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e8d6:	2303      	movs	r3, #3
 800e8d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	88db      	ldrh	r3, [r3, #6]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d110      	bne.n	800e904 <USBD_StdItfReq+0xc0>
 800e8e2:	7bfb      	ldrb	r3, [r7, #15]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d10d      	bne.n	800e904 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f000 fdc7 	bl	800f47c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e8ee:	e009      	b.n	800e904 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e8f0:	6839      	ldr	r1, [r7, #0]
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 fcf7 	bl	800f2e6 <USBD_CtlError>
          break;
 800e8f8:	e004      	b.n	800e904 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e8fa:	6839      	ldr	r1, [r7, #0]
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 fcf2 	bl	800f2e6 <USBD_CtlError>
          break;
 800e902:	e000      	b.n	800e906 <USBD_StdItfReq+0xc2>
          break;
 800e904:	bf00      	nop
      }
      break;
 800e906:	e004      	b.n	800e912 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e908:	6839      	ldr	r1, [r7, #0]
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 fceb 	bl	800f2e6 <USBD_CtlError>
      break;
 800e910:	bf00      	nop
  }

  return ret;
 800e912:	7bfb      	ldrb	r3, [r7, #15]
}
 800e914:	4618      	mov	r0, r3
 800e916:	3710      	adds	r7, #16
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e926:	2300      	movs	r3, #0
 800e928:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	889b      	ldrh	r3, [r3, #4]
 800e92e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e938:	2b40      	cmp	r3, #64	; 0x40
 800e93a:	d007      	beq.n	800e94c <USBD_StdEPReq+0x30>
 800e93c:	2b40      	cmp	r3, #64	; 0x40
 800e93e:	f200 817f 	bhi.w	800ec40 <USBD_StdEPReq+0x324>
 800e942:	2b00      	cmp	r3, #0
 800e944:	d02a      	beq.n	800e99c <USBD_StdEPReq+0x80>
 800e946:	2b20      	cmp	r3, #32
 800e948:	f040 817a 	bne.w	800ec40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e94c:	7bbb      	ldrb	r3, [r7, #14]
 800e94e:	4619      	mov	r1, r3
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f7ff fe83 	bl	800e65c <USBD_CoreFindEP>
 800e956:	4603      	mov	r3, r0
 800e958:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e95a:	7b7b      	ldrb	r3, [r7, #13]
 800e95c:	2bff      	cmp	r3, #255	; 0xff
 800e95e:	f000 8174 	beq.w	800ec4a <USBD_StdEPReq+0x32e>
 800e962:	7b7b      	ldrb	r3, [r7, #13]
 800e964:	2b00      	cmp	r3, #0
 800e966:	f040 8170 	bne.w	800ec4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e96a:	7b7a      	ldrb	r2, [r7, #13]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e972:	7b7a      	ldrb	r2, [r7, #13]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	32ae      	adds	r2, #174	; 0xae
 800e978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	f000 8163 	beq.w	800ec4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e984:	7b7a      	ldrb	r2, [r7, #13]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	32ae      	adds	r2, #174	; 0xae
 800e98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e98e:	689b      	ldr	r3, [r3, #8]
 800e990:	6839      	ldr	r1, [r7, #0]
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	4798      	blx	r3
 800e996:	4603      	mov	r3, r0
 800e998:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e99a:	e156      	b.n	800ec4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	785b      	ldrb	r3, [r3, #1]
 800e9a0:	2b03      	cmp	r3, #3
 800e9a2:	d008      	beq.n	800e9b6 <USBD_StdEPReq+0x9a>
 800e9a4:	2b03      	cmp	r3, #3
 800e9a6:	f300 8145 	bgt.w	800ec34 <USBD_StdEPReq+0x318>
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f000 809b 	beq.w	800eae6 <USBD_StdEPReq+0x1ca>
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d03c      	beq.n	800ea2e <USBD_StdEPReq+0x112>
 800e9b4:	e13e      	b.n	800ec34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d002      	beq.n	800e9c8 <USBD_StdEPReq+0xac>
 800e9c2:	2b03      	cmp	r3, #3
 800e9c4:	d016      	beq.n	800e9f4 <USBD_StdEPReq+0xd8>
 800e9c6:	e02c      	b.n	800ea22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e9c8:	7bbb      	ldrb	r3, [r7, #14]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d00d      	beq.n	800e9ea <USBD_StdEPReq+0xce>
 800e9ce:	7bbb      	ldrb	r3, [r7, #14]
 800e9d0:	2b80      	cmp	r3, #128	; 0x80
 800e9d2:	d00a      	beq.n	800e9ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e9d4:	7bbb      	ldrb	r3, [r7, #14]
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f001 f973 	bl	800fcc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9de:	2180      	movs	r1, #128	; 0x80
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f001 f96f 	bl	800fcc4 <USBD_LL_StallEP>
 800e9e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e9e8:	e020      	b.n	800ea2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e9ea:	6839      	ldr	r1, [r7, #0]
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f000 fc7a 	bl	800f2e6 <USBD_CtlError>
              break;
 800e9f2:	e01b      	b.n	800ea2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	885b      	ldrh	r3, [r3, #2]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d10e      	bne.n	800ea1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e9fc:	7bbb      	ldrb	r3, [r7, #14]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00b      	beq.n	800ea1a <USBD_StdEPReq+0xfe>
 800ea02:	7bbb      	ldrb	r3, [r7, #14]
 800ea04:	2b80      	cmp	r3, #128	; 0x80
 800ea06:	d008      	beq.n	800ea1a <USBD_StdEPReq+0xfe>
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	88db      	ldrh	r3, [r3, #6]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d104      	bne.n	800ea1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ea10:	7bbb      	ldrb	r3, [r7, #14]
 800ea12:	4619      	mov	r1, r3
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f001 f955 	bl	800fcc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 fd2e 	bl	800f47c <USBD_CtlSendStatus>

              break;
 800ea20:	e004      	b.n	800ea2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ea22:	6839      	ldr	r1, [r7, #0]
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 fc5e 	bl	800f2e6 <USBD_CtlError>
              break;
 800ea2a:	bf00      	nop
          }
          break;
 800ea2c:	e107      	b.n	800ec3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	d002      	beq.n	800ea40 <USBD_StdEPReq+0x124>
 800ea3a:	2b03      	cmp	r3, #3
 800ea3c:	d016      	beq.n	800ea6c <USBD_StdEPReq+0x150>
 800ea3e:	e04b      	b.n	800ead8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ea40:	7bbb      	ldrb	r3, [r7, #14]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00d      	beq.n	800ea62 <USBD_StdEPReq+0x146>
 800ea46:	7bbb      	ldrb	r3, [r7, #14]
 800ea48:	2b80      	cmp	r3, #128	; 0x80
 800ea4a:	d00a      	beq.n	800ea62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ea4c:	7bbb      	ldrb	r3, [r7, #14]
 800ea4e:	4619      	mov	r1, r3
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f001 f937 	bl	800fcc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea56:	2180      	movs	r1, #128	; 0x80
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f001 f933 	bl	800fcc4 <USBD_LL_StallEP>
 800ea5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ea60:	e040      	b.n	800eae4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ea62:	6839      	ldr	r1, [r7, #0]
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f000 fc3e 	bl	800f2e6 <USBD_CtlError>
              break;
 800ea6a:	e03b      	b.n	800eae4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	885b      	ldrh	r3, [r3, #2]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d136      	bne.n	800eae2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ea74:	7bbb      	ldrb	r3, [r7, #14]
 800ea76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d004      	beq.n	800ea88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ea7e:	7bbb      	ldrb	r3, [r7, #14]
 800ea80:	4619      	mov	r1, r3
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f001 f93d 	bl	800fd02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f000 fcf7 	bl	800f47c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ea8e:	7bbb      	ldrb	r3, [r7, #14]
 800ea90:	4619      	mov	r1, r3
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f7ff fde2 	bl	800e65c <USBD_CoreFindEP>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea9c:	7b7b      	ldrb	r3, [r7, #13]
 800ea9e:	2bff      	cmp	r3, #255	; 0xff
 800eaa0:	d01f      	beq.n	800eae2 <USBD_StdEPReq+0x1c6>
 800eaa2:	7b7b      	ldrb	r3, [r7, #13]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d11c      	bne.n	800eae2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800eaa8:	7b7a      	ldrb	r2, [r7, #13]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800eab0:	7b7a      	ldrb	r2, [r7, #13]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	32ae      	adds	r2, #174	; 0xae
 800eab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d010      	beq.n	800eae2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800eac0:	7b7a      	ldrb	r2, [r7, #13]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	32ae      	adds	r2, #174	; 0xae
 800eac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	6839      	ldr	r1, [r7, #0]
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	4798      	blx	r3
 800ead2:	4603      	mov	r3, r0
 800ead4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ead6:	e004      	b.n	800eae2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ead8:	6839      	ldr	r1, [r7, #0]
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 fc03 	bl	800f2e6 <USBD_CtlError>
              break;
 800eae0:	e000      	b.n	800eae4 <USBD_StdEPReq+0x1c8>
              break;
 800eae2:	bf00      	nop
          }
          break;
 800eae4:	e0ab      	b.n	800ec3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	2b02      	cmp	r3, #2
 800eaf0:	d002      	beq.n	800eaf8 <USBD_StdEPReq+0x1dc>
 800eaf2:	2b03      	cmp	r3, #3
 800eaf4:	d032      	beq.n	800eb5c <USBD_StdEPReq+0x240>
 800eaf6:	e097      	b.n	800ec28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eaf8:	7bbb      	ldrb	r3, [r7, #14]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d007      	beq.n	800eb0e <USBD_StdEPReq+0x1f2>
 800eafe:	7bbb      	ldrb	r3, [r7, #14]
 800eb00:	2b80      	cmp	r3, #128	; 0x80
 800eb02:	d004      	beq.n	800eb0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800eb04:	6839      	ldr	r1, [r7, #0]
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 fbed 	bl	800f2e6 <USBD_CtlError>
                break;
 800eb0c:	e091      	b.n	800ec32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	da0b      	bge.n	800eb2e <USBD_StdEPReq+0x212>
 800eb16:	7bbb      	ldrb	r3, [r7, #14]
 800eb18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	4413      	add	r3, r2
 800eb22:	009b      	lsls	r3, r3, #2
 800eb24:	3310      	adds	r3, #16
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	4413      	add	r3, r2
 800eb2a:	3304      	adds	r3, #4
 800eb2c:	e00b      	b.n	800eb46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eb2e:	7bbb      	ldrb	r3, [r7, #14]
 800eb30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb34:	4613      	mov	r3, r2
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	4413      	add	r3, r2
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	4413      	add	r3, r2
 800eb44:	3304      	adds	r3, #4
 800eb46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	2202      	movs	r2, #2
 800eb52:	4619      	mov	r1, r3
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f000 fc37 	bl	800f3c8 <USBD_CtlSendData>
              break;
 800eb5a:	e06a      	b.n	800ec32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800eb5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	da11      	bge.n	800eb88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800eb64:	7bbb      	ldrb	r3, [r7, #14]
 800eb66:	f003 020f 	and.w	r2, r3, #15
 800eb6a:	6879      	ldr	r1, [r7, #4]
 800eb6c:	4613      	mov	r3, r2
 800eb6e:	009b      	lsls	r3, r3, #2
 800eb70:	4413      	add	r3, r2
 800eb72:	009b      	lsls	r3, r3, #2
 800eb74:	440b      	add	r3, r1
 800eb76:	3324      	adds	r3, #36	; 0x24
 800eb78:	881b      	ldrh	r3, [r3, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d117      	bne.n	800ebae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800eb7e:	6839      	ldr	r1, [r7, #0]
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f000 fbb0 	bl	800f2e6 <USBD_CtlError>
                  break;
 800eb86:	e054      	b.n	800ec32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eb88:	7bbb      	ldrb	r3, [r7, #14]
 800eb8a:	f003 020f 	and.w	r2, r3, #15
 800eb8e:	6879      	ldr	r1, [r7, #4]
 800eb90:	4613      	mov	r3, r2
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	4413      	add	r3, r2
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	440b      	add	r3, r1
 800eb9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800eb9e:	881b      	ldrh	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d104      	bne.n	800ebae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800eba4:	6839      	ldr	r1, [r7, #0]
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 fb9d 	bl	800f2e6 <USBD_CtlError>
                  break;
 800ebac:	e041      	b.n	800ec32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ebae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	da0b      	bge.n	800ebce <USBD_StdEPReq+0x2b2>
 800ebb6:	7bbb      	ldrb	r3, [r7, #14]
 800ebb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	4413      	add	r3, r2
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	3310      	adds	r3, #16
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	4413      	add	r3, r2
 800ebca:	3304      	adds	r3, #4
 800ebcc:	e00b      	b.n	800ebe6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ebce:	7bbb      	ldrb	r3, [r7, #14]
 800ebd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	009b      	lsls	r3, r3, #2
 800ebd8:	4413      	add	r3, r2
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	4413      	add	r3, r2
 800ebe4:	3304      	adds	r3, #4
 800ebe6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ebe8:	7bbb      	ldrb	r3, [r7, #14]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d002      	beq.n	800ebf4 <USBD_StdEPReq+0x2d8>
 800ebee:	7bbb      	ldrb	r3, [r7, #14]
 800ebf0:	2b80      	cmp	r3, #128	; 0x80
 800ebf2:	d103      	bne.n	800ebfc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	601a      	str	r2, [r3, #0]
 800ebfa:	e00e      	b.n	800ec1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ebfc:	7bbb      	ldrb	r3, [r7, #14]
 800ebfe:	4619      	mov	r1, r3
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f001 f89d 	bl	800fd40 <USBD_LL_IsStallEP>
 800ec06:	4603      	mov	r3, r0
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d003      	beq.n	800ec14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	601a      	str	r2, [r3, #0]
 800ec12:	e002      	b.n	800ec1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	2200      	movs	r2, #0
 800ec18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	2202      	movs	r2, #2
 800ec1e:	4619      	mov	r1, r3
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f000 fbd1 	bl	800f3c8 <USBD_CtlSendData>
              break;
 800ec26:	e004      	b.n	800ec32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ec28:	6839      	ldr	r1, [r7, #0]
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f000 fb5b 	bl	800f2e6 <USBD_CtlError>
              break;
 800ec30:	bf00      	nop
          }
          break;
 800ec32:	e004      	b.n	800ec3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ec34:	6839      	ldr	r1, [r7, #0]
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 fb55 	bl	800f2e6 <USBD_CtlError>
          break;
 800ec3c:	bf00      	nop
      }
      break;
 800ec3e:	e005      	b.n	800ec4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ec40:	6839      	ldr	r1, [r7, #0]
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 fb4f 	bl	800f2e6 <USBD_CtlError>
      break;
 800ec48:	e000      	b.n	800ec4c <USBD_StdEPReq+0x330>
      break;
 800ec4a:	bf00      	nop
  }

  return ret;
 800ec4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3710      	adds	r7, #16
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
	...

0800ec58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ec62:	2300      	movs	r3, #0
 800ec64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ec66:	2300      	movs	r3, #0
 800ec68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	885b      	ldrh	r3, [r3, #2]
 800ec72:	0a1b      	lsrs	r3, r3, #8
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	3b01      	subs	r3, #1
 800ec78:	2b06      	cmp	r3, #6
 800ec7a:	f200 8128 	bhi.w	800eece <USBD_GetDescriptor+0x276>
 800ec7e:	a201      	add	r2, pc, #4	; (adr r2, 800ec84 <USBD_GetDescriptor+0x2c>)
 800ec80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec84:	0800eca1 	.word	0x0800eca1
 800ec88:	0800ecb9 	.word	0x0800ecb9
 800ec8c:	0800ecf9 	.word	0x0800ecf9
 800ec90:	0800eecf 	.word	0x0800eecf
 800ec94:	0800eecf 	.word	0x0800eecf
 800ec98:	0800ee6f 	.word	0x0800ee6f
 800ec9c:	0800ee9b 	.word	0x0800ee9b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	687a      	ldr	r2, [r7, #4]
 800ecaa:	7c12      	ldrb	r2, [r2, #16]
 800ecac:	f107 0108 	add.w	r1, r7, #8
 800ecb0:	4610      	mov	r0, r2
 800ecb2:	4798      	blx	r3
 800ecb4:	60f8      	str	r0, [r7, #12]
      break;
 800ecb6:	e112      	b.n	800eede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	7c1b      	ldrb	r3, [r3, #16]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d10d      	bne.n	800ecdc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecc8:	f107 0208 	add.w	r2, r7, #8
 800eccc:	4610      	mov	r0, r2
 800ecce:	4798      	blx	r3
 800ecd0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	2202      	movs	r2, #2
 800ecd8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ecda:	e100      	b.n	800eede <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ece2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece4:	f107 0208 	add.w	r2, r7, #8
 800ece8:	4610      	mov	r0, r2
 800ecea:	4798      	blx	r3
 800ecec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	2202      	movs	r2, #2
 800ecf4:	701a      	strb	r2, [r3, #0]
      break;
 800ecf6:	e0f2      	b.n	800eede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	885b      	ldrh	r3, [r3, #2]
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	2b05      	cmp	r3, #5
 800ed00:	f200 80ac 	bhi.w	800ee5c <USBD_GetDescriptor+0x204>
 800ed04:	a201      	add	r2, pc, #4	; (adr r2, 800ed0c <USBD_GetDescriptor+0xb4>)
 800ed06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed0a:	bf00      	nop
 800ed0c:	0800ed25 	.word	0x0800ed25
 800ed10:	0800ed59 	.word	0x0800ed59
 800ed14:	0800ed8d 	.word	0x0800ed8d
 800ed18:	0800edc1 	.word	0x0800edc1
 800ed1c:	0800edf5 	.word	0x0800edf5
 800ed20:	0800ee29 	.word	0x0800ee29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d00b      	beq.n	800ed48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	7c12      	ldrb	r2, [r2, #16]
 800ed3c:	f107 0108 	add.w	r1, r7, #8
 800ed40:	4610      	mov	r0, r2
 800ed42:	4798      	blx	r3
 800ed44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed46:	e091      	b.n	800ee6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ed48:	6839      	ldr	r1, [r7, #0]
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f000 facb 	bl	800f2e6 <USBD_CtlError>
            err++;
 800ed50:	7afb      	ldrb	r3, [r7, #11]
 800ed52:	3301      	adds	r3, #1
 800ed54:	72fb      	strb	r3, [r7, #11]
          break;
 800ed56:	e089      	b.n	800ee6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed5e:	689b      	ldr	r3, [r3, #8]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d00b      	beq.n	800ed7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed6a:	689b      	ldr	r3, [r3, #8]
 800ed6c:	687a      	ldr	r2, [r7, #4]
 800ed6e:	7c12      	ldrb	r2, [r2, #16]
 800ed70:	f107 0108 	add.w	r1, r7, #8
 800ed74:	4610      	mov	r0, r2
 800ed76:	4798      	blx	r3
 800ed78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed7a:	e077      	b.n	800ee6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ed7c:	6839      	ldr	r1, [r7, #0]
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 fab1 	bl	800f2e6 <USBD_CtlError>
            err++;
 800ed84:	7afb      	ldrb	r3, [r7, #11]
 800ed86:	3301      	adds	r3, #1
 800ed88:	72fb      	strb	r3, [r7, #11]
          break;
 800ed8a:	e06f      	b.n	800ee6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d00b      	beq.n	800edb0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	7c12      	ldrb	r2, [r2, #16]
 800eda4:	f107 0108 	add.w	r1, r7, #8
 800eda8:	4610      	mov	r0, r2
 800edaa:	4798      	blx	r3
 800edac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edae:	e05d      	b.n	800ee6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800edb0:	6839      	ldr	r1, [r7, #0]
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 fa97 	bl	800f2e6 <USBD_CtlError>
            err++;
 800edb8:	7afb      	ldrb	r3, [r7, #11]
 800edba:	3301      	adds	r3, #1
 800edbc:	72fb      	strb	r3, [r7, #11]
          break;
 800edbe:	e055      	b.n	800ee6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edc6:	691b      	ldr	r3, [r3, #16]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00b      	beq.n	800ede4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edd2:	691b      	ldr	r3, [r3, #16]
 800edd4:	687a      	ldr	r2, [r7, #4]
 800edd6:	7c12      	ldrb	r2, [r2, #16]
 800edd8:	f107 0108 	add.w	r1, r7, #8
 800eddc:	4610      	mov	r0, r2
 800edde:	4798      	blx	r3
 800ede0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ede2:	e043      	b.n	800ee6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ede4:	6839      	ldr	r1, [r7, #0]
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 fa7d 	bl	800f2e6 <USBD_CtlError>
            err++;
 800edec:	7afb      	ldrb	r3, [r7, #11]
 800edee:	3301      	adds	r3, #1
 800edf0:	72fb      	strb	r3, [r7, #11]
          break;
 800edf2:	e03b      	b.n	800ee6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edfa:	695b      	ldr	r3, [r3, #20]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00b      	beq.n	800ee18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee06:	695b      	ldr	r3, [r3, #20]
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	7c12      	ldrb	r2, [r2, #16]
 800ee0c:	f107 0108 	add.w	r1, r7, #8
 800ee10:	4610      	mov	r0, r2
 800ee12:	4798      	blx	r3
 800ee14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee16:	e029      	b.n	800ee6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee18:	6839      	ldr	r1, [r7, #0]
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f000 fa63 	bl	800f2e6 <USBD_CtlError>
            err++;
 800ee20:	7afb      	ldrb	r3, [r7, #11]
 800ee22:	3301      	adds	r3, #1
 800ee24:	72fb      	strb	r3, [r7, #11]
          break;
 800ee26:	e021      	b.n	800ee6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee2e:	699b      	ldr	r3, [r3, #24]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d00b      	beq.n	800ee4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee3a:	699b      	ldr	r3, [r3, #24]
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	7c12      	ldrb	r2, [r2, #16]
 800ee40:	f107 0108 	add.w	r1, r7, #8
 800ee44:	4610      	mov	r0, r2
 800ee46:	4798      	blx	r3
 800ee48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee4a:	e00f      	b.n	800ee6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee4c:	6839      	ldr	r1, [r7, #0]
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f000 fa49 	bl	800f2e6 <USBD_CtlError>
            err++;
 800ee54:	7afb      	ldrb	r3, [r7, #11]
 800ee56:	3301      	adds	r3, #1
 800ee58:	72fb      	strb	r3, [r7, #11]
          break;
 800ee5a:	e007      	b.n	800ee6c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ee5c:	6839      	ldr	r1, [r7, #0]
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 fa41 	bl	800f2e6 <USBD_CtlError>
          err++;
 800ee64:	7afb      	ldrb	r3, [r7, #11]
 800ee66:	3301      	adds	r3, #1
 800ee68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ee6a:	bf00      	nop
      }
      break;
 800ee6c:	e037      	b.n	800eede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	7c1b      	ldrb	r3, [r3, #16]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d109      	bne.n	800ee8a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee7e:	f107 0208 	add.w	r2, r7, #8
 800ee82:	4610      	mov	r0, r2
 800ee84:	4798      	blx	r3
 800ee86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee88:	e029      	b.n	800eede <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ee8a:	6839      	ldr	r1, [r7, #0]
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 fa2a 	bl	800f2e6 <USBD_CtlError>
        err++;
 800ee92:	7afb      	ldrb	r3, [r7, #11]
 800ee94:	3301      	adds	r3, #1
 800ee96:	72fb      	strb	r3, [r7, #11]
      break;
 800ee98:	e021      	b.n	800eede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	7c1b      	ldrb	r3, [r3, #16]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d10d      	bne.n	800eebe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeaa:	f107 0208 	add.w	r2, r7, #8
 800eeae:	4610      	mov	r0, r2
 800eeb0:	4798      	blx	r3
 800eeb2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	2207      	movs	r2, #7
 800eeba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eebc:	e00f      	b.n	800eede <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800eebe:	6839      	ldr	r1, [r7, #0]
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 fa10 	bl	800f2e6 <USBD_CtlError>
        err++;
 800eec6:	7afb      	ldrb	r3, [r7, #11]
 800eec8:	3301      	adds	r3, #1
 800eeca:	72fb      	strb	r3, [r7, #11]
      break;
 800eecc:	e007      	b.n	800eede <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800eece:	6839      	ldr	r1, [r7, #0]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 fa08 	bl	800f2e6 <USBD_CtlError>
      err++;
 800eed6:	7afb      	ldrb	r3, [r7, #11]
 800eed8:	3301      	adds	r3, #1
 800eeda:	72fb      	strb	r3, [r7, #11]
      break;
 800eedc:	bf00      	nop
  }

  if (err != 0U)
 800eede:	7afb      	ldrb	r3, [r7, #11]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d11e      	bne.n	800ef22 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	88db      	ldrh	r3, [r3, #6]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d016      	beq.n	800ef1a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800eeec:	893b      	ldrh	r3, [r7, #8]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d00e      	beq.n	800ef10 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	88da      	ldrh	r2, [r3, #6]
 800eef6:	893b      	ldrh	r3, [r7, #8]
 800eef8:	4293      	cmp	r3, r2
 800eefa:	bf28      	it	cs
 800eefc:	4613      	movcs	r3, r2
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ef02:	893b      	ldrh	r3, [r7, #8]
 800ef04:	461a      	mov	r2, r3
 800ef06:	68f9      	ldr	r1, [r7, #12]
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f000 fa5d 	bl	800f3c8 <USBD_CtlSendData>
 800ef0e:	e009      	b.n	800ef24 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ef10:	6839      	ldr	r1, [r7, #0]
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f000 f9e7 	bl	800f2e6 <USBD_CtlError>
 800ef18:	e004      	b.n	800ef24 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 faae 	bl	800f47c <USBD_CtlSendStatus>
 800ef20:	e000      	b.n	800ef24 <USBD_GetDescriptor+0x2cc>
    return;
 800ef22:	bf00      	nop
  }
}
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop

0800ef2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	889b      	ldrh	r3, [r3, #4]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d131      	bne.n	800efa2 <USBD_SetAddress+0x76>
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	88db      	ldrh	r3, [r3, #6]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d12d      	bne.n	800efa2 <USBD_SetAddress+0x76>
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	885b      	ldrh	r3, [r3, #2]
 800ef4a:	2b7f      	cmp	r3, #127	; 0x7f
 800ef4c:	d829      	bhi.n	800efa2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	885b      	ldrh	r3, [r3, #2]
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	2b03      	cmp	r3, #3
 800ef64:	d104      	bne.n	800ef70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ef66:	6839      	ldr	r1, [r7, #0]
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f000 f9bc 	bl	800f2e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef6e:	e01d      	b.n	800efac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	7bfa      	ldrb	r2, [r7, #15]
 800ef74:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ef78:	7bfb      	ldrb	r3, [r7, #15]
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 ff0b 	bl	800fd98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 fa7a 	bl	800f47c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ef88:	7bfb      	ldrb	r3, [r7, #15]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d004      	beq.n	800ef98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2202      	movs	r2, #2
 800ef92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef96:	e009      	b.n	800efac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efa0:	e004      	b.n	800efac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800efa2:	6839      	ldr	r1, [r7, #0]
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f000 f99e 	bl	800f2e6 <USBD_CtlError>
  }
}
 800efaa:	bf00      	nop
 800efac:	bf00      	nop
 800efae:	3710      	adds	r7, #16
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800efbe:	2300      	movs	r3, #0
 800efc0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	885b      	ldrh	r3, [r3, #2]
 800efc6:	b2da      	uxtb	r2, r3
 800efc8:	4b4e      	ldr	r3, [pc, #312]	; (800f104 <USBD_SetConfig+0x150>)
 800efca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800efcc:	4b4d      	ldr	r3, [pc, #308]	; (800f104 <USBD_SetConfig+0x150>)
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d905      	bls.n	800efe0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800efd4:	6839      	ldr	r1, [r7, #0]
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 f985 	bl	800f2e6 <USBD_CtlError>
    return USBD_FAIL;
 800efdc:	2303      	movs	r3, #3
 800efde:	e08c      	b.n	800f0fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	2b02      	cmp	r3, #2
 800efea:	d002      	beq.n	800eff2 <USBD_SetConfig+0x3e>
 800efec:	2b03      	cmp	r3, #3
 800efee:	d029      	beq.n	800f044 <USBD_SetConfig+0x90>
 800eff0:	e075      	b.n	800f0de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eff2:	4b44      	ldr	r3, [pc, #272]	; (800f104 <USBD_SetConfig+0x150>)
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d020      	beq.n	800f03c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800effa:	4b42      	ldr	r3, [pc, #264]	; (800f104 <USBD_SetConfig+0x150>)
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	461a      	mov	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f004:	4b3f      	ldr	r3, [pc, #252]	; (800f104 <USBD_SetConfig+0x150>)
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	4619      	mov	r1, r3
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f7fe ffe7 	bl	800dfde <USBD_SetClassConfig>
 800f010:	4603      	mov	r3, r0
 800f012:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f014:	7bfb      	ldrb	r3, [r7, #15]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d008      	beq.n	800f02c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f01a:	6839      	ldr	r1, [r7, #0]
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f000 f962 	bl	800f2e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2202      	movs	r2, #2
 800f026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f02a:	e065      	b.n	800f0f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 fa25 	bl	800f47c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2203      	movs	r2, #3
 800f036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f03a:	e05d      	b.n	800f0f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f000 fa1d 	bl	800f47c <USBD_CtlSendStatus>
      break;
 800f042:	e059      	b.n	800f0f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f044:	4b2f      	ldr	r3, [pc, #188]	; (800f104 <USBD_SetConfig+0x150>)
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d112      	bne.n	800f072 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2202      	movs	r2, #2
 800f050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f054:	4b2b      	ldr	r3, [pc, #172]	; (800f104 <USBD_SetConfig+0x150>)
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	461a      	mov	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f05e:	4b29      	ldr	r3, [pc, #164]	; (800f104 <USBD_SetConfig+0x150>)
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	4619      	mov	r1, r3
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f7fe ffd6 	bl	800e016 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 fa06 	bl	800f47c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f070:	e042      	b.n	800f0f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f072:	4b24      	ldr	r3, [pc, #144]	; (800f104 <USBD_SetConfig+0x150>)
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	461a      	mov	r2, r3
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d02a      	beq.n	800f0d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	b2db      	uxtb	r3, r3
 800f086:	4619      	mov	r1, r3
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f7fe ffc4 	bl	800e016 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f08e:	4b1d      	ldr	r3, [pc, #116]	; (800f104 <USBD_SetConfig+0x150>)
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	461a      	mov	r2, r3
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f098:	4b1a      	ldr	r3, [pc, #104]	; (800f104 <USBD_SetConfig+0x150>)
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	4619      	mov	r1, r3
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f7fe ff9d 	bl	800dfde <USBD_SetClassConfig>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f0a8:	7bfb      	ldrb	r3, [r7, #15]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d00f      	beq.n	800f0ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f0ae:	6839      	ldr	r1, [r7, #0]
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 f918 	bl	800f2e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	4619      	mov	r1, r3
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7fe ffa9 	bl	800e016 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2202      	movs	r2, #2
 800f0c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f0cc:	e014      	b.n	800f0f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f000 f9d4 	bl	800f47c <USBD_CtlSendStatus>
      break;
 800f0d4:	e010      	b.n	800f0f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 f9d0 	bl	800f47c <USBD_CtlSendStatus>
      break;
 800f0dc:	e00c      	b.n	800f0f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f0de:	6839      	ldr	r1, [r7, #0]
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 f900 	bl	800f2e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f0e6:	4b07      	ldr	r3, [pc, #28]	; (800f104 <USBD_SetConfig+0x150>)
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7fe ff92 	bl	800e016 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f0f2:	2303      	movs	r3, #3
 800f0f4:	73fb      	strb	r3, [r7, #15]
      break;
 800f0f6:	bf00      	nop
  }

  return ret;
 800f0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3710      	adds	r7, #16
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
 800f102:	bf00      	nop
 800f104:	20000f64 	.word	0x20000f64

0800f108 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b082      	sub	sp, #8
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	88db      	ldrh	r3, [r3, #6]
 800f116:	2b01      	cmp	r3, #1
 800f118:	d004      	beq.n	800f124 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f11a:	6839      	ldr	r1, [r7, #0]
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f000 f8e2 	bl	800f2e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f122:	e023      	b.n	800f16c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	2b02      	cmp	r3, #2
 800f12e:	dc02      	bgt.n	800f136 <USBD_GetConfig+0x2e>
 800f130:	2b00      	cmp	r3, #0
 800f132:	dc03      	bgt.n	800f13c <USBD_GetConfig+0x34>
 800f134:	e015      	b.n	800f162 <USBD_GetConfig+0x5a>
 800f136:	2b03      	cmp	r3, #3
 800f138:	d00b      	beq.n	800f152 <USBD_GetConfig+0x4a>
 800f13a:	e012      	b.n	800f162 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2200      	movs	r2, #0
 800f140:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	3308      	adds	r3, #8
 800f146:	2201      	movs	r2, #1
 800f148:	4619      	mov	r1, r3
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f000 f93c 	bl	800f3c8 <USBD_CtlSendData>
        break;
 800f150:	e00c      	b.n	800f16c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	3304      	adds	r3, #4
 800f156:	2201      	movs	r2, #1
 800f158:	4619      	mov	r1, r3
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 f934 	bl	800f3c8 <USBD_CtlSendData>
        break;
 800f160:	e004      	b.n	800f16c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f162:	6839      	ldr	r1, [r7, #0]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 f8be 	bl	800f2e6 <USBD_CtlError>
        break;
 800f16a:	bf00      	nop
}
 800f16c:	bf00      	nop
 800f16e:	3708      	adds	r7, #8
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f184:	b2db      	uxtb	r3, r3
 800f186:	3b01      	subs	r3, #1
 800f188:	2b02      	cmp	r3, #2
 800f18a:	d81e      	bhi.n	800f1ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	88db      	ldrh	r3, [r3, #6]
 800f190:	2b02      	cmp	r3, #2
 800f192:	d004      	beq.n	800f19e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f194:	6839      	ldr	r1, [r7, #0]
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 f8a5 	bl	800f2e6 <USBD_CtlError>
        break;
 800f19c:	e01a      	b.n	800f1d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d005      	beq.n	800f1ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	f043 0202 	orr.w	r2, r3, #2
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	330c      	adds	r3, #12
 800f1be:	2202      	movs	r2, #2
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f000 f900 	bl	800f3c8 <USBD_CtlSendData>
      break;
 800f1c8:	e004      	b.n	800f1d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f1ca:	6839      	ldr	r1, [r7, #0]
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f000 f88a 	bl	800f2e6 <USBD_CtlError>
      break;
 800f1d2:	bf00      	nop
  }
}
 800f1d4:	bf00      	nop
 800f1d6:	3708      	adds	r7, #8
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	885b      	ldrh	r3, [r3, #2]
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d107      	bne.n	800f1fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 f940 	bl	800f47c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f1fc:	e013      	b.n	800f226 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	885b      	ldrh	r3, [r3, #2]
 800f202:	2b02      	cmp	r3, #2
 800f204:	d10b      	bne.n	800f21e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	889b      	ldrh	r3, [r3, #4]
 800f20a:	0a1b      	lsrs	r3, r3, #8
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f000 f930 	bl	800f47c <USBD_CtlSendStatus>
}
 800f21c:	e003      	b.n	800f226 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f21e:	6839      	ldr	r1, [r7, #0]
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 f860 	bl	800f2e6 <USBD_CtlError>
}
 800f226:	bf00      	nop
 800f228:	3708      	adds	r7, #8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f22e:	b580      	push	{r7, lr}
 800f230:	b082      	sub	sp, #8
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
 800f236:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	3b01      	subs	r3, #1
 800f242:	2b02      	cmp	r3, #2
 800f244:	d80b      	bhi.n	800f25e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	885b      	ldrh	r3, [r3, #2]
 800f24a:	2b01      	cmp	r3, #1
 800f24c:	d10c      	bne.n	800f268 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2200      	movs	r2, #0
 800f252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f000 f910 	bl	800f47c <USBD_CtlSendStatus>
      }
      break;
 800f25c:	e004      	b.n	800f268 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f25e:	6839      	ldr	r1, [r7, #0]
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f000 f840 	bl	800f2e6 <USBD_CtlError>
      break;
 800f266:	e000      	b.n	800f26a <USBD_ClrFeature+0x3c>
      break;
 800f268:	bf00      	nop
  }
}
 800f26a:	bf00      	nop
 800f26c:	3708      	adds	r7, #8
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f272:	b580      	push	{r7, lr}
 800f274:	b084      	sub	sp, #16
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
 800f27a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	781a      	ldrb	r2, [r3, #0]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	3301      	adds	r3, #1
 800f28c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	781a      	ldrb	r2, [r3, #0]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	3301      	adds	r3, #1
 800f29a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f29c:	68f8      	ldr	r0, [r7, #12]
 800f29e:	f7ff fa41 	bl	800e724 <SWAPBYTE>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f2b6:	68f8      	ldr	r0, [r7, #12]
 800f2b8:	f7ff fa34 	bl	800e724 <SWAPBYTE>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	461a      	mov	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f2d0:	68f8      	ldr	r0, [r7, #12]
 800f2d2:	f7ff fa27 	bl	800e724 <SWAPBYTE>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	461a      	mov	r2, r3
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	80da      	strh	r2, [r3, #6]
}
 800f2de:	bf00      	nop
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2e6:	b580      	push	{r7, lr}
 800f2e8:	b082      	sub	sp, #8
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	6078      	str	r0, [r7, #4]
 800f2ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2f0:	2180      	movs	r1, #128	; 0x80
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 fce6 	bl	800fcc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f000 fce2 	bl	800fcc4 <USBD_LL_StallEP>
}
 800f300:	bf00      	nop
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b086      	sub	sp, #24
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f314:	2300      	movs	r3, #0
 800f316:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d036      	beq.n	800f38c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f322:	6938      	ldr	r0, [r7, #16]
 800f324:	f000 f836 	bl	800f394 <USBD_GetLen>
 800f328:	4603      	mov	r3, r0
 800f32a:	3301      	adds	r3, #1
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	005b      	lsls	r3, r3, #1
 800f330:	b29a      	uxth	r2, r3
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f336:	7dfb      	ldrb	r3, [r7, #23]
 800f338:	68ba      	ldr	r2, [r7, #8]
 800f33a:	4413      	add	r3, r2
 800f33c:	687a      	ldr	r2, [r7, #4]
 800f33e:	7812      	ldrb	r2, [r2, #0]
 800f340:	701a      	strb	r2, [r3, #0]
  idx++;
 800f342:	7dfb      	ldrb	r3, [r7, #23]
 800f344:	3301      	adds	r3, #1
 800f346:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f348:	7dfb      	ldrb	r3, [r7, #23]
 800f34a:	68ba      	ldr	r2, [r7, #8]
 800f34c:	4413      	add	r3, r2
 800f34e:	2203      	movs	r2, #3
 800f350:	701a      	strb	r2, [r3, #0]
  idx++;
 800f352:	7dfb      	ldrb	r3, [r7, #23]
 800f354:	3301      	adds	r3, #1
 800f356:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f358:	e013      	b.n	800f382 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f35a:	7dfb      	ldrb	r3, [r7, #23]
 800f35c:	68ba      	ldr	r2, [r7, #8]
 800f35e:	4413      	add	r3, r2
 800f360:	693a      	ldr	r2, [r7, #16]
 800f362:	7812      	ldrb	r2, [r2, #0]
 800f364:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	3301      	adds	r3, #1
 800f36a:	613b      	str	r3, [r7, #16]
    idx++;
 800f36c:	7dfb      	ldrb	r3, [r7, #23]
 800f36e:	3301      	adds	r3, #1
 800f370:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f372:	7dfb      	ldrb	r3, [r7, #23]
 800f374:	68ba      	ldr	r2, [r7, #8]
 800f376:	4413      	add	r3, r2
 800f378:	2200      	movs	r2, #0
 800f37a:	701a      	strb	r2, [r3, #0]
    idx++;
 800f37c:	7dfb      	ldrb	r3, [r7, #23]
 800f37e:	3301      	adds	r3, #1
 800f380:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d1e7      	bne.n	800f35a <USBD_GetString+0x52>
 800f38a:	e000      	b.n	800f38e <USBD_GetString+0x86>
    return;
 800f38c:	bf00      	nop
  }
}
 800f38e:	3718      	adds	r7, #24
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f394:	b480      	push	{r7}
 800f396:	b085      	sub	sp, #20
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f39c:	2300      	movs	r3, #0
 800f39e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f3a4:	e005      	b.n	800f3b2 <USBD_GetLen+0x1e>
  {
    len++;
 800f3a6:	7bfb      	ldrb	r3, [r7, #15]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d1f5      	bne.n	800f3a6 <USBD_GetLen+0x12>
  }

  return len;
 800f3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3714      	adds	r7, #20
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2202      	movs	r2, #2
 800f3d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	68ba      	ldr	r2, [r7, #8]
 800f3ec:	2100      	movs	r1, #0
 800f3ee:	68f8      	ldr	r0, [r7, #12]
 800f3f0:	f000 fcf1 	bl	800fdd6 <USBD_LL_Transmit>

  return USBD_OK;
 800f3f4:	2300      	movs	r3, #0
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b084      	sub	sp, #16
 800f402:	af00      	add	r7, sp, #0
 800f404:	60f8      	str	r0, [r7, #12]
 800f406:	60b9      	str	r1, [r7, #8]
 800f408:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	68ba      	ldr	r2, [r7, #8]
 800f40e:	2100      	movs	r1, #0
 800f410:	68f8      	ldr	r0, [r7, #12]
 800f412:	f000 fce0 	bl	800fdd6 <USBD_LL_Transmit>

  return USBD_OK;
 800f416:	2300      	movs	r3, #0
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3710      	adds	r7, #16
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2203      	movs	r2, #3
 800f430:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	68ba      	ldr	r2, [r7, #8]
 800f448:	2100      	movs	r1, #0
 800f44a:	68f8      	ldr	r0, [r7, #12]
 800f44c:	f000 fce4 	bl	800fe18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f450:	2300      	movs	r3, #0
}
 800f452:	4618      	mov	r0, r3
 800f454:	3710      	adds	r7, #16
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f45a:	b580      	push	{r7, lr}
 800f45c:	b084      	sub	sp, #16
 800f45e:	af00      	add	r7, sp, #0
 800f460:	60f8      	str	r0, [r7, #12]
 800f462:	60b9      	str	r1, [r7, #8]
 800f464:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	68ba      	ldr	r2, [r7, #8]
 800f46a:	2100      	movs	r1, #0
 800f46c:	68f8      	ldr	r0, [r7, #12]
 800f46e:	f000 fcd3 	bl	800fe18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f472:	2300      	movs	r3, #0
}
 800f474:	4618      	mov	r0, r3
 800f476:	3710      	adds	r7, #16
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2204      	movs	r2, #4
 800f488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f48c:	2300      	movs	r3, #0
 800f48e:	2200      	movs	r2, #0
 800f490:	2100      	movs	r1, #0
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 fc9f 	bl	800fdd6 <USBD_LL_Transmit>

  return USBD_OK;
 800f498:	2300      	movs	r3, #0
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3708      	adds	r7, #8
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}

0800f4a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f4a2:	b580      	push	{r7, lr}
 800f4a4:	b082      	sub	sp, #8
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2205      	movs	r2, #5
 800f4ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	2100      	movs	r1, #0
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 fcad 	bl	800fe18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f4be:	2300      	movs	r3, #0
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	4912      	ldr	r1, [pc, #72]	; (800f518 <MX_USB_DEVICE_Init+0x50>)
 800f4d0:	4812      	ldr	r0, [pc, #72]	; (800f51c <MX_USB_DEVICE_Init+0x54>)
 800f4d2:	f7fe fd07 	bl	800dee4 <USBD_Init>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d001      	beq.n	800f4e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f4dc:	f7f4 ff6e 	bl	80043bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f4e0:	490f      	ldr	r1, [pc, #60]	; (800f520 <MX_USB_DEVICE_Init+0x58>)
 800f4e2:	480e      	ldr	r0, [pc, #56]	; (800f51c <MX_USB_DEVICE_Init+0x54>)
 800f4e4:	f7fe fd2e 	bl	800df44 <USBD_RegisterClass>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d001      	beq.n	800f4f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f4ee:	f7f4 ff65 	bl	80043bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f4f2:	490c      	ldr	r1, [pc, #48]	; (800f524 <MX_USB_DEVICE_Init+0x5c>)
 800f4f4:	4809      	ldr	r0, [pc, #36]	; (800f51c <MX_USB_DEVICE_Init+0x54>)
 800f4f6:	f7fe fc1f 	bl	800dd38 <USBD_CDC_RegisterInterface>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d001      	beq.n	800f504 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f500:	f7f4 ff5c 	bl	80043bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f504:	4805      	ldr	r0, [pc, #20]	; (800f51c <MX_USB_DEVICE_Init+0x54>)
 800f506:	f7fe fd53 	bl	800dfb0 <USBD_Start>
 800f50a:	4603      	mov	r3, r0
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d001      	beq.n	800f514 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f510:	f7f4 ff54 	bl	80043bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f514:	bf00      	nop
 800f516:	bd80      	pop	{r7, pc}
 800f518:	200000b0 	.word	0x200000b0
 800f51c:	20000f68 	.word	0x20000f68
 800f520:	2000001c 	.word	0x2000001c
 800f524:	2000009c 	.word	0x2000009c

0800f528 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f52c:	2200      	movs	r2, #0
 800f52e:	4905      	ldr	r1, [pc, #20]	; (800f544 <CDC_Init_FS+0x1c>)
 800f530:	4805      	ldr	r0, [pc, #20]	; (800f548 <CDC_Init_FS+0x20>)
 800f532:	f7fe fc1b 	bl	800dd6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f536:	4905      	ldr	r1, [pc, #20]	; (800f54c <CDC_Init_FS+0x24>)
 800f538:	4803      	ldr	r0, [pc, #12]	; (800f548 <CDC_Init_FS+0x20>)
 800f53a:	f7fe fc39 	bl	800ddb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f53e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f540:	4618      	mov	r0, r3
 800f542:	bd80      	pop	{r7, pc}
 800f544:	20001a44 	.word	0x20001a44
 800f548:	20000f68 	.word	0x20000f68
 800f54c:	20001244 	.word	0x20001244

0800f550 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f550:	b480      	push	{r7}
 800f552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f554:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f556:	4618      	mov	r0, r3
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f560:	b480      	push	{r7}
 800f562:	b083      	sub	sp, #12
 800f564:	af00      	add	r7, sp, #0
 800f566:	4603      	mov	r3, r0
 800f568:	6039      	str	r1, [r7, #0]
 800f56a:	71fb      	strb	r3, [r7, #7]
 800f56c:	4613      	mov	r3, r2
 800f56e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f570:	79fb      	ldrb	r3, [r7, #7]
 800f572:	2b23      	cmp	r3, #35	; 0x23
 800f574:	d84a      	bhi.n	800f60c <CDC_Control_FS+0xac>
 800f576:	a201      	add	r2, pc, #4	; (adr r2, 800f57c <CDC_Control_FS+0x1c>)
 800f578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f57c:	0800f60d 	.word	0x0800f60d
 800f580:	0800f60d 	.word	0x0800f60d
 800f584:	0800f60d 	.word	0x0800f60d
 800f588:	0800f60d 	.word	0x0800f60d
 800f58c:	0800f60d 	.word	0x0800f60d
 800f590:	0800f60d 	.word	0x0800f60d
 800f594:	0800f60d 	.word	0x0800f60d
 800f598:	0800f60d 	.word	0x0800f60d
 800f59c:	0800f60d 	.word	0x0800f60d
 800f5a0:	0800f60d 	.word	0x0800f60d
 800f5a4:	0800f60d 	.word	0x0800f60d
 800f5a8:	0800f60d 	.word	0x0800f60d
 800f5ac:	0800f60d 	.word	0x0800f60d
 800f5b0:	0800f60d 	.word	0x0800f60d
 800f5b4:	0800f60d 	.word	0x0800f60d
 800f5b8:	0800f60d 	.word	0x0800f60d
 800f5bc:	0800f60d 	.word	0x0800f60d
 800f5c0:	0800f60d 	.word	0x0800f60d
 800f5c4:	0800f60d 	.word	0x0800f60d
 800f5c8:	0800f60d 	.word	0x0800f60d
 800f5cc:	0800f60d 	.word	0x0800f60d
 800f5d0:	0800f60d 	.word	0x0800f60d
 800f5d4:	0800f60d 	.word	0x0800f60d
 800f5d8:	0800f60d 	.word	0x0800f60d
 800f5dc:	0800f60d 	.word	0x0800f60d
 800f5e0:	0800f60d 	.word	0x0800f60d
 800f5e4:	0800f60d 	.word	0x0800f60d
 800f5e8:	0800f60d 	.word	0x0800f60d
 800f5ec:	0800f60d 	.word	0x0800f60d
 800f5f0:	0800f60d 	.word	0x0800f60d
 800f5f4:	0800f60d 	.word	0x0800f60d
 800f5f8:	0800f60d 	.word	0x0800f60d
 800f5fc:	0800f60d 	.word	0x0800f60d
 800f600:	0800f60d 	.word	0x0800f60d
 800f604:	0800f60d 	.word	0x0800f60d
 800f608:	0800f60d 	.word	0x0800f60d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f60c:	bf00      	nop
  }

  return (USBD_OK);
 800f60e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f610:	4618      	mov	r0, r3
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f626:	6879      	ldr	r1, [r7, #4]
 800f628:	4808      	ldr	r0, [pc, #32]	; (800f64c <CDC_Receive_FS+0x30>)
 800f62a:	f7fe fbc1 	bl	800ddb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f62e:	4807      	ldr	r0, [pc, #28]	; (800f64c <CDC_Receive_FS+0x30>)
 800f630:	f7fe fc22 	bl	800de78 <USBD_CDC_ReceivePacket>
  pid_setting ((char*)Buf);
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f7f3 fb55 	bl	8002ce4 <pid_setting>
  usb_motor_calibrate ((char*)Buf);
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f7f3 fb3a 	bl	8002cb4 <usb_motor_calibrate>
  return (USBD_OK);
 800f640:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f642:	4618      	mov	r0, r3
 800f644:	3708      	adds	r7, #8
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	20000f68 	.word	0x20000f68

0800f650 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	460b      	mov	r3, r1
 800f65a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f65c:	2300      	movs	r3, #0
 800f65e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f660:	4b0d      	ldr	r3, [pc, #52]	; (800f698 <CDC_Transmit_FS+0x48>)
 800f662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f666:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d001      	beq.n	800f676 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f672:	2301      	movs	r3, #1
 800f674:	e00b      	b.n	800f68e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f676:	887b      	ldrh	r3, [r7, #2]
 800f678:	461a      	mov	r2, r3
 800f67a:	6879      	ldr	r1, [r7, #4]
 800f67c:	4806      	ldr	r0, [pc, #24]	; (800f698 <CDC_Transmit_FS+0x48>)
 800f67e:	f7fe fb75 	bl	800dd6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f682:	4805      	ldr	r0, [pc, #20]	; (800f698 <CDC_Transmit_FS+0x48>)
 800f684:	f7fe fbb2 	bl	800ddec <USBD_CDC_TransmitPacket>
 800f688:	4603      	mov	r3, r0
 800f68a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3710      	adds	r7, #16
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	20000f68 	.word	0x20000f68

0800f69c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b087      	sub	sp, #28
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	4613      	mov	r3, r2
 800f6a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f6ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	371c      	adds	r7, #28
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr
	...

0800f6c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	6039      	str	r1, [r7, #0]
 800f6ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	2212      	movs	r2, #18
 800f6d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f6d2:	4b03      	ldr	r3, [pc, #12]	; (800f6e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	200000cc 	.word	0x200000cc

0800f6e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	6039      	str	r1, [r7, #0]
 800f6ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	2204      	movs	r2, #4
 800f6f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f6f6:	4b03      	ldr	r3, [pc, #12]	; (800f704 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	370c      	adds	r7, #12
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr
 800f704:	200000e0 	.word	0x200000e0

0800f708 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	4603      	mov	r3, r0
 800f710:	6039      	str	r1, [r7, #0]
 800f712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f714:	79fb      	ldrb	r3, [r7, #7]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d105      	bne.n	800f726 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f71a:	683a      	ldr	r2, [r7, #0]
 800f71c:	4907      	ldr	r1, [pc, #28]	; (800f73c <USBD_FS_ProductStrDescriptor+0x34>)
 800f71e:	4808      	ldr	r0, [pc, #32]	; (800f740 <USBD_FS_ProductStrDescriptor+0x38>)
 800f720:	f7ff fdf2 	bl	800f308 <USBD_GetString>
 800f724:	e004      	b.n	800f730 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f726:	683a      	ldr	r2, [r7, #0]
 800f728:	4904      	ldr	r1, [pc, #16]	; (800f73c <USBD_FS_ProductStrDescriptor+0x34>)
 800f72a:	4805      	ldr	r0, [pc, #20]	; (800f740 <USBD_FS_ProductStrDescriptor+0x38>)
 800f72c:	f7ff fdec 	bl	800f308 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f730:	4b02      	ldr	r3, [pc, #8]	; (800f73c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f732:	4618      	mov	r0, r3
 800f734:	3708      	adds	r7, #8
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	20002244 	.word	0x20002244
 800f740:	08013f58 	.word	0x08013f58

0800f744 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	4603      	mov	r3, r0
 800f74c:	6039      	str	r1, [r7, #0]
 800f74e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f750:	683a      	ldr	r2, [r7, #0]
 800f752:	4904      	ldr	r1, [pc, #16]	; (800f764 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f754:	4804      	ldr	r0, [pc, #16]	; (800f768 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f756:	f7ff fdd7 	bl	800f308 <USBD_GetString>
  return USBD_StrDesc;
 800f75a:	4b02      	ldr	r3, [pc, #8]	; (800f764 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}
 800f764:	20002244 	.word	0x20002244
 800f768:	08013f70 	.word	0x08013f70

0800f76c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	4603      	mov	r3, r0
 800f774:	6039      	str	r1, [r7, #0]
 800f776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	221a      	movs	r2, #26
 800f77c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f77e:	f000 f843 	bl	800f808 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f782:	4b02      	ldr	r3, [pc, #8]	; (800f78c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f784:	4618      	mov	r0, r3
 800f786:	3708      	adds	r7, #8
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}
 800f78c:	200000e4 	.word	0x200000e4

0800f790 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	4603      	mov	r3, r0
 800f798:	6039      	str	r1, [r7, #0]
 800f79a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f79c:	79fb      	ldrb	r3, [r7, #7]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d105      	bne.n	800f7ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f7a2:	683a      	ldr	r2, [r7, #0]
 800f7a4:	4907      	ldr	r1, [pc, #28]	; (800f7c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f7a6:	4808      	ldr	r0, [pc, #32]	; (800f7c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f7a8:	f7ff fdae 	bl	800f308 <USBD_GetString>
 800f7ac:	e004      	b.n	800f7b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f7ae:	683a      	ldr	r2, [r7, #0]
 800f7b0:	4904      	ldr	r1, [pc, #16]	; (800f7c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f7b2:	4805      	ldr	r0, [pc, #20]	; (800f7c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f7b4:	f7ff fda8 	bl	800f308 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7b8:	4b02      	ldr	r3, [pc, #8]	; (800f7c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3708      	adds	r7, #8
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	20002244 	.word	0x20002244
 800f7c8:	08013f84 	.word	0x08013f84

0800f7cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	6039      	str	r1, [r7, #0]
 800f7d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f7d8:	79fb      	ldrb	r3, [r7, #7]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d105      	bne.n	800f7ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7de:	683a      	ldr	r2, [r7, #0]
 800f7e0:	4907      	ldr	r1, [pc, #28]	; (800f800 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7e2:	4808      	ldr	r0, [pc, #32]	; (800f804 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7e4:	f7ff fd90 	bl	800f308 <USBD_GetString>
 800f7e8:	e004      	b.n	800f7f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7ea:	683a      	ldr	r2, [r7, #0]
 800f7ec:	4904      	ldr	r1, [pc, #16]	; (800f800 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7ee:	4805      	ldr	r0, [pc, #20]	; (800f804 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7f0:	f7ff fd8a 	bl	800f308 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7f4:	4b02      	ldr	r3, [pc, #8]	; (800f800 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3708      	adds	r7, #8
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	20002244 	.word	0x20002244
 800f804:	08013f90 	.word	0x08013f90

0800f808 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b084      	sub	sp, #16
 800f80c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f80e:	4b0f      	ldr	r3, [pc, #60]	; (800f84c <Get_SerialNum+0x44>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f814:	4b0e      	ldr	r3, [pc, #56]	; (800f850 <Get_SerialNum+0x48>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f81a:	4b0e      	ldr	r3, [pc, #56]	; (800f854 <Get_SerialNum+0x4c>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f820:	68fa      	ldr	r2, [r7, #12]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4413      	add	r3, r2
 800f826:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d009      	beq.n	800f842 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f82e:	2208      	movs	r2, #8
 800f830:	4909      	ldr	r1, [pc, #36]	; (800f858 <Get_SerialNum+0x50>)
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	f000 f814 	bl	800f860 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f838:	2204      	movs	r2, #4
 800f83a:	4908      	ldr	r1, [pc, #32]	; (800f85c <Get_SerialNum+0x54>)
 800f83c:	68b8      	ldr	r0, [r7, #8]
 800f83e:	f000 f80f 	bl	800f860 <IntToUnicode>
  }
}
 800f842:	bf00      	nop
 800f844:	3710      	adds	r7, #16
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
 800f84a:	bf00      	nop
 800f84c:	1fff7a10 	.word	0x1fff7a10
 800f850:	1fff7a14 	.word	0x1fff7a14
 800f854:	1fff7a18 	.word	0x1fff7a18
 800f858:	200000e6 	.word	0x200000e6
 800f85c:	200000f6 	.word	0x200000f6

0800f860 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f860:	b480      	push	{r7}
 800f862:	b087      	sub	sp, #28
 800f864:	af00      	add	r7, sp, #0
 800f866:	60f8      	str	r0, [r7, #12]
 800f868:	60b9      	str	r1, [r7, #8]
 800f86a:	4613      	mov	r3, r2
 800f86c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f86e:	2300      	movs	r3, #0
 800f870:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f872:	2300      	movs	r3, #0
 800f874:	75fb      	strb	r3, [r7, #23]
 800f876:	e027      	b.n	800f8c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	0f1b      	lsrs	r3, r3, #28
 800f87c:	2b09      	cmp	r3, #9
 800f87e:	d80b      	bhi.n	800f898 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	0f1b      	lsrs	r3, r3, #28
 800f884:	b2da      	uxtb	r2, r3
 800f886:	7dfb      	ldrb	r3, [r7, #23]
 800f888:	005b      	lsls	r3, r3, #1
 800f88a:	4619      	mov	r1, r3
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	440b      	add	r3, r1
 800f890:	3230      	adds	r2, #48	; 0x30
 800f892:	b2d2      	uxtb	r2, r2
 800f894:	701a      	strb	r2, [r3, #0]
 800f896:	e00a      	b.n	800f8ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	0f1b      	lsrs	r3, r3, #28
 800f89c:	b2da      	uxtb	r2, r3
 800f89e:	7dfb      	ldrb	r3, [r7, #23]
 800f8a0:	005b      	lsls	r3, r3, #1
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	440b      	add	r3, r1
 800f8a8:	3237      	adds	r2, #55	; 0x37
 800f8aa:	b2d2      	uxtb	r2, r2
 800f8ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	011b      	lsls	r3, r3, #4
 800f8b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f8b4:	7dfb      	ldrb	r3, [r7, #23]
 800f8b6:	005b      	lsls	r3, r3, #1
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	68ba      	ldr	r2, [r7, #8]
 800f8bc:	4413      	add	r3, r2
 800f8be:	2200      	movs	r2, #0
 800f8c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f8c2:	7dfb      	ldrb	r3, [r7, #23]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	75fb      	strb	r3, [r7, #23]
 800f8c8:	7dfa      	ldrb	r2, [r7, #23]
 800f8ca:	79fb      	ldrb	r3, [r7, #7]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d3d3      	bcc.n	800f878 <IntToUnicode+0x18>
  }
}
 800f8d0:	bf00      	nop
 800f8d2:	bf00      	nop
 800f8d4:	371c      	adds	r7, #28
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8dc:	4770      	bx	lr
	...

0800f8e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b08a      	sub	sp, #40	; 0x28
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f8e8:	f107 0314 	add.w	r3, r7, #20
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	601a      	str	r2, [r3, #0]
 800f8f0:	605a      	str	r2, [r3, #4]
 800f8f2:	609a      	str	r2, [r3, #8]
 800f8f4:	60da      	str	r2, [r3, #12]
 800f8f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f900:	d13a      	bne.n	800f978 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f902:	2300      	movs	r3, #0
 800f904:	613b      	str	r3, [r7, #16]
 800f906:	4b1e      	ldr	r3, [pc, #120]	; (800f980 <HAL_PCD_MspInit+0xa0>)
 800f908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f90a:	4a1d      	ldr	r2, [pc, #116]	; (800f980 <HAL_PCD_MspInit+0xa0>)
 800f90c:	f043 0301 	orr.w	r3, r3, #1
 800f910:	6313      	str	r3, [r2, #48]	; 0x30
 800f912:	4b1b      	ldr	r3, [pc, #108]	; (800f980 <HAL_PCD_MspInit+0xa0>)
 800f914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f916:	f003 0301 	and.w	r3, r3, #1
 800f91a:	613b      	str	r3, [r7, #16]
 800f91c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f91e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f924:	2302      	movs	r3, #2
 800f926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f928:	2300      	movs	r3, #0
 800f92a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f92c:	2303      	movs	r3, #3
 800f92e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f930:	230a      	movs	r3, #10
 800f932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f934:	f107 0314 	add.w	r3, r7, #20
 800f938:	4619      	mov	r1, r3
 800f93a:	4812      	ldr	r0, [pc, #72]	; (800f984 <HAL_PCD_MspInit+0xa4>)
 800f93c:	f7f8 fa22 	bl	8007d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f940:	4b0f      	ldr	r3, [pc, #60]	; (800f980 <HAL_PCD_MspInit+0xa0>)
 800f942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f944:	4a0e      	ldr	r2, [pc, #56]	; (800f980 <HAL_PCD_MspInit+0xa0>)
 800f946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f94a:	6353      	str	r3, [r2, #52]	; 0x34
 800f94c:	2300      	movs	r3, #0
 800f94e:	60fb      	str	r3, [r7, #12]
 800f950:	4b0b      	ldr	r3, [pc, #44]	; (800f980 <HAL_PCD_MspInit+0xa0>)
 800f952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f954:	4a0a      	ldr	r2, [pc, #40]	; (800f980 <HAL_PCD_MspInit+0xa0>)
 800f956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f95a:	6453      	str	r3, [r2, #68]	; 0x44
 800f95c:	4b08      	ldr	r3, [pc, #32]	; (800f980 <HAL_PCD_MspInit+0xa0>)
 800f95e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f964:	60fb      	str	r3, [r7, #12]
 800f966:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f968:	2200      	movs	r2, #0
 800f96a:	2100      	movs	r1, #0
 800f96c:	2043      	movs	r0, #67	; 0x43
 800f96e:	f7f7 fc42 	bl	80071f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f972:	2043      	movs	r0, #67	; 0x43
 800f974:	f7f7 fc5b 	bl	800722e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f978:	bf00      	nop
 800f97a:	3728      	adds	r7, #40	; 0x28
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	40023800 	.word	0x40023800
 800f984:	40020000 	.word	0x40020000

0800f988 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f99c:	4619      	mov	r1, r3
 800f99e:	4610      	mov	r0, r2
 800f9a0:	f7fe fb53 	bl	800e04a <USBD_LL_SetupStage>
}
 800f9a4:	bf00      	nop
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f9be:	78fa      	ldrb	r2, [r7, #3]
 800f9c0:	6879      	ldr	r1, [r7, #4]
 800f9c2:	4613      	mov	r3, r2
 800f9c4:	00db      	lsls	r3, r3, #3
 800f9c6:	4413      	add	r3, r2
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	440b      	add	r3, r1
 800f9cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	78fb      	ldrb	r3, [r7, #3]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	f7fe fb8d 	bl	800e0f4 <USBD_LL_DataOutStage>
}
 800f9da:	bf00      	nop
 800f9dc:	3708      	adds	r7, #8
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}

0800f9e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9e2:	b580      	push	{r7, lr}
 800f9e4:	b082      	sub	sp, #8
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	460b      	mov	r3, r1
 800f9ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f9f4:	78fa      	ldrb	r2, [r7, #3]
 800f9f6:	6879      	ldr	r1, [r7, #4]
 800f9f8:	4613      	mov	r3, r2
 800f9fa:	00db      	lsls	r3, r3, #3
 800f9fc:	4413      	add	r3, r2
 800f9fe:	009b      	lsls	r3, r3, #2
 800fa00:	440b      	add	r3, r1
 800fa02:	334c      	adds	r3, #76	; 0x4c
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	78fb      	ldrb	r3, [r7, #3]
 800fa08:	4619      	mov	r1, r3
 800fa0a:	f7fe fc26 	bl	800e25a <USBD_LL_DataInStage>
}
 800fa0e:	bf00      	nop
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b082      	sub	sp, #8
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fe fd5a 	bl	800e4de <USBD_LL_SOF>
}
 800fa2a:	bf00      	nop
 800fa2c:	3708      	adds	r7, #8
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b084      	sub	sp, #16
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d102      	bne.n	800fa4c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fa46:	2300      	movs	r3, #0
 800fa48:	73fb      	strb	r3, [r7, #15]
 800fa4a:	e008      	b.n	800fa5e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	2b02      	cmp	r3, #2
 800fa52:	d102      	bne.n	800fa5a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fa54:	2301      	movs	r3, #1
 800fa56:	73fb      	strb	r3, [r7, #15]
 800fa58:	e001      	b.n	800fa5e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fa5a:	f7f4 fcaf 	bl	80043bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa64:	7bfa      	ldrb	r2, [r7, #15]
 800fa66:	4611      	mov	r1, r2
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fe fcfa 	bl	800e462 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fe fca2 	bl	800e3be <USBD_LL_Reset>
}
 800fa7a:	bf00      	nop
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
	...

0800fa84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fe fcf5 	bl	800e482 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	6812      	ldr	r2, [r2, #0]
 800faa6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800faaa:	f043 0301 	orr.w	r3, r3, #1
 800faae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6a1b      	ldr	r3, [r3, #32]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d005      	beq.n	800fac4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fab8:	4b04      	ldr	r3, [pc, #16]	; (800facc <HAL_PCD_SuspendCallback+0x48>)
 800faba:	691b      	ldr	r3, [r3, #16]
 800fabc:	4a03      	ldr	r2, [pc, #12]	; (800facc <HAL_PCD_SuspendCallback+0x48>)
 800fabe:	f043 0306 	orr.w	r3, r3, #6
 800fac2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fac4:	bf00      	nop
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	e000ed00 	.word	0xe000ed00

0800fad0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fe fce5 	bl	800e4ae <USBD_LL_Resume>
}
 800fae4:	bf00      	nop
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	460b      	mov	r3, r1
 800faf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fafe:	78fa      	ldrb	r2, [r7, #3]
 800fb00:	4611      	mov	r1, r2
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fe fd3d 	bl	800e582 <USBD_LL_IsoOUTIncomplete>
}
 800fb08:	bf00      	nop
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	460b      	mov	r3, r1
 800fb1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb22:	78fa      	ldrb	r2, [r7, #3]
 800fb24:	4611      	mov	r1, r2
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fe fcf9 	bl	800e51e <USBD_LL_IsoINIncomplete>
}
 800fb2c:	bf00      	nop
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fe fd4f 	bl	800e5e6 <USBD_LL_DevConnected>
}
 800fb48:	bf00      	nop
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fe fd4c 	bl	800e5fc <USBD_LL_DevDisconnected>
}
 800fb64:	bf00      	nop
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d13c      	bne.n	800fbf6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fb7c:	4a20      	ldr	r2, [pc, #128]	; (800fc00 <USBD_LL_Init+0x94>)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	4a1e      	ldr	r2, [pc, #120]	; (800fc00 <USBD_LL_Init+0x94>)
 800fb88:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fb8c:	4b1c      	ldr	r3, [pc, #112]	; (800fc00 <USBD_LL_Init+0x94>)
 800fb8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fb92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fb94:	4b1a      	ldr	r3, [pc, #104]	; (800fc00 <USBD_LL_Init+0x94>)
 800fb96:	2204      	movs	r2, #4
 800fb98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fb9a:	4b19      	ldr	r3, [pc, #100]	; (800fc00 <USBD_LL_Init+0x94>)
 800fb9c:	2202      	movs	r2, #2
 800fb9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fba0:	4b17      	ldr	r3, [pc, #92]	; (800fc00 <USBD_LL_Init+0x94>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fba6:	4b16      	ldr	r3, [pc, #88]	; (800fc00 <USBD_LL_Init+0x94>)
 800fba8:	2202      	movs	r2, #2
 800fbaa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fbac:	4b14      	ldr	r3, [pc, #80]	; (800fc00 <USBD_LL_Init+0x94>)
 800fbae:	2200      	movs	r2, #0
 800fbb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fbb2:	4b13      	ldr	r3, [pc, #76]	; (800fc00 <USBD_LL_Init+0x94>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fbb8:	4b11      	ldr	r3, [pc, #68]	; (800fc00 <USBD_LL_Init+0x94>)
 800fbba:	2200      	movs	r2, #0
 800fbbc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fbbe:	4b10      	ldr	r3, [pc, #64]	; (800fc00 <USBD_LL_Init+0x94>)
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fbc4:	4b0e      	ldr	r3, [pc, #56]	; (800fc00 <USBD_LL_Init+0x94>)
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fbca:	480d      	ldr	r0, [pc, #52]	; (800fc00 <USBD_LL_Init+0x94>)
 800fbcc:	f7f8 faa8 	bl	8008120 <HAL_PCD_Init>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d001      	beq.n	800fbda <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fbd6:	f7f4 fbf1 	bl	80043bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fbda:	2180      	movs	r1, #128	; 0x80
 800fbdc:	4808      	ldr	r0, [pc, #32]	; (800fc00 <USBD_LL_Init+0x94>)
 800fbde:	f7f9 fd00 	bl	80095e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fbe2:	2240      	movs	r2, #64	; 0x40
 800fbe4:	2100      	movs	r1, #0
 800fbe6:	4806      	ldr	r0, [pc, #24]	; (800fc00 <USBD_LL_Init+0x94>)
 800fbe8:	f7f9 fcb4 	bl	8009554 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fbec:	2280      	movs	r2, #128	; 0x80
 800fbee:	2101      	movs	r1, #1
 800fbf0:	4803      	ldr	r0, [pc, #12]	; (800fc00 <USBD_LL_Init+0x94>)
 800fbf2:	f7f9 fcaf 	bl	8009554 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fbf6:	2300      	movs	r3, #0
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	20002444 	.word	0x20002444

0800fc04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b084      	sub	sp, #16
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc10:	2300      	movs	r3, #0
 800fc12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7f8 fb9d 	bl	800835a <HAL_PCD_Start>
 800fc20:	4603      	mov	r3, r0
 800fc22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc24:	7bfb      	ldrb	r3, [r7, #15]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f000 f942 	bl	800feb0 <USBD_Get_USB_Status>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc30:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3710      	adds	r7, #16
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fc3a:	b580      	push	{r7, lr}
 800fc3c:	b084      	sub	sp, #16
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
 800fc42:	4608      	mov	r0, r1
 800fc44:	4611      	mov	r1, r2
 800fc46:	461a      	mov	r2, r3
 800fc48:	4603      	mov	r3, r0
 800fc4a:	70fb      	strb	r3, [r7, #3]
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	70bb      	strb	r3, [r7, #2]
 800fc50:	4613      	mov	r3, r2
 800fc52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc54:	2300      	movs	r3, #0
 800fc56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc62:	78bb      	ldrb	r3, [r7, #2]
 800fc64:	883a      	ldrh	r2, [r7, #0]
 800fc66:	78f9      	ldrb	r1, [r7, #3]
 800fc68:	f7f9 f86e 	bl	8008d48 <HAL_PCD_EP_Open>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc70:	7bfb      	ldrb	r3, [r7, #15]
 800fc72:	4618      	mov	r0, r3
 800fc74:	f000 f91c 	bl	800feb0 <USBD_Get_USB_Status>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3710      	adds	r7, #16
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}

0800fc86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc86:	b580      	push	{r7, lr}
 800fc88:	b084      	sub	sp, #16
 800fc8a:	af00      	add	r7, sp, #0
 800fc8c:	6078      	str	r0, [r7, #4]
 800fc8e:	460b      	mov	r3, r1
 800fc90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc92:	2300      	movs	r3, #0
 800fc94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc96:	2300      	movs	r3, #0
 800fc98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fca0:	78fa      	ldrb	r2, [r7, #3]
 800fca2:	4611      	mov	r1, r2
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7f9 f8b7 	bl	8008e18 <HAL_PCD_EP_Close>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcae:	7bfb      	ldrb	r3, [r7, #15]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f000 f8fd 	bl	800feb0 <USBD_Get_USB_Status>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcba:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3710      	adds	r7, #16
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	460b      	mov	r3, r1
 800fcce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcde:	78fa      	ldrb	r2, [r7, #3]
 800fce0:	4611      	mov	r1, r2
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7f9 f98f 	bl	8009006 <HAL_PCD_EP_SetStall>
 800fce8:	4603      	mov	r3, r0
 800fcea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcec:	7bfb      	ldrb	r3, [r7, #15]
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f000 f8de 	bl	800feb0 <USBD_Get_USB_Status>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3710      	adds	r7, #16
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}

0800fd02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd02:	b580      	push	{r7, lr}
 800fd04:	b084      	sub	sp, #16
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
 800fd0a:	460b      	mov	r3, r1
 800fd0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd12:	2300      	movs	r3, #0
 800fd14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd1c:	78fa      	ldrb	r2, [r7, #3]
 800fd1e:	4611      	mov	r1, r2
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7f9 f9d4 	bl	80090ce <HAL_PCD_EP_ClrStall>
 800fd26:	4603      	mov	r3, r0
 800fd28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd2a:	7bfb      	ldrb	r3, [r7, #15]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f000 f8bf 	bl	800feb0 <USBD_Get_USB_Status>
 800fd32:	4603      	mov	r3, r0
 800fd34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd36:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3710      	adds	r7, #16
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b085      	sub	sp, #20
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	460b      	mov	r3, r1
 800fd4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fd54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	da0b      	bge.n	800fd74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fd5c:	78fb      	ldrb	r3, [r7, #3]
 800fd5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd62:	68f9      	ldr	r1, [r7, #12]
 800fd64:	4613      	mov	r3, r2
 800fd66:	00db      	lsls	r3, r3, #3
 800fd68:	4413      	add	r3, r2
 800fd6a:	009b      	lsls	r3, r3, #2
 800fd6c:	440b      	add	r3, r1
 800fd6e:	333e      	adds	r3, #62	; 0x3e
 800fd70:	781b      	ldrb	r3, [r3, #0]
 800fd72:	e00b      	b.n	800fd8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fd74:	78fb      	ldrb	r3, [r7, #3]
 800fd76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd7a:	68f9      	ldr	r1, [r7, #12]
 800fd7c:	4613      	mov	r3, r2
 800fd7e:	00db      	lsls	r3, r3, #3
 800fd80:	4413      	add	r3, r2
 800fd82:	009b      	lsls	r3, r3, #2
 800fd84:	440b      	add	r3, r1
 800fd86:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fd8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3714      	adds	r7, #20
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr

0800fd98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	460b      	mov	r3, r1
 800fda2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fda4:	2300      	movs	r3, #0
 800fda6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fdb2:	78fa      	ldrb	r2, [r7, #3]
 800fdb4:	4611      	mov	r1, r2
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7f8 ffa1 	bl	8008cfe <HAL_PCD_SetAddress>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdc0:	7bfb      	ldrb	r3, [r7, #15]
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f000 f874 	bl	800feb0 <USBD_Get_USB_Status>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3710      	adds	r7, #16
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}

0800fdd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fdd6:	b580      	push	{r7, lr}
 800fdd8:	b086      	sub	sp, #24
 800fdda:	af00      	add	r7, sp, #0
 800fddc:	60f8      	str	r0, [r7, #12]
 800fdde:	607a      	str	r2, [r7, #4]
 800fde0:	603b      	str	r3, [r7, #0]
 800fde2:	460b      	mov	r3, r1
 800fde4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fde6:	2300      	movs	r3, #0
 800fde8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdea:	2300      	movs	r3, #0
 800fdec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fdf4:	7af9      	ldrb	r1, [r7, #11]
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	f7f9 f8ba 	bl	8008f72 <HAL_PCD_EP_Transmit>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe02:	7dfb      	ldrb	r3, [r7, #23]
 800fe04:	4618      	mov	r0, r3
 800fe06:	f000 f853 	bl	800feb0 <USBD_Get_USB_Status>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe0e:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3718      	adds	r7, #24
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b086      	sub	sp, #24
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	607a      	str	r2, [r7, #4]
 800fe22:	603b      	str	r3, [r7, #0]
 800fe24:	460b      	mov	r3, r1
 800fe26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fe36:	7af9      	ldrb	r1, [r7, #11]
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	f7f9 f836 	bl	8008eac <HAL_PCD_EP_Receive>
 800fe40:	4603      	mov	r3, r0
 800fe42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe44:	7dfb      	ldrb	r3, [r7, #23]
 800fe46:	4618      	mov	r0, r3
 800fe48:	f000 f832 	bl	800feb0 <USBD_Get_USB_Status>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe50:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3718      	adds	r7, #24
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}

0800fe5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe5a:	b580      	push	{r7, lr}
 800fe5c:	b082      	sub	sp, #8
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	6078      	str	r0, [r7, #4]
 800fe62:	460b      	mov	r3, r1
 800fe64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe6c:	78fa      	ldrb	r2, [r7, #3]
 800fe6e:	4611      	mov	r1, r2
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7f9 f866 	bl	8008f42 <HAL_PCD_EP_GetRxCount>
 800fe76:	4603      	mov	r3, r0
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3708      	adds	r7, #8
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fe88:	4b03      	ldr	r3, [pc, #12]	; (800fe98 <USBD_static_malloc+0x18>)
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	370c      	adds	r7, #12
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr
 800fe96:	bf00      	nop
 800fe98:	20002950 	.word	0x20002950

0800fe9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]

}
 800fea4:	bf00      	nop
 800fea6:	370c      	adds	r7, #12
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr

0800feb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b085      	sub	sp, #20
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	4603      	mov	r3, r0
 800feb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800feba:	2300      	movs	r3, #0
 800febc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800febe:	79fb      	ldrb	r3, [r7, #7]
 800fec0:	2b03      	cmp	r3, #3
 800fec2:	d817      	bhi.n	800fef4 <USBD_Get_USB_Status+0x44>
 800fec4:	a201      	add	r2, pc, #4	; (adr r2, 800fecc <USBD_Get_USB_Status+0x1c>)
 800fec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feca:	bf00      	nop
 800fecc:	0800fedd 	.word	0x0800fedd
 800fed0:	0800fee3 	.word	0x0800fee3
 800fed4:	0800fee9 	.word	0x0800fee9
 800fed8:	0800feef 	.word	0x0800feef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fedc:	2300      	movs	r3, #0
 800fede:	73fb      	strb	r3, [r7, #15]
    break;
 800fee0:	e00b      	b.n	800fefa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fee2:	2303      	movs	r3, #3
 800fee4:	73fb      	strb	r3, [r7, #15]
    break;
 800fee6:	e008      	b.n	800fefa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fee8:	2301      	movs	r3, #1
 800feea:	73fb      	strb	r3, [r7, #15]
    break;
 800feec:	e005      	b.n	800fefa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800feee:	2303      	movs	r3, #3
 800fef0:	73fb      	strb	r3, [r7, #15]
    break;
 800fef2:	e002      	b.n	800fefa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fef4:	2303      	movs	r3, #3
 800fef6:	73fb      	strb	r3, [r7, #15]
    break;
 800fef8:	bf00      	nop
  }
  return usb_status;
 800fefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3714      	adds	r7, #20
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <__errno>:
 800ff08:	4b01      	ldr	r3, [pc, #4]	; (800ff10 <__errno+0x8>)
 800ff0a:	6818      	ldr	r0, [r3, #0]
 800ff0c:	4770      	bx	lr
 800ff0e:	bf00      	nop
 800ff10:	20000100 	.word	0x20000100

0800ff14 <__libc_init_array>:
 800ff14:	b570      	push	{r4, r5, r6, lr}
 800ff16:	4d0d      	ldr	r5, [pc, #52]	; (800ff4c <__libc_init_array+0x38>)
 800ff18:	4c0d      	ldr	r4, [pc, #52]	; (800ff50 <__libc_init_array+0x3c>)
 800ff1a:	1b64      	subs	r4, r4, r5
 800ff1c:	10a4      	asrs	r4, r4, #2
 800ff1e:	2600      	movs	r6, #0
 800ff20:	42a6      	cmp	r6, r4
 800ff22:	d109      	bne.n	800ff38 <__libc_init_array+0x24>
 800ff24:	4d0b      	ldr	r5, [pc, #44]	; (800ff54 <__libc_init_array+0x40>)
 800ff26:	4c0c      	ldr	r4, [pc, #48]	; (800ff58 <__libc_init_array+0x44>)
 800ff28:	f003 ffa0 	bl	8013e6c <_init>
 800ff2c:	1b64      	subs	r4, r4, r5
 800ff2e:	10a4      	asrs	r4, r4, #2
 800ff30:	2600      	movs	r6, #0
 800ff32:	42a6      	cmp	r6, r4
 800ff34:	d105      	bne.n	800ff42 <__libc_init_array+0x2e>
 800ff36:	bd70      	pop	{r4, r5, r6, pc}
 800ff38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff3c:	4798      	blx	r3
 800ff3e:	3601      	adds	r6, #1
 800ff40:	e7ee      	b.n	800ff20 <__libc_init_array+0xc>
 800ff42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff46:	4798      	blx	r3
 800ff48:	3601      	adds	r6, #1
 800ff4a:	e7f2      	b.n	800ff32 <__libc_init_array+0x1e>
 800ff4c:	08014578 	.word	0x08014578
 800ff50:	08014578 	.word	0x08014578
 800ff54:	08014578 	.word	0x08014578
 800ff58:	0801457c 	.word	0x0801457c

0800ff5c <memset>:
 800ff5c:	4402      	add	r2, r0
 800ff5e:	4603      	mov	r3, r0
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d100      	bne.n	800ff66 <memset+0xa>
 800ff64:	4770      	bx	lr
 800ff66:	f803 1b01 	strb.w	r1, [r3], #1
 800ff6a:	e7f9      	b.n	800ff60 <memset+0x4>

0800ff6c <__cvt>:
 800ff6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff70:	ec55 4b10 	vmov	r4, r5, d0
 800ff74:	2d00      	cmp	r5, #0
 800ff76:	460e      	mov	r6, r1
 800ff78:	4619      	mov	r1, r3
 800ff7a:	462b      	mov	r3, r5
 800ff7c:	bfbb      	ittet	lt
 800ff7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ff82:	461d      	movlt	r5, r3
 800ff84:	2300      	movge	r3, #0
 800ff86:	232d      	movlt	r3, #45	; 0x2d
 800ff88:	700b      	strb	r3, [r1, #0]
 800ff8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ff90:	4691      	mov	r9, r2
 800ff92:	f023 0820 	bic.w	r8, r3, #32
 800ff96:	bfbc      	itt	lt
 800ff98:	4622      	movlt	r2, r4
 800ff9a:	4614      	movlt	r4, r2
 800ff9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ffa0:	d005      	beq.n	800ffae <__cvt+0x42>
 800ffa2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ffa6:	d100      	bne.n	800ffaa <__cvt+0x3e>
 800ffa8:	3601      	adds	r6, #1
 800ffaa:	2102      	movs	r1, #2
 800ffac:	e000      	b.n	800ffb0 <__cvt+0x44>
 800ffae:	2103      	movs	r1, #3
 800ffb0:	ab03      	add	r3, sp, #12
 800ffb2:	9301      	str	r3, [sp, #4]
 800ffb4:	ab02      	add	r3, sp, #8
 800ffb6:	9300      	str	r3, [sp, #0]
 800ffb8:	ec45 4b10 	vmov	d0, r4, r5
 800ffbc:	4653      	mov	r3, sl
 800ffbe:	4632      	mov	r2, r6
 800ffc0:	f000 fcea 	bl	8010998 <_dtoa_r>
 800ffc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ffc8:	4607      	mov	r7, r0
 800ffca:	d102      	bne.n	800ffd2 <__cvt+0x66>
 800ffcc:	f019 0f01 	tst.w	r9, #1
 800ffd0:	d022      	beq.n	8010018 <__cvt+0xac>
 800ffd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ffd6:	eb07 0906 	add.w	r9, r7, r6
 800ffda:	d110      	bne.n	800fffe <__cvt+0x92>
 800ffdc:	783b      	ldrb	r3, [r7, #0]
 800ffde:	2b30      	cmp	r3, #48	; 0x30
 800ffe0:	d10a      	bne.n	800fff8 <__cvt+0x8c>
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	4629      	mov	r1, r5
 800ffea:	f7f0 fd6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffee:	b918      	cbnz	r0, 800fff8 <__cvt+0x8c>
 800fff0:	f1c6 0601 	rsb	r6, r6, #1
 800fff4:	f8ca 6000 	str.w	r6, [sl]
 800fff8:	f8da 3000 	ldr.w	r3, [sl]
 800fffc:	4499      	add	r9, r3
 800fffe:	2200      	movs	r2, #0
 8010000:	2300      	movs	r3, #0
 8010002:	4620      	mov	r0, r4
 8010004:	4629      	mov	r1, r5
 8010006:	f7f0 fd5f 	bl	8000ac8 <__aeabi_dcmpeq>
 801000a:	b108      	cbz	r0, 8010010 <__cvt+0xa4>
 801000c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010010:	2230      	movs	r2, #48	; 0x30
 8010012:	9b03      	ldr	r3, [sp, #12]
 8010014:	454b      	cmp	r3, r9
 8010016:	d307      	bcc.n	8010028 <__cvt+0xbc>
 8010018:	9b03      	ldr	r3, [sp, #12]
 801001a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801001c:	1bdb      	subs	r3, r3, r7
 801001e:	4638      	mov	r0, r7
 8010020:	6013      	str	r3, [r2, #0]
 8010022:	b004      	add	sp, #16
 8010024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010028:	1c59      	adds	r1, r3, #1
 801002a:	9103      	str	r1, [sp, #12]
 801002c:	701a      	strb	r2, [r3, #0]
 801002e:	e7f0      	b.n	8010012 <__cvt+0xa6>

08010030 <__exponent>:
 8010030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010032:	4603      	mov	r3, r0
 8010034:	2900      	cmp	r1, #0
 8010036:	bfb8      	it	lt
 8010038:	4249      	neglt	r1, r1
 801003a:	f803 2b02 	strb.w	r2, [r3], #2
 801003e:	bfb4      	ite	lt
 8010040:	222d      	movlt	r2, #45	; 0x2d
 8010042:	222b      	movge	r2, #43	; 0x2b
 8010044:	2909      	cmp	r1, #9
 8010046:	7042      	strb	r2, [r0, #1]
 8010048:	dd2a      	ble.n	80100a0 <__exponent+0x70>
 801004a:	f10d 0407 	add.w	r4, sp, #7
 801004e:	46a4      	mov	ip, r4
 8010050:	270a      	movs	r7, #10
 8010052:	46a6      	mov	lr, r4
 8010054:	460a      	mov	r2, r1
 8010056:	fb91 f6f7 	sdiv	r6, r1, r7
 801005a:	fb07 1516 	mls	r5, r7, r6, r1
 801005e:	3530      	adds	r5, #48	; 0x30
 8010060:	2a63      	cmp	r2, #99	; 0x63
 8010062:	f104 34ff 	add.w	r4, r4, #4294967295
 8010066:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801006a:	4631      	mov	r1, r6
 801006c:	dcf1      	bgt.n	8010052 <__exponent+0x22>
 801006e:	3130      	adds	r1, #48	; 0x30
 8010070:	f1ae 0502 	sub.w	r5, lr, #2
 8010074:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010078:	1c44      	adds	r4, r0, #1
 801007a:	4629      	mov	r1, r5
 801007c:	4561      	cmp	r1, ip
 801007e:	d30a      	bcc.n	8010096 <__exponent+0x66>
 8010080:	f10d 0209 	add.w	r2, sp, #9
 8010084:	eba2 020e 	sub.w	r2, r2, lr
 8010088:	4565      	cmp	r5, ip
 801008a:	bf88      	it	hi
 801008c:	2200      	movhi	r2, #0
 801008e:	4413      	add	r3, r2
 8010090:	1a18      	subs	r0, r3, r0
 8010092:	b003      	add	sp, #12
 8010094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010096:	f811 2b01 	ldrb.w	r2, [r1], #1
 801009a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801009e:	e7ed      	b.n	801007c <__exponent+0x4c>
 80100a0:	2330      	movs	r3, #48	; 0x30
 80100a2:	3130      	adds	r1, #48	; 0x30
 80100a4:	7083      	strb	r3, [r0, #2]
 80100a6:	70c1      	strb	r1, [r0, #3]
 80100a8:	1d03      	adds	r3, r0, #4
 80100aa:	e7f1      	b.n	8010090 <__exponent+0x60>

080100ac <_printf_float>:
 80100ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b0:	ed2d 8b02 	vpush	{d8}
 80100b4:	b08d      	sub	sp, #52	; 0x34
 80100b6:	460c      	mov	r4, r1
 80100b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80100bc:	4616      	mov	r6, r2
 80100be:	461f      	mov	r7, r3
 80100c0:	4605      	mov	r5, r0
 80100c2:	f001 fa57 	bl	8011574 <_localeconv_r>
 80100c6:	f8d0 a000 	ldr.w	sl, [r0]
 80100ca:	4650      	mov	r0, sl
 80100cc:	f7f0 f880 	bl	80001d0 <strlen>
 80100d0:	2300      	movs	r3, #0
 80100d2:	930a      	str	r3, [sp, #40]	; 0x28
 80100d4:	6823      	ldr	r3, [r4, #0]
 80100d6:	9305      	str	r3, [sp, #20]
 80100d8:	f8d8 3000 	ldr.w	r3, [r8]
 80100dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80100e0:	3307      	adds	r3, #7
 80100e2:	f023 0307 	bic.w	r3, r3, #7
 80100e6:	f103 0208 	add.w	r2, r3, #8
 80100ea:	f8c8 2000 	str.w	r2, [r8]
 80100ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80100f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80100fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80100fe:	9307      	str	r3, [sp, #28]
 8010100:	f8cd 8018 	str.w	r8, [sp, #24]
 8010104:	ee08 0a10 	vmov	s16, r0
 8010108:	4b9f      	ldr	r3, [pc, #636]	; (8010388 <_printf_float+0x2dc>)
 801010a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801010e:	f04f 32ff 	mov.w	r2, #4294967295
 8010112:	f7f0 fd0b 	bl	8000b2c <__aeabi_dcmpun>
 8010116:	bb88      	cbnz	r0, 801017c <_printf_float+0xd0>
 8010118:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801011c:	4b9a      	ldr	r3, [pc, #616]	; (8010388 <_printf_float+0x2dc>)
 801011e:	f04f 32ff 	mov.w	r2, #4294967295
 8010122:	f7f0 fce5 	bl	8000af0 <__aeabi_dcmple>
 8010126:	bb48      	cbnz	r0, 801017c <_printf_float+0xd0>
 8010128:	2200      	movs	r2, #0
 801012a:	2300      	movs	r3, #0
 801012c:	4640      	mov	r0, r8
 801012e:	4649      	mov	r1, r9
 8010130:	f7f0 fcd4 	bl	8000adc <__aeabi_dcmplt>
 8010134:	b110      	cbz	r0, 801013c <_printf_float+0x90>
 8010136:	232d      	movs	r3, #45	; 0x2d
 8010138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801013c:	4b93      	ldr	r3, [pc, #588]	; (801038c <_printf_float+0x2e0>)
 801013e:	4894      	ldr	r0, [pc, #592]	; (8010390 <_printf_float+0x2e4>)
 8010140:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010144:	bf94      	ite	ls
 8010146:	4698      	movls	r8, r3
 8010148:	4680      	movhi	r8, r0
 801014a:	2303      	movs	r3, #3
 801014c:	6123      	str	r3, [r4, #16]
 801014e:	9b05      	ldr	r3, [sp, #20]
 8010150:	f023 0204 	bic.w	r2, r3, #4
 8010154:	6022      	str	r2, [r4, #0]
 8010156:	f04f 0900 	mov.w	r9, #0
 801015a:	9700      	str	r7, [sp, #0]
 801015c:	4633      	mov	r3, r6
 801015e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010160:	4621      	mov	r1, r4
 8010162:	4628      	mov	r0, r5
 8010164:	f000 f9d8 	bl	8010518 <_printf_common>
 8010168:	3001      	adds	r0, #1
 801016a:	f040 8090 	bne.w	801028e <_printf_float+0x1e2>
 801016e:	f04f 30ff 	mov.w	r0, #4294967295
 8010172:	b00d      	add	sp, #52	; 0x34
 8010174:	ecbd 8b02 	vpop	{d8}
 8010178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801017c:	4642      	mov	r2, r8
 801017e:	464b      	mov	r3, r9
 8010180:	4640      	mov	r0, r8
 8010182:	4649      	mov	r1, r9
 8010184:	f7f0 fcd2 	bl	8000b2c <__aeabi_dcmpun>
 8010188:	b140      	cbz	r0, 801019c <_printf_float+0xf0>
 801018a:	464b      	mov	r3, r9
 801018c:	2b00      	cmp	r3, #0
 801018e:	bfbc      	itt	lt
 8010190:	232d      	movlt	r3, #45	; 0x2d
 8010192:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010196:	487f      	ldr	r0, [pc, #508]	; (8010394 <_printf_float+0x2e8>)
 8010198:	4b7f      	ldr	r3, [pc, #508]	; (8010398 <_printf_float+0x2ec>)
 801019a:	e7d1      	b.n	8010140 <_printf_float+0x94>
 801019c:	6863      	ldr	r3, [r4, #4]
 801019e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80101a2:	9206      	str	r2, [sp, #24]
 80101a4:	1c5a      	adds	r2, r3, #1
 80101a6:	d13f      	bne.n	8010228 <_printf_float+0x17c>
 80101a8:	2306      	movs	r3, #6
 80101aa:	6063      	str	r3, [r4, #4]
 80101ac:	9b05      	ldr	r3, [sp, #20]
 80101ae:	6861      	ldr	r1, [r4, #4]
 80101b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80101b4:	2300      	movs	r3, #0
 80101b6:	9303      	str	r3, [sp, #12]
 80101b8:	ab0a      	add	r3, sp, #40	; 0x28
 80101ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80101be:	ab09      	add	r3, sp, #36	; 0x24
 80101c0:	ec49 8b10 	vmov	d0, r8, r9
 80101c4:	9300      	str	r3, [sp, #0]
 80101c6:	6022      	str	r2, [r4, #0]
 80101c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80101cc:	4628      	mov	r0, r5
 80101ce:	f7ff fecd 	bl	800ff6c <__cvt>
 80101d2:	9b06      	ldr	r3, [sp, #24]
 80101d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101d6:	2b47      	cmp	r3, #71	; 0x47
 80101d8:	4680      	mov	r8, r0
 80101da:	d108      	bne.n	80101ee <_printf_float+0x142>
 80101dc:	1cc8      	adds	r0, r1, #3
 80101de:	db02      	blt.n	80101e6 <_printf_float+0x13a>
 80101e0:	6863      	ldr	r3, [r4, #4]
 80101e2:	4299      	cmp	r1, r3
 80101e4:	dd41      	ble.n	801026a <_printf_float+0x1be>
 80101e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80101ea:	fa5f fb8b 	uxtb.w	fp, fp
 80101ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80101f2:	d820      	bhi.n	8010236 <_printf_float+0x18a>
 80101f4:	3901      	subs	r1, #1
 80101f6:	465a      	mov	r2, fp
 80101f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80101fc:	9109      	str	r1, [sp, #36]	; 0x24
 80101fe:	f7ff ff17 	bl	8010030 <__exponent>
 8010202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010204:	1813      	adds	r3, r2, r0
 8010206:	2a01      	cmp	r2, #1
 8010208:	4681      	mov	r9, r0
 801020a:	6123      	str	r3, [r4, #16]
 801020c:	dc02      	bgt.n	8010214 <_printf_float+0x168>
 801020e:	6822      	ldr	r2, [r4, #0]
 8010210:	07d2      	lsls	r2, r2, #31
 8010212:	d501      	bpl.n	8010218 <_printf_float+0x16c>
 8010214:	3301      	adds	r3, #1
 8010216:	6123      	str	r3, [r4, #16]
 8010218:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801021c:	2b00      	cmp	r3, #0
 801021e:	d09c      	beq.n	801015a <_printf_float+0xae>
 8010220:	232d      	movs	r3, #45	; 0x2d
 8010222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010226:	e798      	b.n	801015a <_printf_float+0xae>
 8010228:	9a06      	ldr	r2, [sp, #24]
 801022a:	2a47      	cmp	r2, #71	; 0x47
 801022c:	d1be      	bne.n	80101ac <_printf_float+0x100>
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1bc      	bne.n	80101ac <_printf_float+0x100>
 8010232:	2301      	movs	r3, #1
 8010234:	e7b9      	b.n	80101aa <_printf_float+0xfe>
 8010236:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801023a:	d118      	bne.n	801026e <_printf_float+0x1c2>
 801023c:	2900      	cmp	r1, #0
 801023e:	6863      	ldr	r3, [r4, #4]
 8010240:	dd0b      	ble.n	801025a <_printf_float+0x1ae>
 8010242:	6121      	str	r1, [r4, #16]
 8010244:	b913      	cbnz	r3, 801024c <_printf_float+0x1a0>
 8010246:	6822      	ldr	r2, [r4, #0]
 8010248:	07d0      	lsls	r0, r2, #31
 801024a:	d502      	bpl.n	8010252 <_printf_float+0x1a6>
 801024c:	3301      	adds	r3, #1
 801024e:	440b      	add	r3, r1
 8010250:	6123      	str	r3, [r4, #16]
 8010252:	65a1      	str	r1, [r4, #88]	; 0x58
 8010254:	f04f 0900 	mov.w	r9, #0
 8010258:	e7de      	b.n	8010218 <_printf_float+0x16c>
 801025a:	b913      	cbnz	r3, 8010262 <_printf_float+0x1b6>
 801025c:	6822      	ldr	r2, [r4, #0]
 801025e:	07d2      	lsls	r2, r2, #31
 8010260:	d501      	bpl.n	8010266 <_printf_float+0x1ba>
 8010262:	3302      	adds	r3, #2
 8010264:	e7f4      	b.n	8010250 <_printf_float+0x1a4>
 8010266:	2301      	movs	r3, #1
 8010268:	e7f2      	b.n	8010250 <_printf_float+0x1a4>
 801026a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801026e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010270:	4299      	cmp	r1, r3
 8010272:	db05      	blt.n	8010280 <_printf_float+0x1d4>
 8010274:	6823      	ldr	r3, [r4, #0]
 8010276:	6121      	str	r1, [r4, #16]
 8010278:	07d8      	lsls	r0, r3, #31
 801027a:	d5ea      	bpl.n	8010252 <_printf_float+0x1a6>
 801027c:	1c4b      	adds	r3, r1, #1
 801027e:	e7e7      	b.n	8010250 <_printf_float+0x1a4>
 8010280:	2900      	cmp	r1, #0
 8010282:	bfd4      	ite	le
 8010284:	f1c1 0202 	rsble	r2, r1, #2
 8010288:	2201      	movgt	r2, #1
 801028a:	4413      	add	r3, r2
 801028c:	e7e0      	b.n	8010250 <_printf_float+0x1a4>
 801028e:	6823      	ldr	r3, [r4, #0]
 8010290:	055a      	lsls	r2, r3, #21
 8010292:	d407      	bmi.n	80102a4 <_printf_float+0x1f8>
 8010294:	6923      	ldr	r3, [r4, #16]
 8010296:	4642      	mov	r2, r8
 8010298:	4631      	mov	r1, r6
 801029a:	4628      	mov	r0, r5
 801029c:	47b8      	blx	r7
 801029e:	3001      	adds	r0, #1
 80102a0:	d12c      	bne.n	80102fc <_printf_float+0x250>
 80102a2:	e764      	b.n	801016e <_printf_float+0xc2>
 80102a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80102a8:	f240 80e0 	bls.w	801046c <_printf_float+0x3c0>
 80102ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80102b0:	2200      	movs	r2, #0
 80102b2:	2300      	movs	r3, #0
 80102b4:	f7f0 fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d034      	beq.n	8010326 <_printf_float+0x27a>
 80102bc:	4a37      	ldr	r2, [pc, #220]	; (801039c <_printf_float+0x2f0>)
 80102be:	2301      	movs	r3, #1
 80102c0:	4631      	mov	r1, r6
 80102c2:	4628      	mov	r0, r5
 80102c4:	47b8      	blx	r7
 80102c6:	3001      	adds	r0, #1
 80102c8:	f43f af51 	beq.w	801016e <_printf_float+0xc2>
 80102cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102d0:	429a      	cmp	r2, r3
 80102d2:	db02      	blt.n	80102da <_printf_float+0x22e>
 80102d4:	6823      	ldr	r3, [r4, #0]
 80102d6:	07d8      	lsls	r0, r3, #31
 80102d8:	d510      	bpl.n	80102fc <_printf_float+0x250>
 80102da:	ee18 3a10 	vmov	r3, s16
 80102de:	4652      	mov	r2, sl
 80102e0:	4631      	mov	r1, r6
 80102e2:	4628      	mov	r0, r5
 80102e4:	47b8      	blx	r7
 80102e6:	3001      	adds	r0, #1
 80102e8:	f43f af41 	beq.w	801016e <_printf_float+0xc2>
 80102ec:	f04f 0800 	mov.w	r8, #0
 80102f0:	f104 091a 	add.w	r9, r4, #26
 80102f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102f6:	3b01      	subs	r3, #1
 80102f8:	4543      	cmp	r3, r8
 80102fa:	dc09      	bgt.n	8010310 <_printf_float+0x264>
 80102fc:	6823      	ldr	r3, [r4, #0]
 80102fe:	079b      	lsls	r3, r3, #30
 8010300:	f100 8105 	bmi.w	801050e <_printf_float+0x462>
 8010304:	68e0      	ldr	r0, [r4, #12]
 8010306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010308:	4298      	cmp	r0, r3
 801030a:	bfb8      	it	lt
 801030c:	4618      	movlt	r0, r3
 801030e:	e730      	b.n	8010172 <_printf_float+0xc6>
 8010310:	2301      	movs	r3, #1
 8010312:	464a      	mov	r2, r9
 8010314:	4631      	mov	r1, r6
 8010316:	4628      	mov	r0, r5
 8010318:	47b8      	blx	r7
 801031a:	3001      	adds	r0, #1
 801031c:	f43f af27 	beq.w	801016e <_printf_float+0xc2>
 8010320:	f108 0801 	add.w	r8, r8, #1
 8010324:	e7e6      	b.n	80102f4 <_printf_float+0x248>
 8010326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010328:	2b00      	cmp	r3, #0
 801032a:	dc39      	bgt.n	80103a0 <_printf_float+0x2f4>
 801032c:	4a1b      	ldr	r2, [pc, #108]	; (801039c <_printf_float+0x2f0>)
 801032e:	2301      	movs	r3, #1
 8010330:	4631      	mov	r1, r6
 8010332:	4628      	mov	r0, r5
 8010334:	47b8      	blx	r7
 8010336:	3001      	adds	r0, #1
 8010338:	f43f af19 	beq.w	801016e <_printf_float+0xc2>
 801033c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010340:	4313      	orrs	r3, r2
 8010342:	d102      	bne.n	801034a <_printf_float+0x29e>
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	07d9      	lsls	r1, r3, #31
 8010348:	d5d8      	bpl.n	80102fc <_printf_float+0x250>
 801034a:	ee18 3a10 	vmov	r3, s16
 801034e:	4652      	mov	r2, sl
 8010350:	4631      	mov	r1, r6
 8010352:	4628      	mov	r0, r5
 8010354:	47b8      	blx	r7
 8010356:	3001      	adds	r0, #1
 8010358:	f43f af09 	beq.w	801016e <_printf_float+0xc2>
 801035c:	f04f 0900 	mov.w	r9, #0
 8010360:	f104 0a1a 	add.w	sl, r4, #26
 8010364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010366:	425b      	negs	r3, r3
 8010368:	454b      	cmp	r3, r9
 801036a:	dc01      	bgt.n	8010370 <_printf_float+0x2c4>
 801036c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801036e:	e792      	b.n	8010296 <_printf_float+0x1ea>
 8010370:	2301      	movs	r3, #1
 8010372:	4652      	mov	r2, sl
 8010374:	4631      	mov	r1, r6
 8010376:	4628      	mov	r0, r5
 8010378:	47b8      	blx	r7
 801037a:	3001      	adds	r0, #1
 801037c:	f43f aef7 	beq.w	801016e <_printf_float+0xc2>
 8010380:	f109 0901 	add.w	r9, r9, #1
 8010384:	e7ee      	b.n	8010364 <_printf_float+0x2b8>
 8010386:	bf00      	nop
 8010388:	7fefffff 	.word	0x7fefffff
 801038c:	08013fbc 	.word	0x08013fbc
 8010390:	08013fc0 	.word	0x08013fc0
 8010394:	08013fc8 	.word	0x08013fc8
 8010398:	08013fc4 	.word	0x08013fc4
 801039c:	08013fcc 	.word	0x08013fcc
 80103a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103a4:	429a      	cmp	r2, r3
 80103a6:	bfa8      	it	ge
 80103a8:	461a      	movge	r2, r3
 80103aa:	2a00      	cmp	r2, #0
 80103ac:	4691      	mov	r9, r2
 80103ae:	dc37      	bgt.n	8010420 <_printf_float+0x374>
 80103b0:	f04f 0b00 	mov.w	fp, #0
 80103b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103b8:	f104 021a 	add.w	r2, r4, #26
 80103bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103be:	9305      	str	r3, [sp, #20]
 80103c0:	eba3 0309 	sub.w	r3, r3, r9
 80103c4:	455b      	cmp	r3, fp
 80103c6:	dc33      	bgt.n	8010430 <_printf_float+0x384>
 80103c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103cc:	429a      	cmp	r2, r3
 80103ce:	db3b      	blt.n	8010448 <_printf_float+0x39c>
 80103d0:	6823      	ldr	r3, [r4, #0]
 80103d2:	07da      	lsls	r2, r3, #31
 80103d4:	d438      	bmi.n	8010448 <_printf_float+0x39c>
 80103d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103d8:	9a05      	ldr	r2, [sp, #20]
 80103da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80103dc:	1a9a      	subs	r2, r3, r2
 80103de:	eba3 0901 	sub.w	r9, r3, r1
 80103e2:	4591      	cmp	r9, r2
 80103e4:	bfa8      	it	ge
 80103e6:	4691      	movge	r9, r2
 80103e8:	f1b9 0f00 	cmp.w	r9, #0
 80103ec:	dc35      	bgt.n	801045a <_printf_float+0x3ae>
 80103ee:	f04f 0800 	mov.w	r8, #0
 80103f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103f6:	f104 0a1a 	add.w	sl, r4, #26
 80103fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103fe:	1a9b      	subs	r3, r3, r2
 8010400:	eba3 0309 	sub.w	r3, r3, r9
 8010404:	4543      	cmp	r3, r8
 8010406:	f77f af79 	ble.w	80102fc <_printf_float+0x250>
 801040a:	2301      	movs	r3, #1
 801040c:	4652      	mov	r2, sl
 801040e:	4631      	mov	r1, r6
 8010410:	4628      	mov	r0, r5
 8010412:	47b8      	blx	r7
 8010414:	3001      	adds	r0, #1
 8010416:	f43f aeaa 	beq.w	801016e <_printf_float+0xc2>
 801041a:	f108 0801 	add.w	r8, r8, #1
 801041e:	e7ec      	b.n	80103fa <_printf_float+0x34e>
 8010420:	4613      	mov	r3, r2
 8010422:	4631      	mov	r1, r6
 8010424:	4642      	mov	r2, r8
 8010426:	4628      	mov	r0, r5
 8010428:	47b8      	blx	r7
 801042a:	3001      	adds	r0, #1
 801042c:	d1c0      	bne.n	80103b0 <_printf_float+0x304>
 801042e:	e69e      	b.n	801016e <_printf_float+0xc2>
 8010430:	2301      	movs	r3, #1
 8010432:	4631      	mov	r1, r6
 8010434:	4628      	mov	r0, r5
 8010436:	9205      	str	r2, [sp, #20]
 8010438:	47b8      	blx	r7
 801043a:	3001      	adds	r0, #1
 801043c:	f43f ae97 	beq.w	801016e <_printf_float+0xc2>
 8010440:	9a05      	ldr	r2, [sp, #20]
 8010442:	f10b 0b01 	add.w	fp, fp, #1
 8010446:	e7b9      	b.n	80103bc <_printf_float+0x310>
 8010448:	ee18 3a10 	vmov	r3, s16
 801044c:	4652      	mov	r2, sl
 801044e:	4631      	mov	r1, r6
 8010450:	4628      	mov	r0, r5
 8010452:	47b8      	blx	r7
 8010454:	3001      	adds	r0, #1
 8010456:	d1be      	bne.n	80103d6 <_printf_float+0x32a>
 8010458:	e689      	b.n	801016e <_printf_float+0xc2>
 801045a:	9a05      	ldr	r2, [sp, #20]
 801045c:	464b      	mov	r3, r9
 801045e:	4442      	add	r2, r8
 8010460:	4631      	mov	r1, r6
 8010462:	4628      	mov	r0, r5
 8010464:	47b8      	blx	r7
 8010466:	3001      	adds	r0, #1
 8010468:	d1c1      	bne.n	80103ee <_printf_float+0x342>
 801046a:	e680      	b.n	801016e <_printf_float+0xc2>
 801046c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801046e:	2a01      	cmp	r2, #1
 8010470:	dc01      	bgt.n	8010476 <_printf_float+0x3ca>
 8010472:	07db      	lsls	r3, r3, #31
 8010474:	d538      	bpl.n	80104e8 <_printf_float+0x43c>
 8010476:	2301      	movs	r3, #1
 8010478:	4642      	mov	r2, r8
 801047a:	4631      	mov	r1, r6
 801047c:	4628      	mov	r0, r5
 801047e:	47b8      	blx	r7
 8010480:	3001      	adds	r0, #1
 8010482:	f43f ae74 	beq.w	801016e <_printf_float+0xc2>
 8010486:	ee18 3a10 	vmov	r3, s16
 801048a:	4652      	mov	r2, sl
 801048c:	4631      	mov	r1, r6
 801048e:	4628      	mov	r0, r5
 8010490:	47b8      	blx	r7
 8010492:	3001      	adds	r0, #1
 8010494:	f43f ae6b 	beq.w	801016e <_printf_float+0xc2>
 8010498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801049c:	2200      	movs	r2, #0
 801049e:	2300      	movs	r3, #0
 80104a0:	f7f0 fb12 	bl	8000ac8 <__aeabi_dcmpeq>
 80104a4:	b9d8      	cbnz	r0, 80104de <_printf_float+0x432>
 80104a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104a8:	f108 0201 	add.w	r2, r8, #1
 80104ac:	3b01      	subs	r3, #1
 80104ae:	4631      	mov	r1, r6
 80104b0:	4628      	mov	r0, r5
 80104b2:	47b8      	blx	r7
 80104b4:	3001      	adds	r0, #1
 80104b6:	d10e      	bne.n	80104d6 <_printf_float+0x42a>
 80104b8:	e659      	b.n	801016e <_printf_float+0xc2>
 80104ba:	2301      	movs	r3, #1
 80104bc:	4652      	mov	r2, sl
 80104be:	4631      	mov	r1, r6
 80104c0:	4628      	mov	r0, r5
 80104c2:	47b8      	blx	r7
 80104c4:	3001      	adds	r0, #1
 80104c6:	f43f ae52 	beq.w	801016e <_printf_float+0xc2>
 80104ca:	f108 0801 	add.w	r8, r8, #1
 80104ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104d0:	3b01      	subs	r3, #1
 80104d2:	4543      	cmp	r3, r8
 80104d4:	dcf1      	bgt.n	80104ba <_printf_float+0x40e>
 80104d6:	464b      	mov	r3, r9
 80104d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80104dc:	e6dc      	b.n	8010298 <_printf_float+0x1ec>
 80104de:	f04f 0800 	mov.w	r8, #0
 80104e2:	f104 0a1a 	add.w	sl, r4, #26
 80104e6:	e7f2      	b.n	80104ce <_printf_float+0x422>
 80104e8:	2301      	movs	r3, #1
 80104ea:	4642      	mov	r2, r8
 80104ec:	e7df      	b.n	80104ae <_printf_float+0x402>
 80104ee:	2301      	movs	r3, #1
 80104f0:	464a      	mov	r2, r9
 80104f2:	4631      	mov	r1, r6
 80104f4:	4628      	mov	r0, r5
 80104f6:	47b8      	blx	r7
 80104f8:	3001      	adds	r0, #1
 80104fa:	f43f ae38 	beq.w	801016e <_printf_float+0xc2>
 80104fe:	f108 0801 	add.w	r8, r8, #1
 8010502:	68e3      	ldr	r3, [r4, #12]
 8010504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010506:	1a5b      	subs	r3, r3, r1
 8010508:	4543      	cmp	r3, r8
 801050a:	dcf0      	bgt.n	80104ee <_printf_float+0x442>
 801050c:	e6fa      	b.n	8010304 <_printf_float+0x258>
 801050e:	f04f 0800 	mov.w	r8, #0
 8010512:	f104 0919 	add.w	r9, r4, #25
 8010516:	e7f4      	b.n	8010502 <_printf_float+0x456>

08010518 <_printf_common>:
 8010518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801051c:	4616      	mov	r6, r2
 801051e:	4699      	mov	r9, r3
 8010520:	688a      	ldr	r2, [r1, #8]
 8010522:	690b      	ldr	r3, [r1, #16]
 8010524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010528:	4293      	cmp	r3, r2
 801052a:	bfb8      	it	lt
 801052c:	4613      	movlt	r3, r2
 801052e:	6033      	str	r3, [r6, #0]
 8010530:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010534:	4607      	mov	r7, r0
 8010536:	460c      	mov	r4, r1
 8010538:	b10a      	cbz	r2, 801053e <_printf_common+0x26>
 801053a:	3301      	adds	r3, #1
 801053c:	6033      	str	r3, [r6, #0]
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	0699      	lsls	r1, r3, #26
 8010542:	bf42      	ittt	mi
 8010544:	6833      	ldrmi	r3, [r6, #0]
 8010546:	3302      	addmi	r3, #2
 8010548:	6033      	strmi	r3, [r6, #0]
 801054a:	6825      	ldr	r5, [r4, #0]
 801054c:	f015 0506 	ands.w	r5, r5, #6
 8010550:	d106      	bne.n	8010560 <_printf_common+0x48>
 8010552:	f104 0a19 	add.w	sl, r4, #25
 8010556:	68e3      	ldr	r3, [r4, #12]
 8010558:	6832      	ldr	r2, [r6, #0]
 801055a:	1a9b      	subs	r3, r3, r2
 801055c:	42ab      	cmp	r3, r5
 801055e:	dc26      	bgt.n	80105ae <_printf_common+0x96>
 8010560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010564:	1e13      	subs	r3, r2, #0
 8010566:	6822      	ldr	r2, [r4, #0]
 8010568:	bf18      	it	ne
 801056a:	2301      	movne	r3, #1
 801056c:	0692      	lsls	r2, r2, #26
 801056e:	d42b      	bmi.n	80105c8 <_printf_common+0xb0>
 8010570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010574:	4649      	mov	r1, r9
 8010576:	4638      	mov	r0, r7
 8010578:	47c0      	blx	r8
 801057a:	3001      	adds	r0, #1
 801057c:	d01e      	beq.n	80105bc <_printf_common+0xa4>
 801057e:	6823      	ldr	r3, [r4, #0]
 8010580:	68e5      	ldr	r5, [r4, #12]
 8010582:	6832      	ldr	r2, [r6, #0]
 8010584:	f003 0306 	and.w	r3, r3, #6
 8010588:	2b04      	cmp	r3, #4
 801058a:	bf08      	it	eq
 801058c:	1aad      	subeq	r5, r5, r2
 801058e:	68a3      	ldr	r3, [r4, #8]
 8010590:	6922      	ldr	r2, [r4, #16]
 8010592:	bf0c      	ite	eq
 8010594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010598:	2500      	movne	r5, #0
 801059a:	4293      	cmp	r3, r2
 801059c:	bfc4      	itt	gt
 801059e:	1a9b      	subgt	r3, r3, r2
 80105a0:	18ed      	addgt	r5, r5, r3
 80105a2:	2600      	movs	r6, #0
 80105a4:	341a      	adds	r4, #26
 80105a6:	42b5      	cmp	r5, r6
 80105a8:	d11a      	bne.n	80105e0 <_printf_common+0xc8>
 80105aa:	2000      	movs	r0, #0
 80105ac:	e008      	b.n	80105c0 <_printf_common+0xa8>
 80105ae:	2301      	movs	r3, #1
 80105b0:	4652      	mov	r2, sl
 80105b2:	4649      	mov	r1, r9
 80105b4:	4638      	mov	r0, r7
 80105b6:	47c0      	blx	r8
 80105b8:	3001      	adds	r0, #1
 80105ba:	d103      	bne.n	80105c4 <_printf_common+0xac>
 80105bc:	f04f 30ff 	mov.w	r0, #4294967295
 80105c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105c4:	3501      	adds	r5, #1
 80105c6:	e7c6      	b.n	8010556 <_printf_common+0x3e>
 80105c8:	18e1      	adds	r1, r4, r3
 80105ca:	1c5a      	adds	r2, r3, #1
 80105cc:	2030      	movs	r0, #48	; 0x30
 80105ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80105d2:	4422      	add	r2, r4
 80105d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80105d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80105dc:	3302      	adds	r3, #2
 80105de:	e7c7      	b.n	8010570 <_printf_common+0x58>
 80105e0:	2301      	movs	r3, #1
 80105e2:	4622      	mov	r2, r4
 80105e4:	4649      	mov	r1, r9
 80105e6:	4638      	mov	r0, r7
 80105e8:	47c0      	blx	r8
 80105ea:	3001      	adds	r0, #1
 80105ec:	d0e6      	beq.n	80105bc <_printf_common+0xa4>
 80105ee:	3601      	adds	r6, #1
 80105f0:	e7d9      	b.n	80105a6 <_printf_common+0x8e>
	...

080105f4 <_printf_i>:
 80105f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105f8:	7e0f      	ldrb	r7, [r1, #24]
 80105fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80105fc:	2f78      	cmp	r7, #120	; 0x78
 80105fe:	4691      	mov	r9, r2
 8010600:	4680      	mov	r8, r0
 8010602:	460c      	mov	r4, r1
 8010604:	469a      	mov	sl, r3
 8010606:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801060a:	d807      	bhi.n	801061c <_printf_i+0x28>
 801060c:	2f62      	cmp	r7, #98	; 0x62
 801060e:	d80a      	bhi.n	8010626 <_printf_i+0x32>
 8010610:	2f00      	cmp	r7, #0
 8010612:	f000 80d8 	beq.w	80107c6 <_printf_i+0x1d2>
 8010616:	2f58      	cmp	r7, #88	; 0x58
 8010618:	f000 80a3 	beq.w	8010762 <_printf_i+0x16e>
 801061c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010620:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010624:	e03a      	b.n	801069c <_printf_i+0xa8>
 8010626:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801062a:	2b15      	cmp	r3, #21
 801062c:	d8f6      	bhi.n	801061c <_printf_i+0x28>
 801062e:	a101      	add	r1, pc, #4	; (adr r1, 8010634 <_printf_i+0x40>)
 8010630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010634:	0801068d 	.word	0x0801068d
 8010638:	080106a1 	.word	0x080106a1
 801063c:	0801061d 	.word	0x0801061d
 8010640:	0801061d 	.word	0x0801061d
 8010644:	0801061d 	.word	0x0801061d
 8010648:	0801061d 	.word	0x0801061d
 801064c:	080106a1 	.word	0x080106a1
 8010650:	0801061d 	.word	0x0801061d
 8010654:	0801061d 	.word	0x0801061d
 8010658:	0801061d 	.word	0x0801061d
 801065c:	0801061d 	.word	0x0801061d
 8010660:	080107ad 	.word	0x080107ad
 8010664:	080106d1 	.word	0x080106d1
 8010668:	0801078f 	.word	0x0801078f
 801066c:	0801061d 	.word	0x0801061d
 8010670:	0801061d 	.word	0x0801061d
 8010674:	080107cf 	.word	0x080107cf
 8010678:	0801061d 	.word	0x0801061d
 801067c:	080106d1 	.word	0x080106d1
 8010680:	0801061d 	.word	0x0801061d
 8010684:	0801061d 	.word	0x0801061d
 8010688:	08010797 	.word	0x08010797
 801068c:	682b      	ldr	r3, [r5, #0]
 801068e:	1d1a      	adds	r2, r3, #4
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	602a      	str	r2, [r5, #0]
 8010694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801069c:	2301      	movs	r3, #1
 801069e:	e0a3      	b.n	80107e8 <_printf_i+0x1f4>
 80106a0:	6820      	ldr	r0, [r4, #0]
 80106a2:	6829      	ldr	r1, [r5, #0]
 80106a4:	0606      	lsls	r6, r0, #24
 80106a6:	f101 0304 	add.w	r3, r1, #4
 80106aa:	d50a      	bpl.n	80106c2 <_printf_i+0xce>
 80106ac:	680e      	ldr	r6, [r1, #0]
 80106ae:	602b      	str	r3, [r5, #0]
 80106b0:	2e00      	cmp	r6, #0
 80106b2:	da03      	bge.n	80106bc <_printf_i+0xc8>
 80106b4:	232d      	movs	r3, #45	; 0x2d
 80106b6:	4276      	negs	r6, r6
 80106b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106bc:	485e      	ldr	r0, [pc, #376]	; (8010838 <_printf_i+0x244>)
 80106be:	230a      	movs	r3, #10
 80106c0:	e019      	b.n	80106f6 <_printf_i+0x102>
 80106c2:	680e      	ldr	r6, [r1, #0]
 80106c4:	602b      	str	r3, [r5, #0]
 80106c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80106ca:	bf18      	it	ne
 80106cc:	b236      	sxthne	r6, r6
 80106ce:	e7ef      	b.n	80106b0 <_printf_i+0xbc>
 80106d0:	682b      	ldr	r3, [r5, #0]
 80106d2:	6820      	ldr	r0, [r4, #0]
 80106d4:	1d19      	adds	r1, r3, #4
 80106d6:	6029      	str	r1, [r5, #0]
 80106d8:	0601      	lsls	r1, r0, #24
 80106da:	d501      	bpl.n	80106e0 <_printf_i+0xec>
 80106dc:	681e      	ldr	r6, [r3, #0]
 80106de:	e002      	b.n	80106e6 <_printf_i+0xf2>
 80106e0:	0646      	lsls	r6, r0, #25
 80106e2:	d5fb      	bpl.n	80106dc <_printf_i+0xe8>
 80106e4:	881e      	ldrh	r6, [r3, #0]
 80106e6:	4854      	ldr	r0, [pc, #336]	; (8010838 <_printf_i+0x244>)
 80106e8:	2f6f      	cmp	r7, #111	; 0x6f
 80106ea:	bf0c      	ite	eq
 80106ec:	2308      	moveq	r3, #8
 80106ee:	230a      	movne	r3, #10
 80106f0:	2100      	movs	r1, #0
 80106f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80106f6:	6865      	ldr	r5, [r4, #4]
 80106f8:	60a5      	str	r5, [r4, #8]
 80106fa:	2d00      	cmp	r5, #0
 80106fc:	bfa2      	ittt	ge
 80106fe:	6821      	ldrge	r1, [r4, #0]
 8010700:	f021 0104 	bicge.w	r1, r1, #4
 8010704:	6021      	strge	r1, [r4, #0]
 8010706:	b90e      	cbnz	r6, 801070c <_printf_i+0x118>
 8010708:	2d00      	cmp	r5, #0
 801070a:	d04d      	beq.n	80107a8 <_printf_i+0x1b4>
 801070c:	4615      	mov	r5, r2
 801070e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010712:	fb03 6711 	mls	r7, r3, r1, r6
 8010716:	5dc7      	ldrb	r7, [r0, r7]
 8010718:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801071c:	4637      	mov	r7, r6
 801071e:	42bb      	cmp	r3, r7
 8010720:	460e      	mov	r6, r1
 8010722:	d9f4      	bls.n	801070e <_printf_i+0x11a>
 8010724:	2b08      	cmp	r3, #8
 8010726:	d10b      	bne.n	8010740 <_printf_i+0x14c>
 8010728:	6823      	ldr	r3, [r4, #0]
 801072a:	07de      	lsls	r6, r3, #31
 801072c:	d508      	bpl.n	8010740 <_printf_i+0x14c>
 801072e:	6923      	ldr	r3, [r4, #16]
 8010730:	6861      	ldr	r1, [r4, #4]
 8010732:	4299      	cmp	r1, r3
 8010734:	bfde      	ittt	le
 8010736:	2330      	movle	r3, #48	; 0x30
 8010738:	f805 3c01 	strble.w	r3, [r5, #-1]
 801073c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010740:	1b52      	subs	r2, r2, r5
 8010742:	6122      	str	r2, [r4, #16]
 8010744:	f8cd a000 	str.w	sl, [sp]
 8010748:	464b      	mov	r3, r9
 801074a:	aa03      	add	r2, sp, #12
 801074c:	4621      	mov	r1, r4
 801074e:	4640      	mov	r0, r8
 8010750:	f7ff fee2 	bl	8010518 <_printf_common>
 8010754:	3001      	adds	r0, #1
 8010756:	d14c      	bne.n	80107f2 <_printf_i+0x1fe>
 8010758:	f04f 30ff 	mov.w	r0, #4294967295
 801075c:	b004      	add	sp, #16
 801075e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010762:	4835      	ldr	r0, [pc, #212]	; (8010838 <_printf_i+0x244>)
 8010764:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010768:	6829      	ldr	r1, [r5, #0]
 801076a:	6823      	ldr	r3, [r4, #0]
 801076c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010770:	6029      	str	r1, [r5, #0]
 8010772:	061d      	lsls	r5, r3, #24
 8010774:	d514      	bpl.n	80107a0 <_printf_i+0x1ac>
 8010776:	07df      	lsls	r7, r3, #31
 8010778:	bf44      	itt	mi
 801077a:	f043 0320 	orrmi.w	r3, r3, #32
 801077e:	6023      	strmi	r3, [r4, #0]
 8010780:	b91e      	cbnz	r6, 801078a <_printf_i+0x196>
 8010782:	6823      	ldr	r3, [r4, #0]
 8010784:	f023 0320 	bic.w	r3, r3, #32
 8010788:	6023      	str	r3, [r4, #0]
 801078a:	2310      	movs	r3, #16
 801078c:	e7b0      	b.n	80106f0 <_printf_i+0xfc>
 801078e:	6823      	ldr	r3, [r4, #0]
 8010790:	f043 0320 	orr.w	r3, r3, #32
 8010794:	6023      	str	r3, [r4, #0]
 8010796:	2378      	movs	r3, #120	; 0x78
 8010798:	4828      	ldr	r0, [pc, #160]	; (801083c <_printf_i+0x248>)
 801079a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801079e:	e7e3      	b.n	8010768 <_printf_i+0x174>
 80107a0:	0659      	lsls	r1, r3, #25
 80107a2:	bf48      	it	mi
 80107a4:	b2b6      	uxthmi	r6, r6
 80107a6:	e7e6      	b.n	8010776 <_printf_i+0x182>
 80107a8:	4615      	mov	r5, r2
 80107aa:	e7bb      	b.n	8010724 <_printf_i+0x130>
 80107ac:	682b      	ldr	r3, [r5, #0]
 80107ae:	6826      	ldr	r6, [r4, #0]
 80107b0:	6961      	ldr	r1, [r4, #20]
 80107b2:	1d18      	adds	r0, r3, #4
 80107b4:	6028      	str	r0, [r5, #0]
 80107b6:	0635      	lsls	r5, r6, #24
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	d501      	bpl.n	80107c0 <_printf_i+0x1cc>
 80107bc:	6019      	str	r1, [r3, #0]
 80107be:	e002      	b.n	80107c6 <_printf_i+0x1d2>
 80107c0:	0670      	lsls	r0, r6, #25
 80107c2:	d5fb      	bpl.n	80107bc <_printf_i+0x1c8>
 80107c4:	8019      	strh	r1, [r3, #0]
 80107c6:	2300      	movs	r3, #0
 80107c8:	6123      	str	r3, [r4, #16]
 80107ca:	4615      	mov	r5, r2
 80107cc:	e7ba      	b.n	8010744 <_printf_i+0x150>
 80107ce:	682b      	ldr	r3, [r5, #0]
 80107d0:	1d1a      	adds	r2, r3, #4
 80107d2:	602a      	str	r2, [r5, #0]
 80107d4:	681d      	ldr	r5, [r3, #0]
 80107d6:	6862      	ldr	r2, [r4, #4]
 80107d8:	2100      	movs	r1, #0
 80107da:	4628      	mov	r0, r5
 80107dc:	f7ef fd00 	bl	80001e0 <memchr>
 80107e0:	b108      	cbz	r0, 80107e6 <_printf_i+0x1f2>
 80107e2:	1b40      	subs	r0, r0, r5
 80107e4:	6060      	str	r0, [r4, #4]
 80107e6:	6863      	ldr	r3, [r4, #4]
 80107e8:	6123      	str	r3, [r4, #16]
 80107ea:	2300      	movs	r3, #0
 80107ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107f0:	e7a8      	b.n	8010744 <_printf_i+0x150>
 80107f2:	6923      	ldr	r3, [r4, #16]
 80107f4:	462a      	mov	r2, r5
 80107f6:	4649      	mov	r1, r9
 80107f8:	4640      	mov	r0, r8
 80107fa:	47d0      	blx	sl
 80107fc:	3001      	adds	r0, #1
 80107fe:	d0ab      	beq.n	8010758 <_printf_i+0x164>
 8010800:	6823      	ldr	r3, [r4, #0]
 8010802:	079b      	lsls	r3, r3, #30
 8010804:	d413      	bmi.n	801082e <_printf_i+0x23a>
 8010806:	68e0      	ldr	r0, [r4, #12]
 8010808:	9b03      	ldr	r3, [sp, #12]
 801080a:	4298      	cmp	r0, r3
 801080c:	bfb8      	it	lt
 801080e:	4618      	movlt	r0, r3
 8010810:	e7a4      	b.n	801075c <_printf_i+0x168>
 8010812:	2301      	movs	r3, #1
 8010814:	4632      	mov	r2, r6
 8010816:	4649      	mov	r1, r9
 8010818:	4640      	mov	r0, r8
 801081a:	47d0      	blx	sl
 801081c:	3001      	adds	r0, #1
 801081e:	d09b      	beq.n	8010758 <_printf_i+0x164>
 8010820:	3501      	adds	r5, #1
 8010822:	68e3      	ldr	r3, [r4, #12]
 8010824:	9903      	ldr	r1, [sp, #12]
 8010826:	1a5b      	subs	r3, r3, r1
 8010828:	42ab      	cmp	r3, r5
 801082a:	dcf2      	bgt.n	8010812 <_printf_i+0x21e>
 801082c:	e7eb      	b.n	8010806 <_printf_i+0x212>
 801082e:	2500      	movs	r5, #0
 8010830:	f104 0619 	add.w	r6, r4, #25
 8010834:	e7f5      	b.n	8010822 <_printf_i+0x22e>
 8010836:	bf00      	nop
 8010838:	08013fce 	.word	0x08013fce
 801083c:	08013fdf 	.word	0x08013fdf

08010840 <siprintf>:
 8010840:	b40e      	push	{r1, r2, r3}
 8010842:	b500      	push	{lr}
 8010844:	b09c      	sub	sp, #112	; 0x70
 8010846:	ab1d      	add	r3, sp, #116	; 0x74
 8010848:	9002      	str	r0, [sp, #8]
 801084a:	9006      	str	r0, [sp, #24]
 801084c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010850:	4809      	ldr	r0, [pc, #36]	; (8010878 <siprintf+0x38>)
 8010852:	9107      	str	r1, [sp, #28]
 8010854:	9104      	str	r1, [sp, #16]
 8010856:	4909      	ldr	r1, [pc, #36]	; (801087c <siprintf+0x3c>)
 8010858:	f853 2b04 	ldr.w	r2, [r3], #4
 801085c:	9105      	str	r1, [sp, #20]
 801085e:	6800      	ldr	r0, [r0, #0]
 8010860:	9301      	str	r3, [sp, #4]
 8010862:	a902      	add	r1, sp, #8
 8010864:	f001 fb76 	bl	8011f54 <_svfiprintf_r>
 8010868:	9b02      	ldr	r3, [sp, #8]
 801086a:	2200      	movs	r2, #0
 801086c:	701a      	strb	r2, [r3, #0]
 801086e:	b01c      	add	sp, #112	; 0x70
 8010870:	f85d eb04 	ldr.w	lr, [sp], #4
 8010874:	b003      	add	sp, #12
 8010876:	4770      	bx	lr
 8010878:	20000100 	.word	0x20000100
 801087c:	ffff0208 	.word	0xffff0208

08010880 <quorem>:
 8010880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010884:	6903      	ldr	r3, [r0, #16]
 8010886:	690c      	ldr	r4, [r1, #16]
 8010888:	42a3      	cmp	r3, r4
 801088a:	4607      	mov	r7, r0
 801088c:	f2c0 8081 	blt.w	8010992 <quorem+0x112>
 8010890:	3c01      	subs	r4, #1
 8010892:	f101 0814 	add.w	r8, r1, #20
 8010896:	f100 0514 	add.w	r5, r0, #20
 801089a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801089e:	9301      	str	r3, [sp, #4]
 80108a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80108a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80108a8:	3301      	adds	r3, #1
 80108aa:	429a      	cmp	r2, r3
 80108ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80108b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80108b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80108b8:	d331      	bcc.n	801091e <quorem+0x9e>
 80108ba:	f04f 0e00 	mov.w	lr, #0
 80108be:	4640      	mov	r0, r8
 80108c0:	46ac      	mov	ip, r5
 80108c2:	46f2      	mov	sl, lr
 80108c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80108c8:	b293      	uxth	r3, r2
 80108ca:	fb06 e303 	mla	r3, r6, r3, lr
 80108ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	ebaa 0303 	sub.w	r3, sl, r3
 80108d8:	f8dc a000 	ldr.w	sl, [ip]
 80108dc:	0c12      	lsrs	r2, r2, #16
 80108de:	fa13 f38a 	uxtah	r3, r3, sl
 80108e2:	fb06 e202 	mla	r2, r6, r2, lr
 80108e6:	9300      	str	r3, [sp, #0]
 80108e8:	9b00      	ldr	r3, [sp, #0]
 80108ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80108ee:	b292      	uxth	r2, r2
 80108f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80108f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80108f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80108fc:	4581      	cmp	r9, r0
 80108fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010902:	f84c 3b04 	str.w	r3, [ip], #4
 8010906:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801090a:	d2db      	bcs.n	80108c4 <quorem+0x44>
 801090c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010910:	b92b      	cbnz	r3, 801091e <quorem+0x9e>
 8010912:	9b01      	ldr	r3, [sp, #4]
 8010914:	3b04      	subs	r3, #4
 8010916:	429d      	cmp	r5, r3
 8010918:	461a      	mov	r2, r3
 801091a:	d32e      	bcc.n	801097a <quorem+0xfa>
 801091c:	613c      	str	r4, [r7, #16]
 801091e:	4638      	mov	r0, r7
 8010920:	f001 f8c4 	bl	8011aac <__mcmp>
 8010924:	2800      	cmp	r0, #0
 8010926:	db24      	blt.n	8010972 <quorem+0xf2>
 8010928:	3601      	adds	r6, #1
 801092a:	4628      	mov	r0, r5
 801092c:	f04f 0c00 	mov.w	ip, #0
 8010930:	f858 2b04 	ldr.w	r2, [r8], #4
 8010934:	f8d0 e000 	ldr.w	lr, [r0]
 8010938:	b293      	uxth	r3, r2
 801093a:	ebac 0303 	sub.w	r3, ip, r3
 801093e:	0c12      	lsrs	r2, r2, #16
 8010940:	fa13 f38e 	uxtah	r3, r3, lr
 8010944:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010948:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801094c:	b29b      	uxth	r3, r3
 801094e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010952:	45c1      	cmp	r9, r8
 8010954:	f840 3b04 	str.w	r3, [r0], #4
 8010958:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801095c:	d2e8      	bcs.n	8010930 <quorem+0xb0>
 801095e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010966:	b922      	cbnz	r2, 8010972 <quorem+0xf2>
 8010968:	3b04      	subs	r3, #4
 801096a:	429d      	cmp	r5, r3
 801096c:	461a      	mov	r2, r3
 801096e:	d30a      	bcc.n	8010986 <quorem+0x106>
 8010970:	613c      	str	r4, [r7, #16]
 8010972:	4630      	mov	r0, r6
 8010974:	b003      	add	sp, #12
 8010976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801097a:	6812      	ldr	r2, [r2, #0]
 801097c:	3b04      	subs	r3, #4
 801097e:	2a00      	cmp	r2, #0
 8010980:	d1cc      	bne.n	801091c <quorem+0x9c>
 8010982:	3c01      	subs	r4, #1
 8010984:	e7c7      	b.n	8010916 <quorem+0x96>
 8010986:	6812      	ldr	r2, [r2, #0]
 8010988:	3b04      	subs	r3, #4
 801098a:	2a00      	cmp	r2, #0
 801098c:	d1f0      	bne.n	8010970 <quorem+0xf0>
 801098e:	3c01      	subs	r4, #1
 8010990:	e7eb      	b.n	801096a <quorem+0xea>
 8010992:	2000      	movs	r0, #0
 8010994:	e7ee      	b.n	8010974 <quorem+0xf4>
	...

08010998 <_dtoa_r>:
 8010998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801099c:	ed2d 8b04 	vpush	{d8-d9}
 80109a0:	ec57 6b10 	vmov	r6, r7, d0
 80109a4:	b093      	sub	sp, #76	; 0x4c
 80109a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80109a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80109ac:	9106      	str	r1, [sp, #24]
 80109ae:	ee10 aa10 	vmov	sl, s0
 80109b2:	4604      	mov	r4, r0
 80109b4:	9209      	str	r2, [sp, #36]	; 0x24
 80109b6:	930c      	str	r3, [sp, #48]	; 0x30
 80109b8:	46bb      	mov	fp, r7
 80109ba:	b975      	cbnz	r5, 80109da <_dtoa_r+0x42>
 80109bc:	2010      	movs	r0, #16
 80109be:	f000 fddd 	bl	801157c <malloc>
 80109c2:	4602      	mov	r2, r0
 80109c4:	6260      	str	r0, [r4, #36]	; 0x24
 80109c6:	b920      	cbnz	r0, 80109d2 <_dtoa_r+0x3a>
 80109c8:	4ba7      	ldr	r3, [pc, #668]	; (8010c68 <_dtoa_r+0x2d0>)
 80109ca:	21ea      	movs	r1, #234	; 0xea
 80109cc:	48a7      	ldr	r0, [pc, #668]	; (8010c6c <_dtoa_r+0x2d4>)
 80109ce:	f001 fbd1 	bl	8012174 <__assert_func>
 80109d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80109d6:	6005      	str	r5, [r0, #0]
 80109d8:	60c5      	str	r5, [r0, #12]
 80109da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109dc:	6819      	ldr	r1, [r3, #0]
 80109de:	b151      	cbz	r1, 80109f6 <_dtoa_r+0x5e>
 80109e0:	685a      	ldr	r2, [r3, #4]
 80109e2:	604a      	str	r2, [r1, #4]
 80109e4:	2301      	movs	r3, #1
 80109e6:	4093      	lsls	r3, r2
 80109e8:	608b      	str	r3, [r1, #8]
 80109ea:	4620      	mov	r0, r4
 80109ec:	f000 fe1c 	bl	8011628 <_Bfree>
 80109f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109f2:	2200      	movs	r2, #0
 80109f4:	601a      	str	r2, [r3, #0]
 80109f6:	1e3b      	subs	r3, r7, #0
 80109f8:	bfaa      	itet	ge
 80109fa:	2300      	movge	r3, #0
 80109fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010a00:	f8c8 3000 	strge.w	r3, [r8]
 8010a04:	4b9a      	ldr	r3, [pc, #616]	; (8010c70 <_dtoa_r+0x2d8>)
 8010a06:	bfbc      	itt	lt
 8010a08:	2201      	movlt	r2, #1
 8010a0a:	f8c8 2000 	strlt.w	r2, [r8]
 8010a0e:	ea33 030b 	bics.w	r3, r3, fp
 8010a12:	d11b      	bne.n	8010a4c <_dtoa_r+0xb4>
 8010a14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a16:	f242 730f 	movw	r3, #9999	; 0x270f
 8010a1a:	6013      	str	r3, [r2, #0]
 8010a1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a20:	4333      	orrs	r3, r6
 8010a22:	f000 8592 	beq.w	801154a <_dtoa_r+0xbb2>
 8010a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a28:	b963      	cbnz	r3, 8010a44 <_dtoa_r+0xac>
 8010a2a:	4b92      	ldr	r3, [pc, #584]	; (8010c74 <_dtoa_r+0x2dc>)
 8010a2c:	e022      	b.n	8010a74 <_dtoa_r+0xdc>
 8010a2e:	4b92      	ldr	r3, [pc, #584]	; (8010c78 <_dtoa_r+0x2e0>)
 8010a30:	9301      	str	r3, [sp, #4]
 8010a32:	3308      	adds	r3, #8
 8010a34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010a36:	6013      	str	r3, [r2, #0]
 8010a38:	9801      	ldr	r0, [sp, #4]
 8010a3a:	b013      	add	sp, #76	; 0x4c
 8010a3c:	ecbd 8b04 	vpop	{d8-d9}
 8010a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a44:	4b8b      	ldr	r3, [pc, #556]	; (8010c74 <_dtoa_r+0x2dc>)
 8010a46:	9301      	str	r3, [sp, #4]
 8010a48:	3303      	adds	r3, #3
 8010a4a:	e7f3      	b.n	8010a34 <_dtoa_r+0x9c>
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	2300      	movs	r3, #0
 8010a50:	4650      	mov	r0, sl
 8010a52:	4659      	mov	r1, fp
 8010a54:	f7f0 f838 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a58:	ec4b ab19 	vmov	d9, sl, fp
 8010a5c:	4680      	mov	r8, r0
 8010a5e:	b158      	cbz	r0, 8010a78 <_dtoa_r+0xe0>
 8010a60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a62:	2301      	movs	r3, #1
 8010a64:	6013      	str	r3, [r2, #0]
 8010a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	f000 856b 	beq.w	8011544 <_dtoa_r+0xbac>
 8010a6e:	4883      	ldr	r0, [pc, #524]	; (8010c7c <_dtoa_r+0x2e4>)
 8010a70:	6018      	str	r0, [r3, #0]
 8010a72:	1e43      	subs	r3, r0, #1
 8010a74:	9301      	str	r3, [sp, #4]
 8010a76:	e7df      	b.n	8010a38 <_dtoa_r+0xa0>
 8010a78:	ec4b ab10 	vmov	d0, sl, fp
 8010a7c:	aa10      	add	r2, sp, #64	; 0x40
 8010a7e:	a911      	add	r1, sp, #68	; 0x44
 8010a80:	4620      	mov	r0, r4
 8010a82:	f001 f8b9 	bl	8011bf8 <__d2b>
 8010a86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010a8a:	ee08 0a10 	vmov	s16, r0
 8010a8e:	2d00      	cmp	r5, #0
 8010a90:	f000 8084 	beq.w	8010b9c <_dtoa_r+0x204>
 8010a94:	ee19 3a90 	vmov	r3, s19
 8010a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010aa0:	4656      	mov	r6, sl
 8010aa2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010aa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010aaa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010aae:	4b74      	ldr	r3, [pc, #464]	; (8010c80 <_dtoa_r+0x2e8>)
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	4639      	mov	r1, r7
 8010ab6:	f7ef fbe7 	bl	8000288 <__aeabi_dsub>
 8010aba:	a365      	add	r3, pc, #404	; (adr r3, 8010c50 <_dtoa_r+0x2b8>)
 8010abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac0:	f7ef fd9a 	bl	80005f8 <__aeabi_dmul>
 8010ac4:	a364      	add	r3, pc, #400	; (adr r3, 8010c58 <_dtoa_r+0x2c0>)
 8010ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aca:	f7ef fbdf 	bl	800028c <__adddf3>
 8010ace:	4606      	mov	r6, r0
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	460f      	mov	r7, r1
 8010ad4:	f7ef fd26 	bl	8000524 <__aeabi_i2d>
 8010ad8:	a361      	add	r3, pc, #388	; (adr r3, 8010c60 <_dtoa_r+0x2c8>)
 8010ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ade:	f7ef fd8b 	bl	80005f8 <__aeabi_dmul>
 8010ae2:	4602      	mov	r2, r0
 8010ae4:	460b      	mov	r3, r1
 8010ae6:	4630      	mov	r0, r6
 8010ae8:	4639      	mov	r1, r7
 8010aea:	f7ef fbcf 	bl	800028c <__adddf3>
 8010aee:	4606      	mov	r6, r0
 8010af0:	460f      	mov	r7, r1
 8010af2:	f7f0 f831 	bl	8000b58 <__aeabi_d2iz>
 8010af6:	2200      	movs	r2, #0
 8010af8:	9000      	str	r0, [sp, #0]
 8010afa:	2300      	movs	r3, #0
 8010afc:	4630      	mov	r0, r6
 8010afe:	4639      	mov	r1, r7
 8010b00:	f7ef ffec 	bl	8000adc <__aeabi_dcmplt>
 8010b04:	b150      	cbz	r0, 8010b1c <_dtoa_r+0x184>
 8010b06:	9800      	ldr	r0, [sp, #0]
 8010b08:	f7ef fd0c 	bl	8000524 <__aeabi_i2d>
 8010b0c:	4632      	mov	r2, r6
 8010b0e:	463b      	mov	r3, r7
 8010b10:	f7ef ffda 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b14:	b910      	cbnz	r0, 8010b1c <_dtoa_r+0x184>
 8010b16:	9b00      	ldr	r3, [sp, #0]
 8010b18:	3b01      	subs	r3, #1
 8010b1a:	9300      	str	r3, [sp, #0]
 8010b1c:	9b00      	ldr	r3, [sp, #0]
 8010b1e:	2b16      	cmp	r3, #22
 8010b20:	d85a      	bhi.n	8010bd8 <_dtoa_r+0x240>
 8010b22:	9a00      	ldr	r2, [sp, #0]
 8010b24:	4b57      	ldr	r3, [pc, #348]	; (8010c84 <_dtoa_r+0x2ec>)
 8010b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b2e:	ec51 0b19 	vmov	r0, r1, d9
 8010b32:	f7ef ffd3 	bl	8000adc <__aeabi_dcmplt>
 8010b36:	2800      	cmp	r0, #0
 8010b38:	d050      	beq.n	8010bdc <_dtoa_r+0x244>
 8010b3a:	9b00      	ldr	r3, [sp, #0]
 8010b3c:	3b01      	subs	r3, #1
 8010b3e:	9300      	str	r3, [sp, #0]
 8010b40:	2300      	movs	r3, #0
 8010b42:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b46:	1b5d      	subs	r5, r3, r5
 8010b48:	1e6b      	subs	r3, r5, #1
 8010b4a:	9305      	str	r3, [sp, #20]
 8010b4c:	bf45      	ittet	mi
 8010b4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010b52:	9304      	strmi	r3, [sp, #16]
 8010b54:	2300      	movpl	r3, #0
 8010b56:	2300      	movmi	r3, #0
 8010b58:	bf4c      	ite	mi
 8010b5a:	9305      	strmi	r3, [sp, #20]
 8010b5c:	9304      	strpl	r3, [sp, #16]
 8010b5e:	9b00      	ldr	r3, [sp, #0]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	db3d      	blt.n	8010be0 <_dtoa_r+0x248>
 8010b64:	9b05      	ldr	r3, [sp, #20]
 8010b66:	9a00      	ldr	r2, [sp, #0]
 8010b68:	920a      	str	r2, [sp, #40]	; 0x28
 8010b6a:	4413      	add	r3, r2
 8010b6c:	9305      	str	r3, [sp, #20]
 8010b6e:	2300      	movs	r3, #0
 8010b70:	9307      	str	r3, [sp, #28]
 8010b72:	9b06      	ldr	r3, [sp, #24]
 8010b74:	2b09      	cmp	r3, #9
 8010b76:	f200 8089 	bhi.w	8010c8c <_dtoa_r+0x2f4>
 8010b7a:	2b05      	cmp	r3, #5
 8010b7c:	bfc4      	itt	gt
 8010b7e:	3b04      	subgt	r3, #4
 8010b80:	9306      	strgt	r3, [sp, #24]
 8010b82:	9b06      	ldr	r3, [sp, #24]
 8010b84:	f1a3 0302 	sub.w	r3, r3, #2
 8010b88:	bfcc      	ite	gt
 8010b8a:	2500      	movgt	r5, #0
 8010b8c:	2501      	movle	r5, #1
 8010b8e:	2b03      	cmp	r3, #3
 8010b90:	f200 8087 	bhi.w	8010ca2 <_dtoa_r+0x30a>
 8010b94:	e8df f003 	tbb	[pc, r3]
 8010b98:	59383a2d 	.word	0x59383a2d
 8010b9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010ba0:	441d      	add	r5, r3
 8010ba2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010ba6:	2b20      	cmp	r3, #32
 8010ba8:	bfc1      	itttt	gt
 8010baa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010bae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010bb2:	fa0b f303 	lslgt.w	r3, fp, r3
 8010bb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010bba:	bfda      	itte	le
 8010bbc:	f1c3 0320 	rsble	r3, r3, #32
 8010bc0:	fa06 f003 	lslle.w	r0, r6, r3
 8010bc4:	4318      	orrgt	r0, r3
 8010bc6:	f7ef fc9d 	bl	8000504 <__aeabi_ui2d>
 8010bca:	2301      	movs	r3, #1
 8010bcc:	4606      	mov	r6, r0
 8010bce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010bd2:	3d01      	subs	r5, #1
 8010bd4:	930e      	str	r3, [sp, #56]	; 0x38
 8010bd6:	e76a      	b.n	8010aae <_dtoa_r+0x116>
 8010bd8:	2301      	movs	r3, #1
 8010bda:	e7b2      	b.n	8010b42 <_dtoa_r+0x1aa>
 8010bdc:	900b      	str	r0, [sp, #44]	; 0x2c
 8010bde:	e7b1      	b.n	8010b44 <_dtoa_r+0x1ac>
 8010be0:	9b04      	ldr	r3, [sp, #16]
 8010be2:	9a00      	ldr	r2, [sp, #0]
 8010be4:	1a9b      	subs	r3, r3, r2
 8010be6:	9304      	str	r3, [sp, #16]
 8010be8:	4253      	negs	r3, r2
 8010bea:	9307      	str	r3, [sp, #28]
 8010bec:	2300      	movs	r3, #0
 8010bee:	930a      	str	r3, [sp, #40]	; 0x28
 8010bf0:	e7bf      	b.n	8010b72 <_dtoa_r+0x1da>
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	9308      	str	r3, [sp, #32]
 8010bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	dc55      	bgt.n	8010ca8 <_dtoa_r+0x310>
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c02:	461a      	mov	r2, r3
 8010c04:	9209      	str	r2, [sp, #36]	; 0x24
 8010c06:	e00c      	b.n	8010c22 <_dtoa_r+0x28a>
 8010c08:	2301      	movs	r3, #1
 8010c0a:	e7f3      	b.n	8010bf4 <_dtoa_r+0x25c>
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c10:	9308      	str	r3, [sp, #32]
 8010c12:	9b00      	ldr	r3, [sp, #0]
 8010c14:	4413      	add	r3, r2
 8010c16:	9302      	str	r3, [sp, #8]
 8010c18:	3301      	adds	r3, #1
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	9303      	str	r3, [sp, #12]
 8010c1e:	bfb8      	it	lt
 8010c20:	2301      	movlt	r3, #1
 8010c22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010c24:	2200      	movs	r2, #0
 8010c26:	6042      	str	r2, [r0, #4]
 8010c28:	2204      	movs	r2, #4
 8010c2a:	f102 0614 	add.w	r6, r2, #20
 8010c2e:	429e      	cmp	r6, r3
 8010c30:	6841      	ldr	r1, [r0, #4]
 8010c32:	d93d      	bls.n	8010cb0 <_dtoa_r+0x318>
 8010c34:	4620      	mov	r0, r4
 8010c36:	f000 fcb7 	bl	80115a8 <_Balloc>
 8010c3a:	9001      	str	r0, [sp, #4]
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	d13b      	bne.n	8010cb8 <_dtoa_r+0x320>
 8010c40:	4b11      	ldr	r3, [pc, #68]	; (8010c88 <_dtoa_r+0x2f0>)
 8010c42:	4602      	mov	r2, r0
 8010c44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010c48:	e6c0      	b.n	80109cc <_dtoa_r+0x34>
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	e7df      	b.n	8010c0e <_dtoa_r+0x276>
 8010c4e:	bf00      	nop
 8010c50:	636f4361 	.word	0x636f4361
 8010c54:	3fd287a7 	.word	0x3fd287a7
 8010c58:	8b60c8b3 	.word	0x8b60c8b3
 8010c5c:	3fc68a28 	.word	0x3fc68a28
 8010c60:	509f79fb 	.word	0x509f79fb
 8010c64:	3fd34413 	.word	0x3fd34413
 8010c68:	08013ffd 	.word	0x08013ffd
 8010c6c:	08014014 	.word	0x08014014
 8010c70:	7ff00000 	.word	0x7ff00000
 8010c74:	08013ff9 	.word	0x08013ff9
 8010c78:	08013ff0 	.word	0x08013ff0
 8010c7c:	08013fcd 	.word	0x08013fcd
 8010c80:	3ff80000 	.word	0x3ff80000
 8010c84:	08014108 	.word	0x08014108
 8010c88:	0801406f 	.word	0x0801406f
 8010c8c:	2501      	movs	r5, #1
 8010c8e:	2300      	movs	r3, #0
 8010c90:	9306      	str	r3, [sp, #24]
 8010c92:	9508      	str	r5, [sp, #32]
 8010c94:	f04f 33ff 	mov.w	r3, #4294967295
 8010c98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	2312      	movs	r3, #18
 8010ca0:	e7b0      	b.n	8010c04 <_dtoa_r+0x26c>
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	9308      	str	r3, [sp, #32]
 8010ca6:	e7f5      	b.n	8010c94 <_dtoa_r+0x2fc>
 8010ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010caa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010cae:	e7b8      	b.n	8010c22 <_dtoa_r+0x28a>
 8010cb0:	3101      	adds	r1, #1
 8010cb2:	6041      	str	r1, [r0, #4]
 8010cb4:	0052      	lsls	r2, r2, #1
 8010cb6:	e7b8      	b.n	8010c2a <_dtoa_r+0x292>
 8010cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cba:	9a01      	ldr	r2, [sp, #4]
 8010cbc:	601a      	str	r2, [r3, #0]
 8010cbe:	9b03      	ldr	r3, [sp, #12]
 8010cc0:	2b0e      	cmp	r3, #14
 8010cc2:	f200 809d 	bhi.w	8010e00 <_dtoa_r+0x468>
 8010cc6:	2d00      	cmp	r5, #0
 8010cc8:	f000 809a 	beq.w	8010e00 <_dtoa_r+0x468>
 8010ccc:	9b00      	ldr	r3, [sp, #0]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	dd32      	ble.n	8010d38 <_dtoa_r+0x3a0>
 8010cd2:	4ab7      	ldr	r2, [pc, #732]	; (8010fb0 <_dtoa_r+0x618>)
 8010cd4:	f003 030f 	and.w	r3, r3, #15
 8010cd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010cdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010ce0:	9b00      	ldr	r3, [sp, #0]
 8010ce2:	05d8      	lsls	r0, r3, #23
 8010ce4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010ce8:	d516      	bpl.n	8010d18 <_dtoa_r+0x380>
 8010cea:	4bb2      	ldr	r3, [pc, #712]	; (8010fb4 <_dtoa_r+0x61c>)
 8010cec:	ec51 0b19 	vmov	r0, r1, d9
 8010cf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010cf4:	f7ef fdaa 	bl	800084c <__aeabi_ddiv>
 8010cf8:	f007 070f 	and.w	r7, r7, #15
 8010cfc:	4682      	mov	sl, r0
 8010cfe:	468b      	mov	fp, r1
 8010d00:	2503      	movs	r5, #3
 8010d02:	4eac      	ldr	r6, [pc, #688]	; (8010fb4 <_dtoa_r+0x61c>)
 8010d04:	b957      	cbnz	r7, 8010d1c <_dtoa_r+0x384>
 8010d06:	4642      	mov	r2, r8
 8010d08:	464b      	mov	r3, r9
 8010d0a:	4650      	mov	r0, sl
 8010d0c:	4659      	mov	r1, fp
 8010d0e:	f7ef fd9d 	bl	800084c <__aeabi_ddiv>
 8010d12:	4682      	mov	sl, r0
 8010d14:	468b      	mov	fp, r1
 8010d16:	e028      	b.n	8010d6a <_dtoa_r+0x3d2>
 8010d18:	2502      	movs	r5, #2
 8010d1a:	e7f2      	b.n	8010d02 <_dtoa_r+0x36a>
 8010d1c:	07f9      	lsls	r1, r7, #31
 8010d1e:	d508      	bpl.n	8010d32 <_dtoa_r+0x39a>
 8010d20:	4640      	mov	r0, r8
 8010d22:	4649      	mov	r1, r9
 8010d24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010d28:	f7ef fc66 	bl	80005f8 <__aeabi_dmul>
 8010d2c:	3501      	adds	r5, #1
 8010d2e:	4680      	mov	r8, r0
 8010d30:	4689      	mov	r9, r1
 8010d32:	107f      	asrs	r7, r7, #1
 8010d34:	3608      	adds	r6, #8
 8010d36:	e7e5      	b.n	8010d04 <_dtoa_r+0x36c>
 8010d38:	f000 809b 	beq.w	8010e72 <_dtoa_r+0x4da>
 8010d3c:	9b00      	ldr	r3, [sp, #0]
 8010d3e:	4f9d      	ldr	r7, [pc, #628]	; (8010fb4 <_dtoa_r+0x61c>)
 8010d40:	425e      	negs	r6, r3
 8010d42:	4b9b      	ldr	r3, [pc, #620]	; (8010fb0 <_dtoa_r+0x618>)
 8010d44:	f006 020f 	and.w	r2, r6, #15
 8010d48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d50:	ec51 0b19 	vmov	r0, r1, d9
 8010d54:	f7ef fc50 	bl	80005f8 <__aeabi_dmul>
 8010d58:	1136      	asrs	r6, r6, #4
 8010d5a:	4682      	mov	sl, r0
 8010d5c:	468b      	mov	fp, r1
 8010d5e:	2300      	movs	r3, #0
 8010d60:	2502      	movs	r5, #2
 8010d62:	2e00      	cmp	r6, #0
 8010d64:	d17a      	bne.n	8010e5c <_dtoa_r+0x4c4>
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d1d3      	bne.n	8010d12 <_dtoa_r+0x37a>
 8010d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	f000 8082 	beq.w	8010e76 <_dtoa_r+0x4de>
 8010d72:	4b91      	ldr	r3, [pc, #580]	; (8010fb8 <_dtoa_r+0x620>)
 8010d74:	2200      	movs	r2, #0
 8010d76:	4650      	mov	r0, sl
 8010d78:	4659      	mov	r1, fp
 8010d7a:	f7ef feaf 	bl	8000adc <__aeabi_dcmplt>
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	d079      	beq.n	8010e76 <_dtoa_r+0x4de>
 8010d82:	9b03      	ldr	r3, [sp, #12]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d076      	beq.n	8010e76 <_dtoa_r+0x4de>
 8010d88:	9b02      	ldr	r3, [sp, #8]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	dd36      	ble.n	8010dfc <_dtoa_r+0x464>
 8010d8e:	9b00      	ldr	r3, [sp, #0]
 8010d90:	4650      	mov	r0, sl
 8010d92:	4659      	mov	r1, fp
 8010d94:	1e5f      	subs	r7, r3, #1
 8010d96:	2200      	movs	r2, #0
 8010d98:	4b88      	ldr	r3, [pc, #544]	; (8010fbc <_dtoa_r+0x624>)
 8010d9a:	f7ef fc2d 	bl	80005f8 <__aeabi_dmul>
 8010d9e:	9e02      	ldr	r6, [sp, #8]
 8010da0:	4682      	mov	sl, r0
 8010da2:	468b      	mov	fp, r1
 8010da4:	3501      	adds	r5, #1
 8010da6:	4628      	mov	r0, r5
 8010da8:	f7ef fbbc 	bl	8000524 <__aeabi_i2d>
 8010dac:	4652      	mov	r2, sl
 8010dae:	465b      	mov	r3, fp
 8010db0:	f7ef fc22 	bl	80005f8 <__aeabi_dmul>
 8010db4:	4b82      	ldr	r3, [pc, #520]	; (8010fc0 <_dtoa_r+0x628>)
 8010db6:	2200      	movs	r2, #0
 8010db8:	f7ef fa68 	bl	800028c <__adddf3>
 8010dbc:	46d0      	mov	r8, sl
 8010dbe:	46d9      	mov	r9, fp
 8010dc0:	4682      	mov	sl, r0
 8010dc2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010dc6:	2e00      	cmp	r6, #0
 8010dc8:	d158      	bne.n	8010e7c <_dtoa_r+0x4e4>
 8010dca:	4b7e      	ldr	r3, [pc, #504]	; (8010fc4 <_dtoa_r+0x62c>)
 8010dcc:	2200      	movs	r2, #0
 8010dce:	4640      	mov	r0, r8
 8010dd0:	4649      	mov	r1, r9
 8010dd2:	f7ef fa59 	bl	8000288 <__aeabi_dsub>
 8010dd6:	4652      	mov	r2, sl
 8010dd8:	465b      	mov	r3, fp
 8010dda:	4680      	mov	r8, r0
 8010ddc:	4689      	mov	r9, r1
 8010dde:	f7ef fe9b 	bl	8000b18 <__aeabi_dcmpgt>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	f040 8295 	bne.w	8011312 <_dtoa_r+0x97a>
 8010de8:	4652      	mov	r2, sl
 8010dea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010dee:	4640      	mov	r0, r8
 8010df0:	4649      	mov	r1, r9
 8010df2:	f7ef fe73 	bl	8000adc <__aeabi_dcmplt>
 8010df6:	2800      	cmp	r0, #0
 8010df8:	f040 8289 	bne.w	801130e <_dtoa_r+0x976>
 8010dfc:	ec5b ab19 	vmov	sl, fp, d9
 8010e00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f2c0 8148 	blt.w	8011098 <_dtoa_r+0x700>
 8010e08:	9a00      	ldr	r2, [sp, #0]
 8010e0a:	2a0e      	cmp	r2, #14
 8010e0c:	f300 8144 	bgt.w	8011098 <_dtoa_r+0x700>
 8010e10:	4b67      	ldr	r3, [pc, #412]	; (8010fb0 <_dtoa_r+0x618>)
 8010e12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f280 80d5 	bge.w	8010fcc <_dtoa_r+0x634>
 8010e22:	9b03      	ldr	r3, [sp, #12]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	f300 80d1 	bgt.w	8010fcc <_dtoa_r+0x634>
 8010e2a:	f040 826f 	bne.w	801130c <_dtoa_r+0x974>
 8010e2e:	4b65      	ldr	r3, [pc, #404]	; (8010fc4 <_dtoa_r+0x62c>)
 8010e30:	2200      	movs	r2, #0
 8010e32:	4640      	mov	r0, r8
 8010e34:	4649      	mov	r1, r9
 8010e36:	f7ef fbdf 	bl	80005f8 <__aeabi_dmul>
 8010e3a:	4652      	mov	r2, sl
 8010e3c:	465b      	mov	r3, fp
 8010e3e:	f7ef fe61 	bl	8000b04 <__aeabi_dcmpge>
 8010e42:	9e03      	ldr	r6, [sp, #12]
 8010e44:	4637      	mov	r7, r6
 8010e46:	2800      	cmp	r0, #0
 8010e48:	f040 8245 	bne.w	80112d6 <_dtoa_r+0x93e>
 8010e4c:	9d01      	ldr	r5, [sp, #4]
 8010e4e:	2331      	movs	r3, #49	; 0x31
 8010e50:	f805 3b01 	strb.w	r3, [r5], #1
 8010e54:	9b00      	ldr	r3, [sp, #0]
 8010e56:	3301      	adds	r3, #1
 8010e58:	9300      	str	r3, [sp, #0]
 8010e5a:	e240      	b.n	80112de <_dtoa_r+0x946>
 8010e5c:	07f2      	lsls	r2, r6, #31
 8010e5e:	d505      	bpl.n	8010e6c <_dtoa_r+0x4d4>
 8010e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e64:	f7ef fbc8 	bl	80005f8 <__aeabi_dmul>
 8010e68:	3501      	adds	r5, #1
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	1076      	asrs	r6, r6, #1
 8010e6e:	3708      	adds	r7, #8
 8010e70:	e777      	b.n	8010d62 <_dtoa_r+0x3ca>
 8010e72:	2502      	movs	r5, #2
 8010e74:	e779      	b.n	8010d6a <_dtoa_r+0x3d2>
 8010e76:	9f00      	ldr	r7, [sp, #0]
 8010e78:	9e03      	ldr	r6, [sp, #12]
 8010e7a:	e794      	b.n	8010da6 <_dtoa_r+0x40e>
 8010e7c:	9901      	ldr	r1, [sp, #4]
 8010e7e:	4b4c      	ldr	r3, [pc, #304]	; (8010fb0 <_dtoa_r+0x618>)
 8010e80:	4431      	add	r1, r6
 8010e82:	910d      	str	r1, [sp, #52]	; 0x34
 8010e84:	9908      	ldr	r1, [sp, #32]
 8010e86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010e8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010e8e:	2900      	cmp	r1, #0
 8010e90:	d043      	beq.n	8010f1a <_dtoa_r+0x582>
 8010e92:	494d      	ldr	r1, [pc, #308]	; (8010fc8 <_dtoa_r+0x630>)
 8010e94:	2000      	movs	r0, #0
 8010e96:	f7ef fcd9 	bl	800084c <__aeabi_ddiv>
 8010e9a:	4652      	mov	r2, sl
 8010e9c:	465b      	mov	r3, fp
 8010e9e:	f7ef f9f3 	bl	8000288 <__aeabi_dsub>
 8010ea2:	9d01      	ldr	r5, [sp, #4]
 8010ea4:	4682      	mov	sl, r0
 8010ea6:	468b      	mov	fp, r1
 8010ea8:	4649      	mov	r1, r9
 8010eaa:	4640      	mov	r0, r8
 8010eac:	f7ef fe54 	bl	8000b58 <__aeabi_d2iz>
 8010eb0:	4606      	mov	r6, r0
 8010eb2:	f7ef fb37 	bl	8000524 <__aeabi_i2d>
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	460b      	mov	r3, r1
 8010eba:	4640      	mov	r0, r8
 8010ebc:	4649      	mov	r1, r9
 8010ebe:	f7ef f9e3 	bl	8000288 <__aeabi_dsub>
 8010ec2:	3630      	adds	r6, #48	; 0x30
 8010ec4:	f805 6b01 	strb.w	r6, [r5], #1
 8010ec8:	4652      	mov	r2, sl
 8010eca:	465b      	mov	r3, fp
 8010ecc:	4680      	mov	r8, r0
 8010ece:	4689      	mov	r9, r1
 8010ed0:	f7ef fe04 	bl	8000adc <__aeabi_dcmplt>
 8010ed4:	2800      	cmp	r0, #0
 8010ed6:	d163      	bne.n	8010fa0 <_dtoa_r+0x608>
 8010ed8:	4642      	mov	r2, r8
 8010eda:	464b      	mov	r3, r9
 8010edc:	4936      	ldr	r1, [pc, #216]	; (8010fb8 <_dtoa_r+0x620>)
 8010ede:	2000      	movs	r0, #0
 8010ee0:	f7ef f9d2 	bl	8000288 <__aeabi_dsub>
 8010ee4:	4652      	mov	r2, sl
 8010ee6:	465b      	mov	r3, fp
 8010ee8:	f7ef fdf8 	bl	8000adc <__aeabi_dcmplt>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	f040 80b5 	bne.w	801105c <_dtoa_r+0x6c4>
 8010ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ef4:	429d      	cmp	r5, r3
 8010ef6:	d081      	beq.n	8010dfc <_dtoa_r+0x464>
 8010ef8:	4b30      	ldr	r3, [pc, #192]	; (8010fbc <_dtoa_r+0x624>)
 8010efa:	2200      	movs	r2, #0
 8010efc:	4650      	mov	r0, sl
 8010efe:	4659      	mov	r1, fp
 8010f00:	f7ef fb7a 	bl	80005f8 <__aeabi_dmul>
 8010f04:	4b2d      	ldr	r3, [pc, #180]	; (8010fbc <_dtoa_r+0x624>)
 8010f06:	4682      	mov	sl, r0
 8010f08:	468b      	mov	fp, r1
 8010f0a:	4640      	mov	r0, r8
 8010f0c:	4649      	mov	r1, r9
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f7ef fb72 	bl	80005f8 <__aeabi_dmul>
 8010f14:	4680      	mov	r8, r0
 8010f16:	4689      	mov	r9, r1
 8010f18:	e7c6      	b.n	8010ea8 <_dtoa_r+0x510>
 8010f1a:	4650      	mov	r0, sl
 8010f1c:	4659      	mov	r1, fp
 8010f1e:	f7ef fb6b 	bl	80005f8 <__aeabi_dmul>
 8010f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f24:	9d01      	ldr	r5, [sp, #4]
 8010f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f28:	4682      	mov	sl, r0
 8010f2a:	468b      	mov	fp, r1
 8010f2c:	4649      	mov	r1, r9
 8010f2e:	4640      	mov	r0, r8
 8010f30:	f7ef fe12 	bl	8000b58 <__aeabi_d2iz>
 8010f34:	4606      	mov	r6, r0
 8010f36:	f7ef faf5 	bl	8000524 <__aeabi_i2d>
 8010f3a:	3630      	adds	r6, #48	; 0x30
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	460b      	mov	r3, r1
 8010f40:	4640      	mov	r0, r8
 8010f42:	4649      	mov	r1, r9
 8010f44:	f7ef f9a0 	bl	8000288 <__aeabi_dsub>
 8010f48:	f805 6b01 	strb.w	r6, [r5], #1
 8010f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f4e:	429d      	cmp	r5, r3
 8010f50:	4680      	mov	r8, r0
 8010f52:	4689      	mov	r9, r1
 8010f54:	f04f 0200 	mov.w	r2, #0
 8010f58:	d124      	bne.n	8010fa4 <_dtoa_r+0x60c>
 8010f5a:	4b1b      	ldr	r3, [pc, #108]	; (8010fc8 <_dtoa_r+0x630>)
 8010f5c:	4650      	mov	r0, sl
 8010f5e:	4659      	mov	r1, fp
 8010f60:	f7ef f994 	bl	800028c <__adddf3>
 8010f64:	4602      	mov	r2, r0
 8010f66:	460b      	mov	r3, r1
 8010f68:	4640      	mov	r0, r8
 8010f6a:	4649      	mov	r1, r9
 8010f6c:	f7ef fdd4 	bl	8000b18 <__aeabi_dcmpgt>
 8010f70:	2800      	cmp	r0, #0
 8010f72:	d173      	bne.n	801105c <_dtoa_r+0x6c4>
 8010f74:	4652      	mov	r2, sl
 8010f76:	465b      	mov	r3, fp
 8010f78:	4913      	ldr	r1, [pc, #76]	; (8010fc8 <_dtoa_r+0x630>)
 8010f7a:	2000      	movs	r0, #0
 8010f7c:	f7ef f984 	bl	8000288 <__aeabi_dsub>
 8010f80:	4602      	mov	r2, r0
 8010f82:	460b      	mov	r3, r1
 8010f84:	4640      	mov	r0, r8
 8010f86:	4649      	mov	r1, r9
 8010f88:	f7ef fda8 	bl	8000adc <__aeabi_dcmplt>
 8010f8c:	2800      	cmp	r0, #0
 8010f8e:	f43f af35 	beq.w	8010dfc <_dtoa_r+0x464>
 8010f92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010f94:	1e6b      	subs	r3, r5, #1
 8010f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010f9c:	2b30      	cmp	r3, #48	; 0x30
 8010f9e:	d0f8      	beq.n	8010f92 <_dtoa_r+0x5fa>
 8010fa0:	9700      	str	r7, [sp, #0]
 8010fa2:	e049      	b.n	8011038 <_dtoa_r+0x6a0>
 8010fa4:	4b05      	ldr	r3, [pc, #20]	; (8010fbc <_dtoa_r+0x624>)
 8010fa6:	f7ef fb27 	bl	80005f8 <__aeabi_dmul>
 8010faa:	4680      	mov	r8, r0
 8010fac:	4689      	mov	r9, r1
 8010fae:	e7bd      	b.n	8010f2c <_dtoa_r+0x594>
 8010fb0:	08014108 	.word	0x08014108
 8010fb4:	080140e0 	.word	0x080140e0
 8010fb8:	3ff00000 	.word	0x3ff00000
 8010fbc:	40240000 	.word	0x40240000
 8010fc0:	401c0000 	.word	0x401c0000
 8010fc4:	40140000 	.word	0x40140000
 8010fc8:	3fe00000 	.word	0x3fe00000
 8010fcc:	9d01      	ldr	r5, [sp, #4]
 8010fce:	4656      	mov	r6, sl
 8010fd0:	465f      	mov	r7, fp
 8010fd2:	4642      	mov	r2, r8
 8010fd4:	464b      	mov	r3, r9
 8010fd6:	4630      	mov	r0, r6
 8010fd8:	4639      	mov	r1, r7
 8010fda:	f7ef fc37 	bl	800084c <__aeabi_ddiv>
 8010fde:	f7ef fdbb 	bl	8000b58 <__aeabi_d2iz>
 8010fe2:	4682      	mov	sl, r0
 8010fe4:	f7ef fa9e 	bl	8000524 <__aeabi_i2d>
 8010fe8:	4642      	mov	r2, r8
 8010fea:	464b      	mov	r3, r9
 8010fec:	f7ef fb04 	bl	80005f8 <__aeabi_dmul>
 8010ff0:	4602      	mov	r2, r0
 8010ff2:	460b      	mov	r3, r1
 8010ff4:	4630      	mov	r0, r6
 8010ff6:	4639      	mov	r1, r7
 8010ff8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010ffc:	f7ef f944 	bl	8000288 <__aeabi_dsub>
 8011000:	f805 6b01 	strb.w	r6, [r5], #1
 8011004:	9e01      	ldr	r6, [sp, #4]
 8011006:	9f03      	ldr	r7, [sp, #12]
 8011008:	1bae      	subs	r6, r5, r6
 801100a:	42b7      	cmp	r7, r6
 801100c:	4602      	mov	r2, r0
 801100e:	460b      	mov	r3, r1
 8011010:	d135      	bne.n	801107e <_dtoa_r+0x6e6>
 8011012:	f7ef f93b 	bl	800028c <__adddf3>
 8011016:	4642      	mov	r2, r8
 8011018:	464b      	mov	r3, r9
 801101a:	4606      	mov	r6, r0
 801101c:	460f      	mov	r7, r1
 801101e:	f7ef fd7b 	bl	8000b18 <__aeabi_dcmpgt>
 8011022:	b9d0      	cbnz	r0, 801105a <_dtoa_r+0x6c2>
 8011024:	4642      	mov	r2, r8
 8011026:	464b      	mov	r3, r9
 8011028:	4630      	mov	r0, r6
 801102a:	4639      	mov	r1, r7
 801102c:	f7ef fd4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011030:	b110      	cbz	r0, 8011038 <_dtoa_r+0x6a0>
 8011032:	f01a 0f01 	tst.w	sl, #1
 8011036:	d110      	bne.n	801105a <_dtoa_r+0x6c2>
 8011038:	4620      	mov	r0, r4
 801103a:	ee18 1a10 	vmov	r1, s16
 801103e:	f000 faf3 	bl	8011628 <_Bfree>
 8011042:	2300      	movs	r3, #0
 8011044:	9800      	ldr	r0, [sp, #0]
 8011046:	702b      	strb	r3, [r5, #0]
 8011048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801104a:	3001      	adds	r0, #1
 801104c:	6018      	str	r0, [r3, #0]
 801104e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011050:	2b00      	cmp	r3, #0
 8011052:	f43f acf1 	beq.w	8010a38 <_dtoa_r+0xa0>
 8011056:	601d      	str	r5, [r3, #0]
 8011058:	e4ee      	b.n	8010a38 <_dtoa_r+0xa0>
 801105a:	9f00      	ldr	r7, [sp, #0]
 801105c:	462b      	mov	r3, r5
 801105e:	461d      	mov	r5, r3
 8011060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011064:	2a39      	cmp	r2, #57	; 0x39
 8011066:	d106      	bne.n	8011076 <_dtoa_r+0x6de>
 8011068:	9a01      	ldr	r2, [sp, #4]
 801106a:	429a      	cmp	r2, r3
 801106c:	d1f7      	bne.n	801105e <_dtoa_r+0x6c6>
 801106e:	9901      	ldr	r1, [sp, #4]
 8011070:	2230      	movs	r2, #48	; 0x30
 8011072:	3701      	adds	r7, #1
 8011074:	700a      	strb	r2, [r1, #0]
 8011076:	781a      	ldrb	r2, [r3, #0]
 8011078:	3201      	adds	r2, #1
 801107a:	701a      	strb	r2, [r3, #0]
 801107c:	e790      	b.n	8010fa0 <_dtoa_r+0x608>
 801107e:	4ba6      	ldr	r3, [pc, #664]	; (8011318 <_dtoa_r+0x980>)
 8011080:	2200      	movs	r2, #0
 8011082:	f7ef fab9 	bl	80005f8 <__aeabi_dmul>
 8011086:	2200      	movs	r2, #0
 8011088:	2300      	movs	r3, #0
 801108a:	4606      	mov	r6, r0
 801108c:	460f      	mov	r7, r1
 801108e:	f7ef fd1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011092:	2800      	cmp	r0, #0
 8011094:	d09d      	beq.n	8010fd2 <_dtoa_r+0x63a>
 8011096:	e7cf      	b.n	8011038 <_dtoa_r+0x6a0>
 8011098:	9a08      	ldr	r2, [sp, #32]
 801109a:	2a00      	cmp	r2, #0
 801109c:	f000 80d7 	beq.w	801124e <_dtoa_r+0x8b6>
 80110a0:	9a06      	ldr	r2, [sp, #24]
 80110a2:	2a01      	cmp	r2, #1
 80110a4:	f300 80ba 	bgt.w	801121c <_dtoa_r+0x884>
 80110a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80110aa:	2a00      	cmp	r2, #0
 80110ac:	f000 80b2 	beq.w	8011214 <_dtoa_r+0x87c>
 80110b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80110b4:	9e07      	ldr	r6, [sp, #28]
 80110b6:	9d04      	ldr	r5, [sp, #16]
 80110b8:	9a04      	ldr	r2, [sp, #16]
 80110ba:	441a      	add	r2, r3
 80110bc:	9204      	str	r2, [sp, #16]
 80110be:	9a05      	ldr	r2, [sp, #20]
 80110c0:	2101      	movs	r1, #1
 80110c2:	441a      	add	r2, r3
 80110c4:	4620      	mov	r0, r4
 80110c6:	9205      	str	r2, [sp, #20]
 80110c8:	f000 fb66 	bl	8011798 <__i2b>
 80110cc:	4607      	mov	r7, r0
 80110ce:	2d00      	cmp	r5, #0
 80110d0:	dd0c      	ble.n	80110ec <_dtoa_r+0x754>
 80110d2:	9b05      	ldr	r3, [sp, #20]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	dd09      	ble.n	80110ec <_dtoa_r+0x754>
 80110d8:	42ab      	cmp	r3, r5
 80110da:	9a04      	ldr	r2, [sp, #16]
 80110dc:	bfa8      	it	ge
 80110de:	462b      	movge	r3, r5
 80110e0:	1ad2      	subs	r2, r2, r3
 80110e2:	9204      	str	r2, [sp, #16]
 80110e4:	9a05      	ldr	r2, [sp, #20]
 80110e6:	1aed      	subs	r5, r5, r3
 80110e8:	1ad3      	subs	r3, r2, r3
 80110ea:	9305      	str	r3, [sp, #20]
 80110ec:	9b07      	ldr	r3, [sp, #28]
 80110ee:	b31b      	cbz	r3, 8011138 <_dtoa_r+0x7a0>
 80110f0:	9b08      	ldr	r3, [sp, #32]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	f000 80af 	beq.w	8011256 <_dtoa_r+0x8be>
 80110f8:	2e00      	cmp	r6, #0
 80110fa:	dd13      	ble.n	8011124 <_dtoa_r+0x78c>
 80110fc:	4639      	mov	r1, r7
 80110fe:	4632      	mov	r2, r6
 8011100:	4620      	mov	r0, r4
 8011102:	f000 fc09 	bl	8011918 <__pow5mult>
 8011106:	ee18 2a10 	vmov	r2, s16
 801110a:	4601      	mov	r1, r0
 801110c:	4607      	mov	r7, r0
 801110e:	4620      	mov	r0, r4
 8011110:	f000 fb58 	bl	80117c4 <__multiply>
 8011114:	ee18 1a10 	vmov	r1, s16
 8011118:	4680      	mov	r8, r0
 801111a:	4620      	mov	r0, r4
 801111c:	f000 fa84 	bl	8011628 <_Bfree>
 8011120:	ee08 8a10 	vmov	s16, r8
 8011124:	9b07      	ldr	r3, [sp, #28]
 8011126:	1b9a      	subs	r2, r3, r6
 8011128:	d006      	beq.n	8011138 <_dtoa_r+0x7a0>
 801112a:	ee18 1a10 	vmov	r1, s16
 801112e:	4620      	mov	r0, r4
 8011130:	f000 fbf2 	bl	8011918 <__pow5mult>
 8011134:	ee08 0a10 	vmov	s16, r0
 8011138:	2101      	movs	r1, #1
 801113a:	4620      	mov	r0, r4
 801113c:	f000 fb2c 	bl	8011798 <__i2b>
 8011140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011142:	2b00      	cmp	r3, #0
 8011144:	4606      	mov	r6, r0
 8011146:	f340 8088 	ble.w	801125a <_dtoa_r+0x8c2>
 801114a:	461a      	mov	r2, r3
 801114c:	4601      	mov	r1, r0
 801114e:	4620      	mov	r0, r4
 8011150:	f000 fbe2 	bl	8011918 <__pow5mult>
 8011154:	9b06      	ldr	r3, [sp, #24]
 8011156:	2b01      	cmp	r3, #1
 8011158:	4606      	mov	r6, r0
 801115a:	f340 8081 	ble.w	8011260 <_dtoa_r+0x8c8>
 801115e:	f04f 0800 	mov.w	r8, #0
 8011162:	6933      	ldr	r3, [r6, #16]
 8011164:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011168:	6918      	ldr	r0, [r3, #16]
 801116a:	f000 fac5 	bl	80116f8 <__hi0bits>
 801116e:	f1c0 0020 	rsb	r0, r0, #32
 8011172:	9b05      	ldr	r3, [sp, #20]
 8011174:	4418      	add	r0, r3
 8011176:	f010 001f 	ands.w	r0, r0, #31
 801117a:	f000 8092 	beq.w	80112a2 <_dtoa_r+0x90a>
 801117e:	f1c0 0320 	rsb	r3, r0, #32
 8011182:	2b04      	cmp	r3, #4
 8011184:	f340 808a 	ble.w	801129c <_dtoa_r+0x904>
 8011188:	f1c0 001c 	rsb	r0, r0, #28
 801118c:	9b04      	ldr	r3, [sp, #16]
 801118e:	4403      	add	r3, r0
 8011190:	9304      	str	r3, [sp, #16]
 8011192:	9b05      	ldr	r3, [sp, #20]
 8011194:	4403      	add	r3, r0
 8011196:	4405      	add	r5, r0
 8011198:	9305      	str	r3, [sp, #20]
 801119a:	9b04      	ldr	r3, [sp, #16]
 801119c:	2b00      	cmp	r3, #0
 801119e:	dd07      	ble.n	80111b0 <_dtoa_r+0x818>
 80111a0:	ee18 1a10 	vmov	r1, s16
 80111a4:	461a      	mov	r2, r3
 80111a6:	4620      	mov	r0, r4
 80111a8:	f000 fc10 	bl	80119cc <__lshift>
 80111ac:	ee08 0a10 	vmov	s16, r0
 80111b0:	9b05      	ldr	r3, [sp, #20]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	dd05      	ble.n	80111c2 <_dtoa_r+0x82a>
 80111b6:	4631      	mov	r1, r6
 80111b8:	461a      	mov	r2, r3
 80111ba:	4620      	mov	r0, r4
 80111bc:	f000 fc06 	bl	80119cc <__lshift>
 80111c0:	4606      	mov	r6, r0
 80111c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d06e      	beq.n	80112a6 <_dtoa_r+0x90e>
 80111c8:	ee18 0a10 	vmov	r0, s16
 80111cc:	4631      	mov	r1, r6
 80111ce:	f000 fc6d 	bl	8011aac <__mcmp>
 80111d2:	2800      	cmp	r0, #0
 80111d4:	da67      	bge.n	80112a6 <_dtoa_r+0x90e>
 80111d6:	9b00      	ldr	r3, [sp, #0]
 80111d8:	3b01      	subs	r3, #1
 80111da:	ee18 1a10 	vmov	r1, s16
 80111de:	9300      	str	r3, [sp, #0]
 80111e0:	220a      	movs	r2, #10
 80111e2:	2300      	movs	r3, #0
 80111e4:	4620      	mov	r0, r4
 80111e6:	f000 fa41 	bl	801166c <__multadd>
 80111ea:	9b08      	ldr	r3, [sp, #32]
 80111ec:	ee08 0a10 	vmov	s16, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	f000 81b1 	beq.w	8011558 <_dtoa_r+0xbc0>
 80111f6:	2300      	movs	r3, #0
 80111f8:	4639      	mov	r1, r7
 80111fa:	220a      	movs	r2, #10
 80111fc:	4620      	mov	r0, r4
 80111fe:	f000 fa35 	bl	801166c <__multadd>
 8011202:	9b02      	ldr	r3, [sp, #8]
 8011204:	2b00      	cmp	r3, #0
 8011206:	4607      	mov	r7, r0
 8011208:	f300 808e 	bgt.w	8011328 <_dtoa_r+0x990>
 801120c:	9b06      	ldr	r3, [sp, #24]
 801120e:	2b02      	cmp	r3, #2
 8011210:	dc51      	bgt.n	80112b6 <_dtoa_r+0x91e>
 8011212:	e089      	b.n	8011328 <_dtoa_r+0x990>
 8011214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011216:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801121a:	e74b      	b.n	80110b4 <_dtoa_r+0x71c>
 801121c:	9b03      	ldr	r3, [sp, #12]
 801121e:	1e5e      	subs	r6, r3, #1
 8011220:	9b07      	ldr	r3, [sp, #28]
 8011222:	42b3      	cmp	r3, r6
 8011224:	bfbf      	itttt	lt
 8011226:	9b07      	ldrlt	r3, [sp, #28]
 8011228:	9607      	strlt	r6, [sp, #28]
 801122a:	1af2      	sublt	r2, r6, r3
 801122c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801122e:	bfb6      	itet	lt
 8011230:	189b      	addlt	r3, r3, r2
 8011232:	1b9e      	subge	r6, r3, r6
 8011234:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011236:	9b03      	ldr	r3, [sp, #12]
 8011238:	bfb8      	it	lt
 801123a:	2600      	movlt	r6, #0
 801123c:	2b00      	cmp	r3, #0
 801123e:	bfb7      	itett	lt
 8011240:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011244:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011248:	1a9d      	sublt	r5, r3, r2
 801124a:	2300      	movlt	r3, #0
 801124c:	e734      	b.n	80110b8 <_dtoa_r+0x720>
 801124e:	9e07      	ldr	r6, [sp, #28]
 8011250:	9d04      	ldr	r5, [sp, #16]
 8011252:	9f08      	ldr	r7, [sp, #32]
 8011254:	e73b      	b.n	80110ce <_dtoa_r+0x736>
 8011256:	9a07      	ldr	r2, [sp, #28]
 8011258:	e767      	b.n	801112a <_dtoa_r+0x792>
 801125a:	9b06      	ldr	r3, [sp, #24]
 801125c:	2b01      	cmp	r3, #1
 801125e:	dc18      	bgt.n	8011292 <_dtoa_r+0x8fa>
 8011260:	f1ba 0f00 	cmp.w	sl, #0
 8011264:	d115      	bne.n	8011292 <_dtoa_r+0x8fa>
 8011266:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801126a:	b993      	cbnz	r3, 8011292 <_dtoa_r+0x8fa>
 801126c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011270:	0d1b      	lsrs	r3, r3, #20
 8011272:	051b      	lsls	r3, r3, #20
 8011274:	b183      	cbz	r3, 8011298 <_dtoa_r+0x900>
 8011276:	9b04      	ldr	r3, [sp, #16]
 8011278:	3301      	adds	r3, #1
 801127a:	9304      	str	r3, [sp, #16]
 801127c:	9b05      	ldr	r3, [sp, #20]
 801127e:	3301      	adds	r3, #1
 8011280:	9305      	str	r3, [sp, #20]
 8011282:	f04f 0801 	mov.w	r8, #1
 8011286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011288:	2b00      	cmp	r3, #0
 801128a:	f47f af6a 	bne.w	8011162 <_dtoa_r+0x7ca>
 801128e:	2001      	movs	r0, #1
 8011290:	e76f      	b.n	8011172 <_dtoa_r+0x7da>
 8011292:	f04f 0800 	mov.w	r8, #0
 8011296:	e7f6      	b.n	8011286 <_dtoa_r+0x8ee>
 8011298:	4698      	mov	r8, r3
 801129a:	e7f4      	b.n	8011286 <_dtoa_r+0x8ee>
 801129c:	f43f af7d 	beq.w	801119a <_dtoa_r+0x802>
 80112a0:	4618      	mov	r0, r3
 80112a2:	301c      	adds	r0, #28
 80112a4:	e772      	b.n	801118c <_dtoa_r+0x7f4>
 80112a6:	9b03      	ldr	r3, [sp, #12]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	dc37      	bgt.n	801131c <_dtoa_r+0x984>
 80112ac:	9b06      	ldr	r3, [sp, #24]
 80112ae:	2b02      	cmp	r3, #2
 80112b0:	dd34      	ble.n	801131c <_dtoa_r+0x984>
 80112b2:	9b03      	ldr	r3, [sp, #12]
 80112b4:	9302      	str	r3, [sp, #8]
 80112b6:	9b02      	ldr	r3, [sp, #8]
 80112b8:	b96b      	cbnz	r3, 80112d6 <_dtoa_r+0x93e>
 80112ba:	4631      	mov	r1, r6
 80112bc:	2205      	movs	r2, #5
 80112be:	4620      	mov	r0, r4
 80112c0:	f000 f9d4 	bl	801166c <__multadd>
 80112c4:	4601      	mov	r1, r0
 80112c6:	4606      	mov	r6, r0
 80112c8:	ee18 0a10 	vmov	r0, s16
 80112cc:	f000 fbee 	bl	8011aac <__mcmp>
 80112d0:	2800      	cmp	r0, #0
 80112d2:	f73f adbb 	bgt.w	8010e4c <_dtoa_r+0x4b4>
 80112d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112d8:	9d01      	ldr	r5, [sp, #4]
 80112da:	43db      	mvns	r3, r3
 80112dc:	9300      	str	r3, [sp, #0]
 80112de:	f04f 0800 	mov.w	r8, #0
 80112e2:	4631      	mov	r1, r6
 80112e4:	4620      	mov	r0, r4
 80112e6:	f000 f99f 	bl	8011628 <_Bfree>
 80112ea:	2f00      	cmp	r7, #0
 80112ec:	f43f aea4 	beq.w	8011038 <_dtoa_r+0x6a0>
 80112f0:	f1b8 0f00 	cmp.w	r8, #0
 80112f4:	d005      	beq.n	8011302 <_dtoa_r+0x96a>
 80112f6:	45b8      	cmp	r8, r7
 80112f8:	d003      	beq.n	8011302 <_dtoa_r+0x96a>
 80112fa:	4641      	mov	r1, r8
 80112fc:	4620      	mov	r0, r4
 80112fe:	f000 f993 	bl	8011628 <_Bfree>
 8011302:	4639      	mov	r1, r7
 8011304:	4620      	mov	r0, r4
 8011306:	f000 f98f 	bl	8011628 <_Bfree>
 801130a:	e695      	b.n	8011038 <_dtoa_r+0x6a0>
 801130c:	2600      	movs	r6, #0
 801130e:	4637      	mov	r7, r6
 8011310:	e7e1      	b.n	80112d6 <_dtoa_r+0x93e>
 8011312:	9700      	str	r7, [sp, #0]
 8011314:	4637      	mov	r7, r6
 8011316:	e599      	b.n	8010e4c <_dtoa_r+0x4b4>
 8011318:	40240000 	.word	0x40240000
 801131c:	9b08      	ldr	r3, [sp, #32]
 801131e:	2b00      	cmp	r3, #0
 8011320:	f000 80ca 	beq.w	80114b8 <_dtoa_r+0xb20>
 8011324:	9b03      	ldr	r3, [sp, #12]
 8011326:	9302      	str	r3, [sp, #8]
 8011328:	2d00      	cmp	r5, #0
 801132a:	dd05      	ble.n	8011338 <_dtoa_r+0x9a0>
 801132c:	4639      	mov	r1, r7
 801132e:	462a      	mov	r2, r5
 8011330:	4620      	mov	r0, r4
 8011332:	f000 fb4b 	bl	80119cc <__lshift>
 8011336:	4607      	mov	r7, r0
 8011338:	f1b8 0f00 	cmp.w	r8, #0
 801133c:	d05b      	beq.n	80113f6 <_dtoa_r+0xa5e>
 801133e:	6879      	ldr	r1, [r7, #4]
 8011340:	4620      	mov	r0, r4
 8011342:	f000 f931 	bl	80115a8 <_Balloc>
 8011346:	4605      	mov	r5, r0
 8011348:	b928      	cbnz	r0, 8011356 <_dtoa_r+0x9be>
 801134a:	4b87      	ldr	r3, [pc, #540]	; (8011568 <_dtoa_r+0xbd0>)
 801134c:	4602      	mov	r2, r0
 801134e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011352:	f7ff bb3b 	b.w	80109cc <_dtoa_r+0x34>
 8011356:	693a      	ldr	r2, [r7, #16]
 8011358:	3202      	adds	r2, #2
 801135a:	0092      	lsls	r2, r2, #2
 801135c:	f107 010c 	add.w	r1, r7, #12
 8011360:	300c      	adds	r0, #12
 8011362:	f000 f913 	bl	801158c <memcpy>
 8011366:	2201      	movs	r2, #1
 8011368:	4629      	mov	r1, r5
 801136a:	4620      	mov	r0, r4
 801136c:	f000 fb2e 	bl	80119cc <__lshift>
 8011370:	9b01      	ldr	r3, [sp, #4]
 8011372:	f103 0901 	add.w	r9, r3, #1
 8011376:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801137a:	4413      	add	r3, r2
 801137c:	9305      	str	r3, [sp, #20]
 801137e:	f00a 0301 	and.w	r3, sl, #1
 8011382:	46b8      	mov	r8, r7
 8011384:	9304      	str	r3, [sp, #16]
 8011386:	4607      	mov	r7, r0
 8011388:	4631      	mov	r1, r6
 801138a:	ee18 0a10 	vmov	r0, s16
 801138e:	f7ff fa77 	bl	8010880 <quorem>
 8011392:	4641      	mov	r1, r8
 8011394:	9002      	str	r0, [sp, #8]
 8011396:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801139a:	ee18 0a10 	vmov	r0, s16
 801139e:	f000 fb85 	bl	8011aac <__mcmp>
 80113a2:	463a      	mov	r2, r7
 80113a4:	9003      	str	r0, [sp, #12]
 80113a6:	4631      	mov	r1, r6
 80113a8:	4620      	mov	r0, r4
 80113aa:	f000 fb9b 	bl	8011ae4 <__mdiff>
 80113ae:	68c2      	ldr	r2, [r0, #12]
 80113b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80113b4:	4605      	mov	r5, r0
 80113b6:	bb02      	cbnz	r2, 80113fa <_dtoa_r+0xa62>
 80113b8:	4601      	mov	r1, r0
 80113ba:	ee18 0a10 	vmov	r0, s16
 80113be:	f000 fb75 	bl	8011aac <__mcmp>
 80113c2:	4602      	mov	r2, r0
 80113c4:	4629      	mov	r1, r5
 80113c6:	4620      	mov	r0, r4
 80113c8:	9207      	str	r2, [sp, #28]
 80113ca:	f000 f92d 	bl	8011628 <_Bfree>
 80113ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80113d2:	ea43 0102 	orr.w	r1, r3, r2
 80113d6:	9b04      	ldr	r3, [sp, #16]
 80113d8:	430b      	orrs	r3, r1
 80113da:	464d      	mov	r5, r9
 80113dc:	d10f      	bne.n	80113fe <_dtoa_r+0xa66>
 80113de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80113e2:	d02a      	beq.n	801143a <_dtoa_r+0xaa2>
 80113e4:	9b03      	ldr	r3, [sp, #12]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	dd02      	ble.n	80113f0 <_dtoa_r+0xa58>
 80113ea:	9b02      	ldr	r3, [sp, #8]
 80113ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80113f0:	f88b a000 	strb.w	sl, [fp]
 80113f4:	e775      	b.n	80112e2 <_dtoa_r+0x94a>
 80113f6:	4638      	mov	r0, r7
 80113f8:	e7ba      	b.n	8011370 <_dtoa_r+0x9d8>
 80113fa:	2201      	movs	r2, #1
 80113fc:	e7e2      	b.n	80113c4 <_dtoa_r+0xa2c>
 80113fe:	9b03      	ldr	r3, [sp, #12]
 8011400:	2b00      	cmp	r3, #0
 8011402:	db04      	blt.n	801140e <_dtoa_r+0xa76>
 8011404:	9906      	ldr	r1, [sp, #24]
 8011406:	430b      	orrs	r3, r1
 8011408:	9904      	ldr	r1, [sp, #16]
 801140a:	430b      	orrs	r3, r1
 801140c:	d122      	bne.n	8011454 <_dtoa_r+0xabc>
 801140e:	2a00      	cmp	r2, #0
 8011410:	ddee      	ble.n	80113f0 <_dtoa_r+0xa58>
 8011412:	ee18 1a10 	vmov	r1, s16
 8011416:	2201      	movs	r2, #1
 8011418:	4620      	mov	r0, r4
 801141a:	f000 fad7 	bl	80119cc <__lshift>
 801141e:	4631      	mov	r1, r6
 8011420:	ee08 0a10 	vmov	s16, r0
 8011424:	f000 fb42 	bl	8011aac <__mcmp>
 8011428:	2800      	cmp	r0, #0
 801142a:	dc03      	bgt.n	8011434 <_dtoa_r+0xa9c>
 801142c:	d1e0      	bne.n	80113f0 <_dtoa_r+0xa58>
 801142e:	f01a 0f01 	tst.w	sl, #1
 8011432:	d0dd      	beq.n	80113f0 <_dtoa_r+0xa58>
 8011434:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011438:	d1d7      	bne.n	80113ea <_dtoa_r+0xa52>
 801143a:	2339      	movs	r3, #57	; 0x39
 801143c:	f88b 3000 	strb.w	r3, [fp]
 8011440:	462b      	mov	r3, r5
 8011442:	461d      	mov	r5, r3
 8011444:	3b01      	subs	r3, #1
 8011446:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801144a:	2a39      	cmp	r2, #57	; 0x39
 801144c:	d071      	beq.n	8011532 <_dtoa_r+0xb9a>
 801144e:	3201      	adds	r2, #1
 8011450:	701a      	strb	r2, [r3, #0]
 8011452:	e746      	b.n	80112e2 <_dtoa_r+0x94a>
 8011454:	2a00      	cmp	r2, #0
 8011456:	dd07      	ble.n	8011468 <_dtoa_r+0xad0>
 8011458:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801145c:	d0ed      	beq.n	801143a <_dtoa_r+0xaa2>
 801145e:	f10a 0301 	add.w	r3, sl, #1
 8011462:	f88b 3000 	strb.w	r3, [fp]
 8011466:	e73c      	b.n	80112e2 <_dtoa_r+0x94a>
 8011468:	9b05      	ldr	r3, [sp, #20]
 801146a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801146e:	4599      	cmp	r9, r3
 8011470:	d047      	beq.n	8011502 <_dtoa_r+0xb6a>
 8011472:	ee18 1a10 	vmov	r1, s16
 8011476:	2300      	movs	r3, #0
 8011478:	220a      	movs	r2, #10
 801147a:	4620      	mov	r0, r4
 801147c:	f000 f8f6 	bl	801166c <__multadd>
 8011480:	45b8      	cmp	r8, r7
 8011482:	ee08 0a10 	vmov	s16, r0
 8011486:	f04f 0300 	mov.w	r3, #0
 801148a:	f04f 020a 	mov.w	r2, #10
 801148e:	4641      	mov	r1, r8
 8011490:	4620      	mov	r0, r4
 8011492:	d106      	bne.n	80114a2 <_dtoa_r+0xb0a>
 8011494:	f000 f8ea 	bl	801166c <__multadd>
 8011498:	4680      	mov	r8, r0
 801149a:	4607      	mov	r7, r0
 801149c:	f109 0901 	add.w	r9, r9, #1
 80114a0:	e772      	b.n	8011388 <_dtoa_r+0x9f0>
 80114a2:	f000 f8e3 	bl	801166c <__multadd>
 80114a6:	4639      	mov	r1, r7
 80114a8:	4680      	mov	r8, r0
 80114aa:	2300      	movs	r3, #0
 80114ac:	220a      	movs	r2, #10
 80114ae:	4620      	mov	r0, r4
 80114b0:	f000 f8dc 	bl	801166c <__multadd>
 80114b4:	4607      	mov	r7, r0
 80114b6:	e7f1      	b.n	801149c <_dtoa_r+0xb04>
 80114b8:	9b03      	ldr	r3, [sp, #12]
 80114ba:	9302      	str	r3, [sp, #8]
 80114bc:	9d01      	ldr	r5, [sp, #4]
 80114be:	ee18 0a10 	vmov	r0, s16
 80114c2:	4631      	mov	r1, r6
 80114c4:	f7ff f9dc 	bl	8010880 <quorem>
 80114c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80114cc:	9b01      	ldr	r3, [sp, #4]
 80114ce:	f805 ab01 	strb.w	sl, [r5], #1
 80114d2:	1aea      	subs	r2, r5, r3
 80114d4:	9b02      	ldr	r3, [sp, #8]
 80114d6:	4293      	cmp	r3, r2
 80114d8:	dd09      	ble.n	80114ee <_dtoa_r+0xb56>
 80114da:	ee18 1a10 	vmov	r1, s16
 80114de:	2300      	movs	r3, #0
 80114e0:	220a      	movs	r2, #10
 80114e2:	4620      	mov	r0, r4
 80114e4:	f000 f8c2 	bl	801166c <__multadd>
 80114e8:	ee08 0a10 	vmov	s16, r0
 80114ec:	e7e7      	b.n	80114be <_dtoa_r+0xb26>
 80114ee:	9b02      	ldr	r3, [sp, #8]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	bfc8      	it	gt
 80114f4:	461d      	movgt	r5, r3
 80114f6:	9b01      	ldr	r3, [sp, #4]
 80114f8:	bfd8      	it	le
 80114fa:	2501      	movle	r5, #1
 80114fc:	441d      	add	r5, r3
 80114fe:	f04f 0800 	mov.w	r8, #0
 8011502:	ee18 1a10 	vmov	r1, s16
 8011506:	2201      	movs	r2, #1
 8011508:	4620      	mov	r0, r4
 801150a:	f000 fa5f 	bl	80119cc <__lshift>
 801150e:	4631      	mov	r1, r6
 8011510:	ee08 0a10 	vmov	s16, r0
 8011514:	f000 faca 	bl	8011aac <__mcmp>
 8011518:	2800      	cmp	r0, #0
 801151a:	dc91      	bgt.n	8011440 <_dtoa_r+0xaa8>
 801151c:	d102      	bne.n	8011524 <_dtoa_r+0xb8c>
 801151e:	f01a 0f01 	tst.w	sl, #1
 8011522:	d18d      	bne.n	8011440 <_dtoa_r+0xaa8>
 8011524:	462b      	mov	r3, r5
 8011526:	461d      	mov	r5, r3
 8011528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801152c:	2a30      	cmp	r2, #48	; 0x30
 801152e:	d0fa      	beq.n	8011526 <_dtoa_r+0xb8e>
 8011530:	e6d7      	b.n	80112e2 <_dtoa_r+0x94a>
 8011532:	9a01      	ldr	r2, [sp, #4]
 8011534:	429a      	cmp	r2, r3
 8011536:	d184      	bne.n	8011442 <_dtoa_r+0xaaa>
 8011538:	9b00      	ldr	r3, [sp, #0]
 801153a:	3301      	adds	r3, #1
 801153c:	9300      	str	r3, [sp, #0]
 801153e:	2331      	movs	r3, #49	; 0x31
 8011540:	7013      	strb	r3, [r2, #0]
 8011542:	e6ce      	b.n	80112e2 <_dtoa_r+0x94a>
 8011544:	4b09      	ldr	r3, [pc, #36]	; (801156c <_dtoa_r+0xbd4>)
 8011546:	f7ff ba95 	b.w	8010a74 <_dtoa_r+0xdc>
 801154a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801154c:	2b00      	cmp	r3, #0
 801154e:	f47f aa6e 	bne.w	8010a2e <_dtoa_r+0x96>
 8011552:	4b07      	ldr	r3, [pc, #28]	; (8011570 <_dtoa_r+0xbd8>)
 8011554:	f7ff ba8e 	b.w	8010a74 <_dtoa_r+0xdc>
 8011558:	9b02      	ldr	r3, [sp, #8]
 801155a:	2b00      	cmp	r3, #0
 801155c:	dcae      	bgt.n	80114bc <_dtoa_r+0xb24>
 801155e:	9b06      	ldr	r3, [sp, #24]
 8011560:	2b02      	cmp	r3, #2
 8011562:	f73f aea8 	bgt.w	80112b6 <_dtoa_r+0x91e>
 8011566:	e7a9      	b.n	80114bc <_dtoa_r+0xb24>
 8011568:	0801406f 	.word	0x0801406f
 801156c:	08013fcc 	.word	0x08013fcc
 8011570:	08013ff0 	.word	0x08013ff0

08011574 <_localeconv_r>:
 8011574:	4800      	ldr	r0, [pc, #0]	; (8011578 <_localeconv_r+0x4>)
 8011576:	4770      	bx	lr
 8011578:	20000254 	.word	0x20000254

0801157c <malloc>:
 801157c:	4b02      	ldr	r3, [pc, #8]	; (8011588 <malloc+0xc>)
 801157e:	4601      	mov	r1, r0
 8011580:	6818      	ldr	r0, [r3, #0]
 8011582:	f000 bc17 	b.w	8011db4 <_malloc_r>
 8011586:	bf00      	nop
 8011588:	20000100 	.word	0x20000100

0801158c <memcpy>:
 801158c:	440a      	add	r2, r1
 801158e:	4291      	cmp	r1, r2
 8011590:	f100 33ff 	add.w	r3, r0, #4294967295
 8011594:	d100      	bne.n	8011598 <memcpy+0xc>
 8011596:	4770      	bx	lr
 8011598:	b510      	push	{r4, lr}
 801159a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801159e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80115a2:	4291      	cmp	r1, r2
 80115a4:	d1f9      	bne.n	801159a <memcpy+0xe>
 80115a6:	bd10      	pop	{r4, pc}

080115a8 <_Balloc>:
 80115a8:	b570      	push	{r4, r5, r6, lr}
 80115aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80115ac:	4604      	mov	r4, r0
 80115ae:	460d      	mov	r5, r1
 80115b0:	b976      	cbnz	r6, 80115d0 <_Balloc+0x28>
 80115b2:	2010      	movs	r0, #16
 80115b4:	f7ff ffe2 	bl	801157c <malloc>
 80115b8:	4602      	mov	r2, r0
 80115ba:	6260      	str	r0, [r4, #36]	; 0x24
 80115bc:	b920      	cbnz	r0, 80115c8 <_Balloc+0x20>
 80115be:	4b18      	ldr	r3, [pc, #96]	; (8011620 <_Balloc+0x78>)
 80115c0:	4818      	ldr	r0, [pc, #96]	; (8011624 <_Balloc+0x7c>)
 80115c2:	2166      	movs	r1, #102	; 0x66
 80115c4:	f000 fdd6 	bl	8012174 <__assert_func>
 80115c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115cc:	6006      	str	r6, [r0, #0]
 80115ce:	60c6      	str	r6, [r0, #12]
 80115d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80115d2:	68f3      	ldr	r3, [r6, #12]
 80115d4:	b183      	cbz	r3, 80115f8 <_Balloc+0x50>
 80115d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115d8:	68db      	ldr	r3, [r3, #12]
 80115da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80115de:	b9b8      	cbnz	r0, 8011610 <_Balloc+0x68>
 80115e0:	2101      	movs	r1, #1
 80115e2:	fa01 f605 	lsl.w	r6, r1, r5
 80115e6:	1d72      	adds	r2, r6, #5
 80115e8:	0092      	lsls	r2, r2, #2
 80115ea:	4620      	mov	r0, r4
 80115ec:	f000 fb60 	bl	8011cb0 <_calloc_r>
 80115f0:	b160      	cbz	r0, 801160c <_Balloc+0x64>
 80115f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80115f6:	e00e      	b.n	8011616 <_Balloc+0x6e>
 80115f8:	2221      	movs	r2, #33	; 0x21
 80115fa:	2104      	movs	r1, #4
 80115fc:	4620      	mov	r0, r4
 80115fe:	f000 fb57 	bl	8011cb0 <_calloc_r>
 8011602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011604:	60f0      	str	r0, [r6, #12]
 8011606:	68db      	ldr	r3, [r3, #12]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d1e4      	bne.n	80115d6 <_Balloc+0x2e>
 801160c:	2000      	movs	r0, #0
 801160e:	bd70      	pop	{r4, r5, r6, pc}
 8011610:	6802      	ldr	r2, [r0, #0]
 8011612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011616:	2300      	movs	r3, #0
 8011618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801161c:	e7f7      	b.n	801160e <_Balloc+0x66>
 801161e:	bf00      	nop
 8011620:	08013ffd 	.word	0x08013ffd
 8011624:	08014080 	.word	0x08014080

08011628 <_Bfree>:
 8011628:	b570      	push	{r4, r5, r6, lr}
 801162a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801162c:	4605      	mov	r5, r0
 801162e:	460c      	mov	r4, r1
 8011630:	b976      	cbnz	r6, 8011650 <_Bfree+0x28>
 8011632:	2010      	movs	r0, #16
 8011634:	f7ff ffa2 	bl	801157c <malloc>
 8011638:	4602      	mov	r2, r0
 801163a:	6268      	str	r0, [r5, #36]	; 0x24
 801163c:	b920      	cbnz	r0, 8011648 <_Bfree+0x20>
 801163e:	4b09      	ldr	r3, [pc, #36]	; (8011664 <_Bfree+0x3c>)
 8011640:	4809      	ldr	r0, [pc, #36]	; (8011668 <_Bfree+0x40>)
 8011642:	218a      	movs	r1, #138	; 0x8a
 8011644:	f000 fd96 	bl	8012174 <__assert_func>
 8011648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801164c:	6006      	str	r6, [r0, #0]
 801164e:	60c6      	str	r6, [r0, #12]
 8011650:	b13c      	cbz	r4, 8011662 <_Bfree+0x3a>
 8011652:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011654:	6862      	ldr	r2, [r4, #4]
 8011656:	68db      	ldr	r3, [r3, #12]
 8011658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801165c:	6021      	str	r1, [r4, #0]
 801165e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011662:	bd70      	pop	{r4, r5, r6, pc}
 8011664:	08013ffd 	.word	0x08013ffd
 8011668:	08014080 	.word	0x08014080

0801166c <__multadd>:
 801166c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011670:	690d      	ldr	r5, [r1, #16]
 8011672:	4607      	mov	r7, r0
 8011674:	460c      	mov	r4, r1
 8011676:	461e      	mov	r6, r3
 8011678:	f101 0c14 	add.w	ip, r1, #20
 801167c:	2000      	movs	r0, #0
 801167e:	f8dc 3000 	ldr.w	r3, [ip]
 8011682:	b299      	uxth	r1, r3
 8011684:	fb02 6101 	mla	r1, r2, r1, r6
 8011688:	0c1e      	lsrs	r6, r3, #16
 801168a:	0c0b      	lsrs	r3, r1, #16
 801168c:	fb02 3306 	mla	r3, r2, r6, r3
 8011690:	b289      	uxth	r1, r1
 8011692:	3001      	adds	r0, #1
 8011694:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011698:	4285      	cmp	r5, r0
 801169a:	f84c 1b04 	str.w	r1, [ip], #4
 801169e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80116a2:	dcec      	bgt.n	801167e <__multadd+0x12>
 80116a4:	b30e      	cbz	r6, 80116ea <__multadd+0x7e>
 80116a6:	68a3      	ldr	r3, [r4, #8]
 80116a8:	42ab      	cmp	r3, r5
 80116aa:	dc19      	bgt.n	80116e0 <__multadd+0x74>
 80116ac:	6861      	ldr	r1, [r4, #4]
 80116ae:	4638      	mov	r0, r7
 80116b0:	3101      	adds	r1, #1
 80116b2:	f7ff ff79 	bl	80115a8 <_Balloc>
 80116b6:	4680      	mov	r8, r0
 80116b8:	b928      	cbnz	r0, 80116c6 <__multadd+0x5a>
 80116ba:	4602      	mov	r2, r0
 80116bc:	4b0c      	ldr	r3, [pc, #48]	; (80116f0 <__multadd+0x84>)
 80116be:	480d      	ldr	r0, [pc, #52]	; (80116f4 <__multadd+0x88>)
 80116c0:	21b5      	movs	r1, #181	; 0xb5
 80116c2:	f000 fd57 	bl	8012174 <__assert_func>
 80116c6:	6922      	ldr	r2, [r4, #16]
 80116c8:	3202      	adds	r2, #2
 80116ca:	f104 010c 	add.w	r1, r4, #12
 80116ce:	0092      	lsls	r2, r2, #2
 80116d0:	300c      	adds	r0, #12
 80116d2:	f7ff ff5b 	bl	801158c <memcpy>
 80116d6:	4621      	mov	r1, r4
 80116d8:	4638      	mov	r0, r7
 80116da:	f7ff ffa5 	bl	8011628 <_Bfree>
 80116de:	4644      	mov	r4, r8
 80116e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80116e4:	3501      	adds	r5, #1
 80116e6:	615e      	str	r6, [r3, #20]
 80116e8:	6125      	str	r5, [r4, #16]
 80116ea:	4620      	mov	r0, r4
 80116ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f0:	0801406f 	.word	0x0801406f
 80116f4:	08014080 	.word	0x08014080

080116f8 <__hi0bits>:
 80116f8:	0c03      	lsrs	r3, r0, #16
 80116fa:	041b      	lsls	r3, r3, #16
 80116fc:	b9d3      	cbnz	r3, 8011734 <__hi0bits+0x3c>
 80116fe:	0400      	lsls	r0, r0, #16
 8011700:	2310      	movs	r3, #16
 8011702:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011706:	bf04      	itt	eq
 8011708:	0200      	lsleq	r0, r0, #8
 801170a:	3308      	addeq	r3, #8
 801170c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011710:	bf04      	itt	eq
 8011712:	0100      	lsleq	r0, r0, #4
 8011714:	3304      	addeq	r3, #4
 8011716:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801171a:	bf04      	itt	eq
 801171c:	0080      	lsleq	r0, r0, #2
 801171e:	3302      	addeq	r3, #2
 8011720:	2800      	cmp	r0, #0
 8011722:	db05      	blt.n	8011730 <__hi0bits+0x38>
 8011724:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011728:	f103 0301 	add.w	r3, r3, #1
 801172c:	bf08      	it	eq
 801172e:	2320      	moveq	r3, #32
 8011730:	4618      	mov	r0, r3
 8011732:	4770      	bx	lr
 8011734:	2300      	movs	r3, #0
 8011736:	e7e4      	b.n	8011702 <__hi0bits+0xa>

08011738 <__lo0bits>:
 8011738:	6803      	ldr	r3, [r0, #0]
 801173a:	f013 0207 	ands.w	r2, r3, #7
 801173e:	4601      	mov	r1, r0
 8011740:	d00b      	beq.n	801175a <__lo0bits+0x22>
 8011742:	07da      	lsls	r2, r3, #31
 8011744:	d423      	bmi.n	801178e <__lo0bits+0x56>
 8011746:	0798      	lsls	r0, r3, #30
 8011748:	bf49      	itett	mi
 801174a:	085b      	lsrmi	r3, r3, #1
 801174c:	089b      	lsrpl	r3, r3, #2
 801174e:	2001      	movmi	r0, #1
 8011750:	600b      	strmi	r3, [r1, #0]
 8011752:	bf5c      	itt	pl
 8011754:	600b      	strpl	r3, [r1, #0]
 8011756:	2002      	movpl	r0, #2
 8011758:	4770      	bx	lr
 801175a:	b298      	uxth	r0, r3
 801175c:	b9a8      	cbnz	r0, 801178a <__lo0bits+0x52>
 801175e:	0c1b      	lsrs	r3, r3, #16
 8011760:	2010      	movs	r0, #16
 8011762:	b2da      	uxtb	r2, r3
 8011764:	b90a      	cbnz	r2, 801176a <__lo0bits+0x32>
 8011766:	3008      	adds	r0, #8
 8011768:	0a1b      	lsrs	r3, r3, #8
 801176a:	071a      	lsls	r2, r3, #28
 801176c:	bf04      	itt	eq
 801176e:	091b      	lsreq	r3, r3, #4
 8011770:	3004      	addeq	r0, #4
 8011772:	079a      	lsls	r2, r3, #30
 8011774:	bf04      	itt	eq
 8011776:	089b      	lsreq	r3, r3, #2
 8011778:	3002      	addeq	r0, #2
 801177a:	07da      	lsls	r2, r3, #31
 801177c:	d403      	bmi.n	8011786 <__lo0bits+0x4e>
 801177e:	085b      	lsrs	r3, r3, #1
 8011780:	f100 0001 	add.w	r0, r0, #1
 8011784:	d005      	beq.n	8011792 <__lo0bits+0x5a>
 8011786:	600b      	str	r3, [r1, #0]
 8011788:	4770      	bx	lr
 801178a:	4610      	mov	r0, r2
 801178c:	e7e9      	b.n	8011762 <__lo0bits+0x2a>
 801178e:	2000      	movs	r0, #0
 8011790:	4770      	bx	lr
 8011792:	2020      	movs	r0, #32
 8011794:	4770      	bx	lr
	...

08011798 <__i2b>:
 8011798:	b510      	push	{r4, lr}
 801179a:	460c      	mov	r4, r1
 801179c:	2101      	movs	r1, #1
 801179e:	f7ff ff03 	bl	80115a8 <_Balloc>
 80117a2:	4602      	mov	r2, r0
 80117a4:	b928      	cbnz	r0, 80117b2 <__i2b+0x1a>
 80117a6:	4b05      	ldr	r3, [pc, #20]	; (80117bc <__i2b+0x24>)
 80117a8:	4805      	ldr	r0, [pc, #20]	; (80117c0 <__i2b+0x28>)
 80117aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80117ae:	f000 fce1 	bl	8012174 <__assert_func>
 80117b2:	2301      	movs	r3, #1
 80117b4:	6144      	str	r4, [r0, #20]
 80117b6:	6103      	str	r3, [r0, #16]
 80117b8:	bd10      	pop	{r4, pc}
 80117ba:	bf00      	nop
 80117bc:	0801406f 	.word	0x0801406f
 80117c0:	08014080 	.word	0x08014080

080117c4 <__multiply>:
 80117c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c8:	4691      	mov	r9, r2
 80117ca:	690a      	ldr	r2, [r1, #16]
 80117cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	bfb8      	it	lt
 80117d4:	460b      	movlt	r3, r1
 80117d6:	460c      	mov	r4, r1
 80117d8:	bfbc      	itt	lt
 80117da:	464c      	movlt	r4, r9
 80117dc:	4699      	movlt	r9, r3
 80117de:	6927      	ldr	r7, [r4, #16]
 80117e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80117e4:	68a3      	ldr	r3, [r4, #8]
 80117e6:	6861      	ldr	r1, [r4, #4]
 80117e8:	eb07 060a 	add.w	r6, r7, sl
 80117ec:	42b3      	cmp	r3, r6
 80117ee:	b085      	sub	sp, #20
 80117f0:	bfb8      	it	lt
 80117f2:	3101      	addlt	r1, #1
 80117f4:	f7ff fed8 	bl	80115a8 <_Balloc>
 80117f8:	b930      	cbnz	r0, 8011808 <__multiply+0x44>
 80117fa:	4602      	mov	r2, r0
 80117fc:	4b44      	ldr	r3, [pc, #272]	; (8011910 <__multiply+0x14c>)
 80117fe:	4845      	ldr	r0, [pc, #276]	; (8011914 <__multiply+0x150>)
 8011800:	f240 115d 	movw	r1, #349	; 0x15d
 8011804:	f000 fcb6 	bl	8012174 <__assert_func>
 8011808:	f100 0514 	add.w	r5, r0, #20
 801180c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011810:	462b      	mov	r3, r5
 8011812:	2200      	movs	r2, #0
 8011814:	4543      	cmp	r3, r8
 8011816:	d321      	bcc.n	801185c <__multiply+0x98>
 8011818:	f104 0314 	add.w	r3, r4, #20
 801181c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011820:	f109 0314 	add.w	r3, r9, #20
 8011824:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011828:	9202      	str	r2, [sp, #8]
 801182a:	1b3a      	subs	r2, r7, r4
 801182c:	3a15      	subs	r2, #21
 801182e:	f022 0203 	bic.w	r2, r2, #3
 8011832:	3204      	adds	r2, #4
 8011834:	f104 0115 	add.w	r1, r4, #21
 8011838:	428f      	cmp	r7, r1
 801183a:	bf38      	it	cc
 801183c:	2204      	movcc	r2, #4
 801183e:	9201      	str	r2, [sp, #4]
 8011840:	9a02      	ldr	r2, [sp, #8]
 8011842:	9303      	str	r3, [sp, #12]
 8011844:	429a      	cmp	r2, r3
 8011846:	d80c      	bhi.n	8011862 <__multiply+0x9e>
 8011848:	2e00      	cmp	r6, #0
 801184a:	dd03      	ble.n	8011854 <__multiply+0x90>
 801184c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011850:	2b00      	cmp	r3, #0
 8011852:	d05a      	beq.n	801190a <__multiply+0x146>
 8011854:	6106      	str	r6, [r0, #16]
 8011856:	b005      	add	sp, #20
 8011858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801185c:	f843 2b04 	str.w	r2, [r3], #4
 8011860:	e7d8      	b.n	8011814 <__multiply+0x50>
 8011862:	f8b3 a000 	ldrh.w	sl, [r3]
 8011866:	f1ba 0f00 	cmp.w	sl, #0
 801186a:	d024      	beq.n	80118b6 <__multiply+0xf2>
 801186c:	f104 0e14 	add.w	lr, r4, #20
 8011870:	46a9      	mov	r9, r5
 8011872:	f04f 0c00 	mov.w	ip, #0
 8011876:	f85e 2b04 	ldr.w	r2, [lr], #4
 801187a:	f8d9 1000 	ldr.w	r1, [r9]
 801187e:	fa1f fb82 	uxth.w	fp, r2
 8011882:	b289      	uxth	r1, r1
 8011884:	fb0a 110b 	mla	r1, sl, fp, r1
 8011888:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801188c:	f8d9 2000 	ldr.w	r2, [r9]
 8011890:	4461      	add	r1, ip
 8011892:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011896:	fb0a c20b 	mla	r2, sl, fp, ip
 801189a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801189e:	b289      	uxth	r1, r1
 80118a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80118a4:	4577      	cmp	r7, lr
 80118a6:	f849 1b04 	str.w	r1, [r9], #4
 80118aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80118ae:	d8e2      	bhi.n	8011876 <__multiply+0xb2>
 80118b0:	9a01      	ldr	r2, [sp, #4]
 80118b2:	f845 c002 	str.w	ip, [r5, r2]
 80118b6:	9a03      	ldr	r2, [sp, #12]
 80118b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80118bc:	3304      	adds	r3, #4
 80118be:	f1b9 0f00 	cmp.w	r9, #0
 80118c2:	d020      	beq.n	8011906 <__multiply+0x142>
 80118c4:	6829      	ldr	r1, [r5, #0]
 80118c6:	f104 0c14 	add.w	ip, r4, #20
 80118ca:	46ae      	mov	lr, r5
 80118cc:	f04f 0a00 	mov.w	sl, #0
 80118d0:	f8bc b000 	ldrh.w	fp, [ip]
 80118d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80118d8:	fb09 220b 	mla	r2, r9, fp, r2
 80118dc:	4492      	add	sl, r2
 80118de:	b289      	uxth	r1, r1
 80118e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80118e4:	f84e 1b04 	str.w	r1, [lr], #4
 80118e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80118ec:	f8be 1000 	ldrh.w	r1, [lr]
 80118f0:	0c12      	lsrs	r2, r2, #16
 80118f2:	fb09 1102 	mla	r1, r9, r2, r1
 80118f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80118fa:	4567      	cmp	r7, ip
 80118fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011900:	d8e6      	bhi.n	80118d0 <__multiply+0x10c>
 8011902:	9a01      	ldr	r2, [sp, #4]
 8011904:	50a9      	str	r1, [r5, r2]
 8011906:	3504      	adds	r5, #4
 8011908:	e79a      	b.n	8011840 <__multiply+0x7c>
 801190a:	3e01      	subs	r6, #1
 801190c:	e79c      	b.n	8011848 <__multiply+0x84>
 801190e:	bf00      	nop
 8011910:	0801406f 	.word	0x0801406f
 8011914:	08014080 	.word	0x08014080

08011918 <__pow5mult>:
 8011918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801191c:	4615      	mov	r5, r2
 801191e:	f012 0203 	ands.w	r2, r2, #3
 8011922:	4606      	mov	r6, r0
 8011924:	460f      	mov	r7, r1
 8011926:	d007      	beq.n	8011938 <__pow5mult+0x20>
 8011928:	4c25      	ldr	r4, [pc, #148]	; (80119c0 <__pow5mult+0xa8>)
 801192a:	3a01      	subs	r2, #1
 801192c:	2300      	movs	r3, #0
 801192e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011932:	f7ff fe9b 	bl	801166c <__multadd>
 8011936:	4607      	mov	r7, r0
 8011938:	10ad      	asrs	r5, r5, #2
 801193a:	d03d      	beq.n	80119b8 <__pow5mult+0xa0>
 801193c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801193e:	b97c      	cbnz	r4, 8011960 <__pow5mult+0x48>
 8011940:	2010      	movs	r0, #16
 8011942:	f7ff fe1b 	bl	801157c <malloc>
 8011946:	4602      	mov	r2, r0
 8011948:	6270      	str	r0, [r6, #36]	; 0x24
 801194a:	b928      	cbnz	r0, 8011958 <__pow5mult+0x40>
 801194c:	4b1d      	ldr	r3, [pc, #116]	; (80119c4 <__pow5mult+0xac>)
 801194e:	481e      	ldr	r0, [pc, #120]	; (80119c8 <__pow5mult+0xb0>)
 8011950:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011954:	f000 fc0e 	bl	8012174 <__assert_func>
 8011958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801195c:	6004      	str	r4, [r0, #0]
 801195e:	60c4      	str	r4, [r0, #12]
 8011960:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011964:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011968:	b94c      	cbnz	r4, 801197e <__pow5mult+0x66>
 801196a:	f240 2171 	movw	r1, #625	; 0x271
 801196e:	4630      	mov	r0, r6
 8011970:	f7ff ff12 	bl	8011798 <__i2b>
 8011974:	2300      	movs	r3, #0
 8011976:	f8c8 0008 	str.w	r0, [r8, #8]
 801197a:	4604      	mov	r4, r0
 801197c:	6003      	str	r3, [r0, #0]
 801197e:	f04f 0900 	mov.w	r9, #0
 8011982:	07eb      	lsls	r3, r5, #31
 8011984:	d50a      	bpl.n	801199c <__pow5mult+0x84>
 8011986:	4639      	mov	r1, r7
 8011988:	4622      	mov	r2, r4
 801198a:	4630      	mov	r0, r6
 801198c:	f7ff ff1a 	bl	80117c4 <__multiply>
 8011990:	4639      	mov	r1, r7
 8011992:	4680      	mov	r8, r0
 8011994:	4630      	mov	r0, r6
 8011996:	f7ff fe47 	bl	8011628 <_Bfree>
 801199a:	4647      	mov	r7, r8
 801199c:	106d      	asrs	r5, r5, #1
 801199e:	d00b      	beq.n	80119b8 <__pow5mult+0xa0>
 80119a0:	6820      	ldr	r0, [r4, #0]
 80119a2:	b938      	cbnz	r0, 80119b4 <__pow5mult+0x9c>
 80119a4:	4622      	mov	r2, r4
 80119a6:	4621      	mov	r1, r4
 80119a8:	4630      	mov	r0, r6
 80119aa:	f7ff ff0b 	bl	80117c4 <__multiply>
 80119ae:	6020      	str	r0, [r4, #0]
 80119b0:	f8c0 9000 	str.w	r9, [r0]
 80119b4:	4604      	mov	r4, r0
 80119b6:	e7e4      	b.n	8011982 <__pow5mult+0x6a>
 80119b8:	4638      	mov	r0, r7
 80119ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119be:	bf00      	nop
 80119c0:	080141d0 	.word	0x080141d0
 80119c4:	08013ffd 	.word	0x08013ffd
 80119c8:	08014080 	.word	0x08014080

080119cc <__lshift>:
 80119cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119d0:	460c      	mov	r4, r1
 80119d2:	6849      	ldr	r1, [r1, #4]
 80119d4:	6923      	ldr	r3, [r4, #16]
 80119d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80119da:	68a3      	ldr	r3, [r4, #8]
 80119dc:	4607      	mov	r7, r0
 80119de:	4691      	mov	r9, r2
 80119e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80119e4:	f108 0601 	add.w	r6, r8, #1
 80119e8:	42b3      	cmp	r3, r6
 80119ea:	db0b      	blt.n	8011a04 <__lshift+0x38>
 80119ec:	4638      	mov	r0, r7
 80119ee:	f7ff fddb 	bl	80115a8 <_Balloc>
 80119f2:	4605      	mov	r5, r0
 80119f4:	b948      	cbnz	r0, 8011a0a <__lshift+0x3e>
 80119f6:	4602      	mov	r2, r0
 80119f8:	4b2a      	ldr	r3, [pc, #168]	; (8011aa4 <__lshift+0xd8>)
 80119fa:	482b      	ldr	r0, [pc, #172]	; (8011aa8 <__lshift+0xdc>)
 80119fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011a00:	f000 fbb8 	bl	8012174 <__assert_func>
 8011a04:	3101      	adds	r1, #1
 8011a06:	005b      	lsls	r3, r3, #1
 8011a08:	e7ee      	b.n	80119e8 <__lshift+0x1c>
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	f100 0114 	add.w	r1, r0, #20
 8011a10:	f100 0210 	add.w	r2, r0, #16
 8011a14:	4618      	mov	r0, r3
 8011a16:	4553      	cmp	r3, sl
 8011a18:	db37      	blt.n	8011a8a <__lshift+0xbe>
 8011a1a:	6920      	ldr	r0, [r4, #16]
 8011a1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a20:	f104 0314 	add.w	r3, r4, #20
 8011a24:	f019 091f 	ands.w	r9, r9, #31
 8011a28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011a30:	d02f      	beq.n	8011a92 <__lshift+0xc6>
 8011a32:	f1c9 0e20 	rsb	lr, r9, #32
 8011a36:	468a      	mov	sl, r1
 8011a38:	f04f 0c00 	mov.w	ip, #0
 8011a3c:	681a      	ldr	r2, [r3, #0]
 8011a3e:	fa02 f209 	lsl.w	r2, r2, r9
 8011a42:	ea42 020c 	orr.w	r2, r2, ip
 8011a46:	f84a 2b04 	str.w	r2, [sl], #4
 8011a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a4e:	4298      	cmp	r0, r3
 8011a50:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011a54:	d8f2      	bhi.n	8011a3c <__lshift+0x70>
 8011a56:	1b03      	subs	r3, r0, r4
 8011a58:	3b15      	subs	r3, #21
 8011a5a:	f023 0303 	bic.w	r3, r3, #3
 8011a5e:	3304      	adds	r3, #4
 8011a60:	f104 0215 	add.w	r2, r4, #21
 8011a64:	4290      	cmp	r0, r2
 8011a66:	bf38      	it	cc
 8011a68:	2304      	movcc	r3, #4
 8011a6a:	f841 c003 	str.w	ip, [r1, r3]
 8011a6e:	f1bc 0f00 	cmp.w	ip, #0
 8011a72:	d001      	beq.n	8011a78 <__lshift+0xac>
 8011a74:	f108 0602 	add.w	r6, r8, #2
 8011a78:	3e01      	subs	r6, #1
 8011a7a:	4638      	mov	r0, r7
 8011a7c:	612e      	str	r6, [r5, #16]
 8011a7e:	4621      	mov	r1, r4
 8011a80:	f7ff fdd2 	bl	8011628 <_Bfree>
 8011a84:	4628      	mov	r0, r5
 8011a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a8e:	3301      	adds	r3, #1
 8011a90:	e7c1      	b.n	8011a16 <__lshift+0x4a>
 8011a92:	3904      	subs	r1, #4
 8011a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a98:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a9c:	4298      	cmp	r0, r3
 8011a9e:	d8f9      	bhi.n	8011a94 <__lshift+0xc8>
 8011aa0:	e7ea      	b.n	8011a78 <__lshift+0xac>
 8011aa2:	bf00      	nop
 8011aa4:	0801406f 	.word	0x0801406f
 8011aa8:	08014080 	.word	0x08014080

08011aac <__mcmp>:
 8011aac:	b530      	push	{r4, r5, lr}
 8011aae:	6902      	ldr	r2, [r0, #16]
 8011ab0:	690c      	ldr	r4, [r1, #16]
 8011ab2:	1b12      	subs	r2, r2, r4
 8011ab4:	d10e      	bne.n	8011ad4 <__mcmp+0x28>
 8011ab6:	f100 0314 	add.w	r3, r0, #20
 8011aba:	3114      	adds	r1, #20
 8011abc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011ac0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011ac4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011ac8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011acc:	42a5      	cmp	r5, r4
 8011ace:	d003      	beq.n	8011ad8 <__mcmp+0x2c>
 8011ad0:	d305      	bcc.n	8011ade <__mcmp+0x32>
 8011ad2:	2201      	movs	r2, #1
 8011ad4:	4610      	mov	r0, r2
 8011ad6:	bd30      	pop	{r4, r5, pc}
 8011ad8:	4283      	cmp	r3, r0
 8011ada:	d3f3      	bcc.n	8011ac4 <__mcmp+0x18>
 8011adc:	e7fa      	b.n	8011ad4 <__mcmp+0x28>
 8011ade:	f04f 32ff 	mov.w	r2, #4294967295
 8011ae2:	e7f7      	b.n	8011ad4 <__mcmp+0x28>

08011ae4 <__mdiff>:
 8011ae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae8:	460c      	mov	r4, r1
 8011aea:	4606      	mov	r6, r0
 8011aec:	4611      	mov	r1, r2
 8011aee:	4620      	mov	r0, r4
 8011af0:	4690      	mov	r8, r2
 8011af2:	f7ff ffdb 	bl	8011aac <__mcmp>
 8011af6:	1e05      	subs	r5, r0, #0
 8011af8:	d110      	bne.n	8011b1c <__mdiff+0x38>
 8011afa:	4629      	mov	r1, r5
 8011afc:	4630      	mov	r0, r6
 8011afe:	f7ff fd53 	bl	80115a8 <_Balloc>
 8011b02:	b930      	cbnz	r0, 8011b12 <__mdiff+0x2e>
 8011b04:	4b3a      	ldr	r3, [pc, #232]	; (8011bf0 <__mdiff+0x10c>)
 8011b06:	4602      	mov	r2, r0
 8011b08:	f240 2132 	movw	r1, #562	; 0x232
 8011b0c:	4839      	ldr	r0, [pc, #228]	; (8011bf4 <__mdiff+0x110>)
 8011b0e:	f000 fb31 	bl	8012174 <__assert_func>
 8011b12:	2301      	movs	r3, #1
 8011b14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011b18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b1c:	bfa4      	itt	ge
 8011b1e:	4643      	movge	r3, r8
 8011b20:	46a0      	movge	r8, r4
 8011b22:	4630      	mov	r0, r6
 8011b24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011b28:	bfa6      	itte	ge
 8011b2a:	461c      	movge	r4, r3
 8011b2c:	2500      	movge	r5, #0
 8011b2e:	2501      	movlt	r5, #1
 8011b30:	f7ff fd3a 	bl	80115a8 <_Balloc>
 8011b34:	b920      	cbnz	r0, 8011b40 <__mdiff+0x5c>
 8011b36:	4b2e      	ldr	r3, [pc, #184]	; (8011bf0 <__mdiff+0x10c>)
 8011b38:	4602      	mov	r2, r0
 8011b3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011b3e:	e7e5      	b.n	8011b0c <__mdiff+0x28>
 8011b40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011b44:	6926      	ldr	r6, [r4, #16]
 8011b46:	60c5      	str	r5, [r0, #12]
 8011b48:	f104 0914 	add.w	r9, r4, #20
 8011b4c:	f108 0514 	add.w	r5, r8, #20
 8011b50:	f100 0e14 	add.w	lr, r0, #20
 8011b54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011b58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011b5c:	f108 0210 	add.w	r2, r8, #16
 8011b60:	46f2      	mov	sl, lr
 8011b62:	2100      	movs	r1, #0
 8011b64:	f859 3b04 	ldr.w	r3, [r9], #4
 8011b68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011b6c:	fa1f f883 	uxth.w	r8, r3
 8011b70:	fa11 f18b 	uxtah	r1, r1, fp
 8011b74:	0c1b      	lsrs	r3, r3, #16
 8011b76:	eba1 0808 	sub.w	r8, r1, r8
 8011b7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011b7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011b82:	fa1f f888 	uxth.w	r8, r8
 8011b86:	1419      	asrs	r1, r3, #16
 8011b88:	454e      	cmp	r6, r9
 8011b8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b8e:	f84a 3b04 	str.w	r3, [sl], #4
 8011b92:	d8e7      	bhi.n	8011b64 <__mdiff+0x80>
 8011b94:	1b33      	subs	r3, r6, r4
 8011b96:	3b15      	subs	r3, #21
 8011b98:	f023 0303 	bic.w	r3, r3, #3
 8011b9c:	3304      	adds	r3, #4
 8011b9e:	3415      	adds	r4, #21
 8011ba0:	42a6      	cmp	r6, r4
 8011ba2:	bf38      	it	cc
 8011ba4:	2304      	movcc	r3, #4
 8011ba6:	441d      	add	r5, r3
 8011ba8:	4473      	add	r3, lr
 8011baa:	469e      	mov	lr, r3
 8011bac:	462e      	mov	r6, r5
 8011bae:	4566      	cmp	r6, ip
 8011bb0:	d30e      	bcc.n	8011bd0 <__mdiff+0xec>
 8011bb2:	f10c 0203 	add.w	r2, ip, #3
 8011bb6:	1b52      	subs	r2, r2, r5
 8011bb8:	f022 0203 	bic.w	r2, r2, #3
 8011bbc:	3d03      	subs	r5, #3
 8011bbe:	45ac      	cmp	ip, r5
 8011bc0:	bf38      	it	cc
 8011bc2:	2200      	movcc	r2, #0
 8011bc4:	441a      	add	r2, r3
 8011bc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011bca:	b17b      	cbz	r3, 8011bec <__mdiff+0x108>
 8011bcc:	6107      	str	r7, [r0, #16]
 8011bce:	e7a3      	b.n	8011b18 <__mdiff+0x34>
 8011bd0:	f856 8b04 	ldr.w	r8, [r6], #4
 8011bd4:	fa11 f288 	uxtah	r2, r1, r8
 8011bd8:	1414      	asrs	r4, r2, #16
 8011bda:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011bde:	b292      	uxth	r2, r2
 8011be0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011be4:	f84e 2b04 	str.w	r2, [lr], #4
 8011be8:	1421      	asrs	r1, r4, #16
 8011bea:	e7e0      	b.n	8011bae <__mdiff+0xca>
 8011bec:	3f01      	subs	r7, #1
 8011bee:	e7ea      	b.n	8011bc6 <__mdiff+0xe2>
 8011bf0:	0801406f 	.word	0x0801406f
 8011bf4:	08014080 	.word	0x08014080

08011bf8 <__d2b>:
 8011bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011bfc:	4689      	mov	r9, r1
 8011bfe:	2101      	movs	r1, #1
 8011c00:	ec57 6b10 	vmov	r6, r7, d0
 8011c04:	4690      	mov	r8, r2
 8011c06:	f7ff fccf 	bl	80115a8 <_Balloc>
 8011c0a:	4604      	mov	r4, r0
 8011c0c:	b930      	cbnz	r0, 8011c1c <__d2b+0x24>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	4b25      	ldr	r3, [pc, #148]	; (8011ca8 <__d2b+0xb0>)
 8011c12:	4826      	ldr	r0, [pc, #152]	; (8011cac <__d2b+0xb4>)
 8011c14:	f240 310a 	movw	r1, #778	; 0x30a
 8011c18:	f000 faac 	bl	8012174 <__assert_func>
 8011c1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011c20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011c24:	bb35      	cbnz	r5, 8011c74 <__d2b+0x7c>
 8011c26:	2e00      	cmp	r6, #0
 8011c28:	9301      	str	r3, [sp, #4]
 8011c2a:	d028      	beq.n	8011c7e <__d2b+0x86>
 8011c2c:	4668      	mov	r0, sp
 8011c2e:	9600      	str	r6, [sp, #0]
 8011c30:	f7ff fd82 	bl	8011738 <__lo0bits>
 8011c34:	9900      	ldr	r1, [sp, #0]
 8011c36:	b300      	cbz	r0, 8011c7a <__d2b+0x82>
 8011c38:	9a01      	ldr	r2, [sp, #4]
 8011c3a:	f1c0 0320 	rsb	r3, r0, #32
 8011c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8011c42:	430b      	orrs	r3, r1
 8011c44:	40c2      	lsrs	r2, r0
 8011c46:	6163      	str	r3, [r4, #20]
 8011c48:	9201      	str	r2, [sp, #4]
 8011c4a:	9b01      	ldr	r3, [sp, #4]
 8011c4c:	61a3      	str	r3, [r4, #24]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	bf14      	ite	ne
 8011c52:	2202      	movne	r2, #2
 8011c54:	2201      	moveq	r2, #1
 8011c56:	6122      	str	r2, [r4, #16]
 8011c58:	b1d5      	cbz	r5, 8011c90 <__d2b+0x98>
 8011c5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011c5e:	4405      	add	r5, r0
 8011c60:	f8c9 5000 	str.w	r5, [r9]
 8011c64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011c68:	f8c8 0000 	str.w	r0, [r8]
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	b003      	add	sp, #12
 8011c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c78:	e7d5      	b.n	8011c26 <__d2b+0x2e>
 8011c7a:	6161      	str	r1, [r4, #20]
 8011c7c:	e7e5      	b.n	8011c4a <__d2b+0x52>
 8011c7e:	a801      	add	r0, sp, #4
 8011c80:	f7ff fd5a 	bl	8011738 <__lo0bits>
 8011c84:	9b01      	ldr	r3, [sp, #4]
 8011c86:	6163      	str	r3, [r4, #20]
 8011c88:	2201      	movs	r2, #1
 8011c8a:	6122      	str	r2, [r4, #16]
 8011c8c:	3020      	adds	r0, #32
 8011c8e:	e7e3      	b.n	8011c58 <__d2b+0x60>
 8011c90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011c94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011c98:	f8c9 0000 	str.w	r0, [r9]
 8011c9c:	6918      	ldr	r0, [r3, #16]
 8011c9e:	f7ff fd2b 	bl	80116f8 <__hi0bits>
 8011ca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ca6:	e7df      	b.n	8011c68 <__d2b+0x70>
 8011ca8:	0801406f 	.word	0x0801406f
 8011cac:	08014080 	.word	0x08014080

08011cb0 <_calloc_r>:
 8011cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cb2:	fba1 2402 	umull	r2, r4, r1, r2
 8011cb6:	b94c      	cbnz	r4, 8011ccc <_calloc_r+0x1c>
 8011cb8:	4611      	mov	r1, r2
 8011cba:	9201      	str	r2, [sp, #4]
 8011cbc:	f000 f87a 	bl	8011db4 <_malloc_r>
 8011cc0:	9a01      	ldr	r2, [sp, #4]
 8011cc2:	4605      	mov	r5, r0
 8011cc4:	b930      	cbnz	r0, 8011cd4 <_calloc_r+0x24>
 8011cc6:	4628      	mov	r0, r5
 8011cc8:	b003      	add	sp, #12
 8011cca:	bd30      	pop	{r4, r5, pc}
 8011ccc:	220c      	movs	r2, #12
 8011cce:	6002      	str	r2, [r0, #0]
 8011cd0:	2500      	movs	r5, #0
 8011cd2:	e7f8      	b.n	8011cc6 <_calloc_r+0x16>
 8011cd4:	4621      	mov	r1, r4
 8011cd6:	f7fe f941 	bl	800ff5c <memset>
 8011cda:	e7f4      	b.n	8011cc6 <_calloc_r+0x16>

08011cdc <_free_r>:
 8011cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cde:	2900      	cmp	r1, #0
 8011ce0:	d044      	beq.n	8011d6c <_free_r+0x90>
 8011ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ce6:	9001      	str	r0, [sp, #4]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	f1a1 0404 	sub.w	r4, r1, #4
 8011cee:	bfb8      	it	lt
 8011cf0:	18e4      	addlt	r4, r4, r3
 8011cf2:	f000 fa9b 	bl	801222c <__malloc_lock>
 8011cf6:	4a1e      	ldr	r2, [pc, #120]	; (8011d70 <_free_r+0x94>)
 8011cf8:	9801      	ldr	r0, [sp, #4]
 8011cfa:	6813      	ldr	r3, [r2, #0]
 8011cfc:	b933      	cbnz	r3, 8011d0c <_free_r+0x30>
 8011cfe:	6063      	str	r3, [r4, #4]
 8011d00:	6014      	str	r4, [r2, #0]
 8011d02:	b003      	add	sp, #12
 8011d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d08:	f000 ba96 	b.w	8012238 <__malloc_unlock>
 8011d0c:	42a3      	cmp	r3, r4
 8011d0e:	d908      	bls.n	8011d22 <_free_r+0x46>
 8011d10:	6825      	ldr	r5, [r4, #0]
 8011d12:	1961      	adds	r1, r4, r5
 8011d14:	428b      	cmp	r3, r1
 8011d16:	bf01      	itttt	eq
 8011d18:	6819      	ldreq	r1, [r3, #0]
 8011d1a:	685b      	ldreq	r3, [r3, #4]
 8011d1c:	1949      	addeq	r1, r1, r5
 8011d1e:	6021      	streq	r1, [r4, #0]
 8011d20:	e7ed      	b.n	8011cfe <_free_r+0x22>
 8011d22:	461a      	mov	r2, r3
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	b10b      	cbz	r3, 8011d2c <_free_r+0x50>
 8011d28:	42a3      	cmp	r3, r4
 8011d2a:	d9fa      	bls.n	8011d22 <_free_r+0x46>
 8011d2c:	6811      	ldr	r1, [r2, #0]
 8011d2e:	1855      	adds	r5, r2, r1
 8011d30:	42a5      	cmp	r5, r4
 8011d32:	d10b      	bne.n	8011d4c <_free_r+0x70>
 8011d34:	6824      	ldr	r4, [r4, #0]
 8011d36:	4421      	add	r1, r4
 8011d38:	1854      	adds	r4, r2, r1
 8011d3a:	42a3      	cmp	r3, r4
 8011d3c:	6011      	str	r1, [r2, #0]
 8011d3e:	d1e0      	bne.n	8011d02 <_free_r+0x26>
 8011d40:	681c      	ldr	r4, [r3, #0]
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	6053      	str	r3, [r2, #4]
 8011d46:	4421      	add	r1, r4
 8011d48:	6011      	str	r1, [r2, #0]
 8011d4a:	e7da      	b.n	8011d02 <_free_r+0x26>
 8011d4c:	d902      	bls.n	8011d54 <_free_r+0x78>
 8011d4e:	230c      	movs	r3, #12
 8011d50:	6003      	str	r3, [r0, #0]
 8011d52:	e7d6      	b.n	8011d02 <_free_r+0x26>
 8011d54:	6825      	ldr	r5, [r4, #0]
 8011d56:	1961      	adds	r1, r4, r5
 8011d58:	428b      	cmp	r3, r1
 8011d5a:	bf04      	itt	eq
 8011d5c:	6819      	ldreq	r1, [r3, #0]
 8011d5e:	685b      	ldreq	r3, [r3, #4]
 8011d60:	6063      	str	r3, [r4, #4]
 8011d62:	bf04      	itt	eq
 8011d64:	1949      	addeq	r1, r1, r5
 8011d66:	6021      	streq	r1, [r4, #0]
 8011d68:	6054      	str	r4, [r2, #4]
 8011d6a:	e7ca      	b.n	8011d02 <_free_r+0x26>
 8011d6c:	b003      	add	sp, #12
 8011d6e:	bd30      	pop	{r4, r5, pc}
 8011d70:	20002b70 	.word	0x20002b70

08011d74 <sbrk_aligned>:
 8011d74:	b570      	push	{r4, r5, r6, lr}
 8011d76:	4e0e      	ldr	r6, [pc, #56]	; (8011db0 <sbrk_aligned+0x3c>)
 8011d78:	460c      	mov	r4, r1
 8011d7a:	6831      	ldr	r1, [r6, #0]
 8011d7c:	4605      	mov	r5, r0
 8011d7e:	b911      	cbnz	r1, 8011d86 <sbrk_aligned+0x12>
 8011d80:	f000 f9e8 	bl	8012154 <_sbrk_r>
 8011d84:	6030      	str	r0, [r6, #0]
 8011d86:	4621      	mov	r1, r4
 8011d88:	4628      	mov	r0, r5
 8011d8a:	f000 f9e3 	bl	8012154 <_sbrk_r>
 8011d8e:	1c43      	adds	r3, r0, #1
 8011d90:	d00a      	beq.n	8011da8 <sbrk_aligned+0x34>
 8011d92:	1cc4      	adds	r4, r0, #3
 8011d94:	f024 0403 	bic.w	r4, r4, #3
 8011d98:	42a0      	cmp	r0, r4
 8011d9a:	d007      	beq.n	8011dac <sbrk_aligned+0x38>
 8011d9c:	1a21      	subs	r1, r4, r0
 8011d9e:	4628      	mov	r0, r5
 8011da0:	f000 f9d8 	bl	8012154 <_sbrk_r>
 8011da4:	3001      	adds	r0, #1
 8011da6:	d101      	bne.n	8011dac <sbrk_aligned+0x38>
 8011da8:	f04f 34ff 	mov.w	r4, #4294967295
 8011dac:	4620      	mov	r0, r4
 8011dae:	bd70      	pop	{r4, r5, r6, pc}
 8011db0:	20002b74 	.word	0x20002b74

08011db4 <_malloc_r>:
 8011db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011db8:	1ccd      	adds	r5, r1, #3
 8011dba:	f025 0503 	bic.w	r5, r5, #3
 8011dbe:	3508      	adds	r5, #8
 8011dc0:	2d0c      	cmp	r5, #12
 8011dc2:	bf38      	it	cc
 8011dc4:	250c      	movcc	r5, #12
 8011dc6:	2d00      	cmp	r5, #0
 8011dc8:	4607      	mov	r7, r0
 8011dca:	db01      	blt.n	8011dd0 <_malloc_r+0x1c>
 8011dcc:	42a9      	cmp	r1, r5
 8011dce:	d905      	bls.n	8011ddc <_malloc_r+0x28>
 8011dd0:	230c      	movs	r3, #12
 8011dd2:	603b      	str	r3, [r7, #0]
 8011dd4:	2600      	movs	r6, #0
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ddc:	4e2e      	ldr	r6, [pc, #184]	; (8011e98 <_malloc_r+0xe4>)
 8011dde:	f000 fa25 	bl	801222c <__malloc_lock>
 8011de2:	6833      	ldr	r3, [r6, #0]
 8011de4:	461c      	mov	r4, r3
 8011de6:	bb34      	cbnz	r4, 8011e36 <_malloc_r+0x82>
 8011de8:	4629      	mov	r1, r5
 8011dea:	4638      	mov	r0, r7
 8011dec:	f7ff ffc2 	bl	8011d74 <sbrk_aligned>
 8011df0:	1c43      	adds	r3, r0, #1
 8011df2:	4604      	mov	r4, r0
 8011df4:	d14d      	bne.n	8011e92 <_malloc_r+0xde>
 8011df6:	6834      	ldr	r4, [r6, #0]
 8011df8:	4626      	mov	r6, r4
 8011dfa:	2e00      	cmp	r6, #0
 8011dfc:	d140      	bne.n	8011e80 <_malloc_r+0xcc>
 8011dfe:	6823      	ldr	r3, [r4, #0]
 8011e00:	4631      	mov	r1, r6
 8011e02:	4638      	mov	r0, r7
 8011e04:	eb04 0803 	add.w	r8, r4, r3
 8011e08:	f000 f9a4 	bl	8012154 <_sbrk_r>
 8011e0c:	4580      	cmp	r8, r0
 8011e0e:	d13a      	bne.n	8011e86 <_malloc_r+0xd2>
 8011e10:	6821      	ldr	r1, [r4, #0]
 8011e12:	3503      	adds	r5, #3
 8011e14:	1a6d      	subs	r5, r5, r1
 8011e16:	f025 0503 	bic.w	r5, r5, #3
 8011e1a:	3508      	adds	r5, #8
 8011e1c:	2d0c      	cmp	r5, #12
 8011e1e:	bf38      	it	cc
 8011e20:	250c      	movcc	r5, #12
 8011e22:	4629      	mov	r1, r5
 8011e24:	4638      	mov	r0, r7
 8011e26:	f7ff ffa5 	bl	8011d74 <sbrk_aligned>
 8011e2a:	3001      	adds	r0, #1
 8011e2c:	d02b      	beq.n	8011e86 <_malloc_r+0xd2>
 8011e2e:	6823      	ldr	r3, [r4, #0]
 8011e30:	442b      	add	r3, r5
 8011e32:	6023      	str	r3, [r4, #0]
 8011e34:	e00e      	b.n	8011e54 <_malloc_r+0xa0>
 8011e36:	6822      	ldr	r2, [r4, #0]
 8011e38:	1b52      	subs	r2, r2, r5
 8011e3a:	d41e      	bmi.n	8011e7a <_malloc_r+0xc6>
 8011e3c:	2a0b      	cmp	r2, #11
 8011e3e:	d916      	bls.n	8011e6e <_malloc_r+0xba>
 8011e40:	1961      	adds	r1, r4, r5
 8011e42:	42a3      	cmp	r3, r4
 8011e44:	6025      	str	r5, [r4, #0]
 8011e46:	bf18      	it	ne
 8011e48:	6059      	strne	r1, [r3, #4]
 8011e4a:	6863      	ldr	r3, [r4, #4]
 8011e4c:	bf08      	it	eq
 8011e4e:	6031      	streq	r1, [r6, #0]
 8011e50:	5162      	str	r2, [r4, r5]
 8011e52:	604b      	str	r3, [r1, #4]
 8011e54:	4638      	mov	r0, r7
 8011e56:	f104 060b 	add.w	r6, r4, #11
 8011e5a:	f000 f9ed 	bl	8012238 <__malloc_unlock>
 8011e5e:	f026 0607 	bic.w	r6, r6, #7
 8011e62:	1d23      	adds	r3, r4, #4
 8011e64:	1af2      	subs	r2, r6, r3
 8011e66:	d0b6      	beq.n	8011dd6 <_malloc_r+0x22>
 8011e68:	1b9b      	subs	r3, r3, r6
 8011e6a:	50a3      	str	r3, [r4, r2]
 8011e6c:	e7b3      	b.n	8011dd6 <_malloc_r+0x22>
 8011e6e:	6862      	ldr	r2, [r4, #4]
 8011e70:	42a3      	cmp	r3, r4
 8011e72:	bf0c      	ite	eq
 8011e74:	6032      	streq	r2, [r6, #0]
 8011e76:	605a      	strne	r2, [r3, #4]
 8011e78:	e7ec      	b.n	8011e54 <_malloc_r+0xa0>
 8011e7a:	4623      	mov	r3, r4
 8011e7c:	6864      	ldr	r4, [r4, #4]
 8011e7e:	e7b2      	b.n	8011de6 <_malloc_r+0x32>
 8011e80:	4634      	mov	r4, r6
 8011e82:	6876      	ldr	r6, [r6, #4]
 8011e84:	e7b9      	b.n	8011dfa <_malloc_r+0x46>
 8011e86:	230c      	movs	r3, #12
 8011e88:	603b      	str	r3, [r7, #0]
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	f000 f9d4 	bl	8012238 <__malloc_unlock>
 8011e90:	e7a1      	b.n	8011dd6 <_malloc_r+0x22>
 8011e92:	6025      	str	r5, [r4, #0]
 8011e94:	e7de      	b.n	8011e54 <_malloc_r+0xa0>
 8011e96:	bf00      	nop
 8011e98:	20002b70 	.word	0x20002b70

08011e9c <__ssputs_r>:
 8011e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ea0:	688e      	ldr	r6, [r1, #8]
 8011ea2:	429e      	cmp	r6, r3
 8011ea4:	4682      	mov	sl, r0
 8011ea6:	460c      	mov	r4, r1
 8011ea8:	4690      	mov	r8, r2
 8011eaa:	461f      	mov	r7, r3
 8011eac:	d838      	bhi.n	8011f20 <__ssputs_r+0x84>
 8011eae:	898a      	ldrh	r2, [r1, #12]
 8011eb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011eb4:	d032      	beq.n	8011f1c <__ssputs_r+0x80>
 8011eb6:	6825      	ldr	r5, [r4, #0]
 8011eb8:	6909      	ldr	r1, [r1, #16]
 8011eba:	eba5 0901 	sub.w	r9, r5, r1
 8011ebe:	6965      	ldr	r5, [r4, #20]
 8011ec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ec8:	3301      	adds	r3, #1
 8011eca:	444b      	add	r3, r9
 8011ecc:	106d      	asrs	r5, r5, #1
 8011ece:	429d      	cmp	r5, r3
 8011ed0:	bf38      	it	cc
 8011ed2:	461d      	movcc	r5, r3
 8011ed4:	0553      	lsls	r3, r2, #21
 8011ed6:	d531      	bpl.n	8011f3c <__ssputs_r+0xa0>
 8011ed8:	4629      	mov	r1, r5
 8011eda:	f7ff ff6b 	bl	8011db4 <_malloc_r>
 8011ede:	4606      	mov	r6, r0
 8011ee0:	b950      	cbnz	r0, 8011ef8 <__ssputs_r+0x5c>
 8011ee2:	230c      	movs	r3, #12
 8011ee4:	f8ca 3000 	str.w	r3, [sl]
 8011ee8:	89a3      	ldrh	r3, [r4, #12]
 8011eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eee:	81a3      	strh	r3, [r4, #12]
 8011ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ef8:	6921      	ldr	r1, [r4, #16]
 8011efa:	464a      	mov	r2, r9
 8011efc:	f7ff fb46 	bl	801158c <memcpy>
 8011f00:	89a3      	ldrh	r3, [r4, #12]
 8011f02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f0a:	81a3      	strh	r3, [r4, #12]
 8011f0c:	6126      	str	r6, [r4, #16]
 8011f0e:	6165      	str	r5, [r4, #20]
 8011f10:	444e      	add	r6, r9
 8011f12:	eba5 0509 	sub.w	r5, r5, r9
 8011f16:	6026      	str	r6, [r4, #0]
 8011f18:	60a5      	str	r5, [r4, #8]
 8011f1a:	463e      	mov	r6, r7
 8011f1c:	42be      	cmp	r6, r7
 8011f1e:	d900      	bls.n	8011f22 <__ssputs_r+0x86>
 8011f20:	463e      	mov	r6, r7
 8011f22:	6820      	ldr	r0, [r4, #0]
 8011f24:	4632      	mov	r2, r6
 8011f26:	4641      	mov	r1, r8
 8011f28:	f000 f966 	bl	80121f8 <memmove>
 8011f2c:	68a3      	ldr	r3, [r4, #8]
 8011f2e:	1b9b      	subs	r3, r3, r6
 8011f30:	60a3      	str	r3, [r4, #8]
 8011f32:	6823      	ldr	r3, [r4, #0]
 8011f34:	4433      	add	r3, r6
 8011f36:	6023      	str	r3, [r4, #0]
 8011f38:	2000      	movs	r0, #0
 8011f3a:	e7db      	b.n	8011ef4 <__ssputs_r+0x58>
 8011f3c:	462a      	mov	r2, r5
 8011f3e:	f000 f981 	bl	8012244 <_realloc_r>
 8011f42:	4606      	mov	r6, r0
 8011f44:	2800      	cmp	r0, #0
 8011f46:	d1e1      	bne.n	8011f0c <__ssputs_r+0x70>
 8011f48:	6921      	ldr	r1, [r4, #16]
 8011f4a:	4650      	mov	r0, sl
 8011f4c:	f7ff fec6 	bl	8011cdc <_free_r>
 8011f50:	e7c7      	b.n	8011ee2 <__ssputs_r+0x46>
	...

08011f54 <_svfiprintf_r>:
 8011f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f58:	4698      	mov	r8, r3
 8011f5a:	898b      	ldrh	r3, [r1, #12]
 8011f5c:	061b      	lsls	r3, r3, #24
 8011f5e:	b09d      	sub	sp, #116	; 0x74
 8011f60:	4607      	mov	r7, r0
 8011f62:	460d      	mov	r5, r1
 8011f64:	4614      	mov	r4, r2
 8011f66:	d50e      	bpl.n	8011f86 <_svfiprintf_r+0x32>
 8011f68:	690b      	ldr	r3, [r1, #16]
 8011f6a:	b963      	cbnz	r3, 8011f86 <_svfiprintf_r+0x32>
 8011f6c:	2140      	movs	r1, #64	; 0x40
 8011f6e:	f7ff ff21 	bl	8011db4 <_malloc_r>
 8011f72:	6028      	str	r0, [r5, #0]
 8011f74:	6128      	str	r0, [r5, #16]
 8011f76:	b920      	cbnz	r0, 8011f82 <_svfiprintf_r+0x2e>
 8011f78:	230c      	movs	r3, #12
 8011f7a:	603b      	str	r3, [r7, #0]
 8011f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f80:	e0d1      	b.n	8012126 <_svfiprintf_r+0x1d2>
 8011f82:	2340      	movs	r3, #64	; 0x40
 8011f84:	616b      	str	r3, [r5, #20]
 8011f86:	2300      	movs	r3, #0
 8011f88:	9309      	str	r3, [sp, #36]	; 0x24
 8011f8a:	2320      	movs	r3, #32
 8011f8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f90:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f94:	2330      	movs	r3, #48	; 0x30
 8011f96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012140 <_svfiprintf_r+0x1ec>
 8011f9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f9e:	f04f 0901 	mov.w	r9, #1
 8011fa2:	4623      	mov	r3, r4
 8011fa4:	469a      	mov	sl, r3
 8011fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011faa:	b10a      	cbz	r2, 8011fb0 <_svfiprintf_r+0x5c>
 8011fac:	2a25      	cmp	r2, #37	; 0x25
 8011fae:	d1f9      	bne.n	8011fa4 <_svfiprintf_r+0x50>
 8011fb0:	ebba 0b04 	subs.w	fp, sl, r4
 8011fb4:	d00b      	beq.n	8011fce <_svfiprintf_r+0x7a>
 8011fb6:	465b      	mov	r3, fp
 8011fb8:	4622      	mov	r2, r4
 8011fba:	4629      	mov	r1, r5
 8011fbc:	4638      	mov	r0, r7
 8011fbe:	f7ff ff6d 	bl	8011e9c <__ssputs_r>
 8011fc2:	3001      	adds	r0, #1
 8011fc4:	f000 80aa 	beq.w	801211c <_svfiprintf_r+0x1c8>
 8011fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fca:	445a      	add	r2, fp
 8011fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8011fce:	f89a 3000 	ldrb.w	r3, [sl]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	f000 80a2 	beq.w	801211c <_svfiprintf_r+0x1c8>
 8011fd8:	2300      	movs	r3, #0
 8011fda:	f04f 32ff 	mov.w	r2, #4294967295
 8011fde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fe2:	f10a 0a01 	add.w	sl, sl, #1
 8011fe6:	9304      	str	r3, [sp, #16]
 8011fe8:	9307      	str	r3, [sp, #28]
 8011fea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fee:	931a      	str	r3, [sp, #104]	; 0x68
 8011ff0:	4654      	mov	r4, sl
 8011ff2:	2205      	movs	r2, #5
 8011ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ff8:	4851      	ldr	r0, [pc, #324]	; (8012140 <_svfiprintf_r+0x1ec>)
 8011ffa:	f7ee f8f1 	bl	80001e0 <memchr>
 8011ffe:	9a04      	ldr	r2, [sp, #16]
 8012000:	b9d8      	cbnz	r0, 801203a <_svfiprintf_r+0xe6>
 8012002:	06d0      	lsls	r0, r2, #27
 8012004:	bf44      	itt	mi
 8012006:	2320      	movmi	r3, #32
 8012008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801200c:	0711      	lsls	r1, r2, #28
 801200e:	bf44      	itt	mi
 8012010:	232b      	movmi	r3, #43	; 0x2b
 8012012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012016:	f89a 3000 	ldrb.w	r3, [sl]
 801201a:	2b2a      	cmp	r3, #42	; 0x2a
 801201c:	d015      	beq.n	801204a <_svfiprintf_r+0xf6>
 801201e:	9a07      	ldr	r2, [sp, #28]
 8012020:	4654      	mov	r4, sl
 8012022:	2000      	movs	r0, #0
 8012024:	f04f 0c0a 	mov.w	ip, #10
 8012028:	4621      	mov	r1, r4
 801202a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801202e:	3b30      	subs	r3, #48	; 0x30
 8012030:	2b09      	cmp	r3, #9
 8012032:	d94e      	bls.n	80120d2 <_svfiprintf_r+0x17e>
 8012034:	b1b0      	cbz	r0, 8012064 <_svfiprintf_r+0x110>
 8012036:	9207      	str	r2, [sp, #28]
 8012038:	e014      	b.n	8012064 <_svfiprintf_r+0x110>
 801203a:	eba0 0308 	sub.w	r3, r0, r8
 801203e:	fa09 f303 	lsl.w	r3, r9, r3
 8012042:	4313      	orrs	r3, r2
 8012044:	9304      	str	r3, [sp, #16]
 8012046:	46a2      	mov	sl, r4
 8012048:	e7d2      	b.n	8011ff0 <_svfiprintf_r+0x9c>
 801204a:	9b03      	ldr	r3, [sp, #12]
 801204c:	1d19      	adds	r1, r3, #4
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	9103      	str	r1, [sp, #12]
 8012052:	2b00      	cmp	r3, #0
 8012054:	bfbb      	ittet	lt
 8012056:	425b      	neglt	r3, r3
 8012058:	f042 0202 	orrlt.w	r2, r2, #2
 801205c:	9307      	strge	r3, [sp, #28]
 801205e:	9307      	strlt	r3, [sp, #28]
 8012060:	bfb8      	it	lt
 8012062:	9204      	strlt	r2, [sp, #16]
 8012064:	7823      	ldrb	r3, [r4, #0]
 8012066:	2b2e      	cmp	r3, #46	; 0x2e
 8012068:	d10c      	bne.n	8012084 <_svfiprintf_r+0x130>
 801206a:	7863      	ldrb	r3, [r4, #1]
 801206c:	2b2a      	cmp	r3, #42	; 0x2a
 801206e:	d135      	bne.n	80120dc <_svfiprintf_r+0x188>
 8012070:	9b03      	ldr	r3, [sp, #12]
 8012072:	1d1a      	adds	r2, r3, #4
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	9203      	str	r2, [sp, #12]
 8012078:	2b00      	cmp	r3, #0
 801207a:	bfb8      	it	lt
 801207c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012080:	3402      	adds	r4, #2
 8012082:	9305      	str	r3, [sp, #20]
 8012084:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012150 <_svfiprintf_r+0x1fc>
 8012088:	7821      	ldrb	r1, [r4, #0]
 801208a:	2203      	movs	r2, #3
 801208c:	4650      	mov	r0, sl
 801208e:	f7ee f8a7 	bl	80001e0 <memchr>
 8012092:	b140      	cbz	r0, 80120a6 <_svfiprintf_r+0x152>
 8012094:	2340      	movs	r3, #64	; 0x40
 8012096:	eba0 000a 	sub.w	r0, r0, sl
 801209a:	fa03 f000 	lsl.w	r0, r3, r0
 801209e:	9b04      	ldr	r3, [sp, #16]
 80120a0:	4303      	orrs	r3, r0
 80120a2:	3401      	adds	r4, #1
 80120a4:	9304      	str	r3, [sp, #16]
 80120a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120aa:	4826      	ldr	r0, [pc, #152]	; (8012144 <_svfiprintf_r+0x1f0>)
 80120ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120b0:	2206      	movs	r2, #6
 80120b2:	f7ee f895 	bl	80001e0 <memchr>
 80120b6:	2800      	cmp	r0, #0
 80120b8:	d038      	beq.n	801212c <_svfiprintf_r+0x1d8>
 80120ba:	4b23      	ldr	r3, [pc, #140]	; (8012148 <_svfiprintf_r+0x1f4>)
 80120bc:	bb1b      	cbnz	r3, 8012106 <_svfiprintf_r+0x1b2>
 80120be:	9b03      	ldr	r3, [sp, #12]
 80120c0:	3307      	adds	r3, #7
 80120c2:	f023 0307 	bic.w	r3, r3, #7
 80120c6:	3308      	adds	r3, #8
 80120c8:	9303      	str	r3, [sp, #12]
 80120ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120cc:	4433      	add	r3, r6
 80120ce:	9309      	str	r3, [sp, #36]	; 0x24
 80120d0:	e767      	b.n	8011fa2 <_svfiprintf_r+0x4e>
 80120d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80120d6:	460c      	mov	r4, r1
 80120d8:	2001      	movs	r0, #1
 80120da:	e7a5      	b.n	8012028 <_svfiprintf_r+0xd4>
 80120dc:	2300      	movs	r3, #0
 80120de:	3401      	adds	r4, #1
 80120e0:	9305      	str	r3, [sp, #20]
 80120e2:	4619      	mov	r1, r3
 80120e4:	f04f 0c0a 	mov.w	ip, #10
 80120e8:	4620      	mov	r0, r4
 80120ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120ee:	3a30      	subs	r2, #48	; 0x30
 80120f0:	2a09      	cmp	r2, #9
 80120f2:	d903      	bls.n	80120fc <_svfiprintf_r+0x1a8>
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d0c5      	beq.n	8012084 <_svfiprintf_r+0x130>
 80120f8:	9105      	str	r1, [sp, #20]
 80120fa:	e7c3      	b.n	8012084 <_svfiprintf_r+0x130>
 80120fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8012100:	4604      	mov	r4, r0
 8012102:	2301      	movs	r3, #1
 8012104:	e7f0      	b.n	80120e8 <_svfiprintf_r+0x194>
 8012106:	ab03      	add	r3, sp, #12
 8012108:	9300      	str	r3, [sp, #0]
 801210a:	462a      	mov	r2, r5
 801210c:	4b0f      	ldr	r3, [pc, #60]	; (801214c <_svfiprintf_r+0x1f8>)
 801210e:	a904      	add	r1, sp, #16
 8012110:	4638      	mov	r0, r7
 8012112:	f7fd ffcb 	bl	80100ac <_printf_float>
 8012116:	1c42      	adds	r2, r0, #1
 8012118:	4606      	mov	r6, r0
 801211a:	d1d6      	bne.n	80120ca <_svfiprintf_r+0x176>
 801211c:	89ab      	ldrh	r3, [r5, #12]
 801211e:	065b      	lsls	r3, r3, #25
 8012120:	f53f af2c 	bmi.w	8011f7c <_svfiprintf_r+0x28>
 8012124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012126:	b01d      	add	sp, #116	; 0x74
 8012128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801212c:	ab03      	add	r3, sp, #12
 801212e:	9300      	str	r3, [sp, #0]
 8012130:	462a      	mov	r2, r5
 8012132:	4b06      	ldr	r3, [pc, #24]	; (801214c <_svfiprintf_r+0x1f8>)
 8012134:	a904      	add	r1, sp, #16
 8012136:	4638      	mov	r0, r7
 8012138:	f7fe fa5c 	bl	80105f4 <_printf_i>
 801213c:	e7eb      	b.n	8012116 <_svfiprintf_r+0x1c2>
 801213e:	bf00      	nop
 8012140:	080141dc 	.word	0x080141dc
 8012144:	080141e6 	.word	0x080141e6
 8012148:	080100ad 	.word	0x080100ad
 801214c:	08011e9d 	.word	0x08011e9d
 8012150:	080141e2 	.word	0x080141e2

08012154 <_sbrk_r>:
 8012154:	b538      	push	{r3, r4, r5, lr}
 8012156:	4d06      	ldr	r5, [pc, #24]	; (8012170 <_sbrk_r+0x1c>)
 8012158:	2300      	movs	r3, #0
 801215a:	4604      	mov	r4, r0
 801215c:	4608      	mov	r0, r1
 801215e:	602b      	str	r3, [r5, #0]
 8012160:	f7f2 fefe 	bl	8004f60 <_sbrk>
 8012164:	1c43      	adds	r3, r0, #1
 8012166:	d102      	bne.n	801216e <_sbrk_r+0x1a>
 8012168:	682b      	ldr	r3, [r5, #0]
 801216a:	b103      	cbz	r3, 801216e <_sbrk_r+0x1a>
 801216c:	6023      	str	r3, [r4, #0]
 801216e:	bd38      	pop	{r3, r4, r5, pc}
 8012170:	20002b78 	.word	0x20002b78

08012174 <__assert_func>:
 8012174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012176:	4614      	mov	r4, r2
 8012178:	461a      	mov	r2, r3
 801217a:	4b09      	ldr	r3, [pc, #36]	; (80121a0 <__assert_func+0x2c>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	4605      	mov	r5, r0
 8012180:	68d8      	ldr	r0, [r3, #12]
 8012182:	b14c      	cbz	r4, 8012198 <__assert_func+0x24>
 8012184:	4b07      	ldr	r3, [pc, #28]	; (80121a4 <__assert_func+0x30>)
 8012186:	9100      	str	r1, [sp, #0]
 8012188:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801218c:	4906      	ldr	r1, [pc, #24]	; (80121a8 <__assert_func+0x34>)
 801218e:	462b      	mov	r3, r5
 8012190:	f000 f80e 	bl	80121b0 <fiprintf>
 8012194:	f000 faac 	bl	80126f0 <abort>
 8012198:	4b04      	ldr	r3, [pc, #16]	; (80121ac <__assert_func+0x38>)
 801219a:	461c      	mov	r4, r3
 801219c:	e7f3      	b.n	8012186 <__assert_func+0x12>
 801219e:	bf00      	nop
 80121a0:	20000100 	.word	0x20000100
 80121a4:	080141ed 	.word	0x080141ed
 80121a8:	080141fa 	.word	0x080141fa
 80121ac:	08014228 	.word	0x08014228

080121b0 <fiprintf>:
 80121b0:	b40e      	push	{r1, r2, r3}
 80121b2:	b503      	push	{r0, r1, lr}
 80121b4:	4601      	mov	r1, r0
 80121b6:	ab03      	add	r3, sp, #12
 80121b8:	4805      	ldr	r0, [pc, #20]	; (80121d0 <fiprintf+0x20>)
 80121ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80121be:	6800      	ldr	r0, [r0, #0]
 80121c0:	9301      	str	r3, [sp, #4]
 80121c2:	f000 f897 	bl	80122f4 <_vfiprintf_r>
 80121c6:	b002      	add	sp, #8
 80121c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80121cc:	b003      	add	sp, #12
 80121ce:	4770      	bx	lr
 80121d0:	20000100 	.word	0x20000100

080121d4 <__ascii_mbtowc>:
 80121d4:	b082      	sub	sp, #8
 80121d6:	b901      	cbnz	r1, 80121da <__ascii_mbtowc+0x6>
 80121d8:	a901      	add	r1, sp, #4
 80121da:	b142      	cbz	r2, 80121ee <__ascii_mbtowc+0x1a>
 80121dc:	b14b      	cbz	r3, 80121f2 <__ascii_mbtowc+0x1e>
 80121de:	7813      	ldrb	r3, [r2, #0]
 80121e0:	600b      	str	r3, [r1, #0]
 80121e2:	7812      	ldrb	r2, [r2, #0]
 80121e4:	1e10      	subs	r0, r2, #0
 80121e6:	bf18      	it	ne
 80121e8:	2001      	movne	r0, #1
 80121ea:	b002      	add	sp, #8
 80121ec:	4770      	bx	lr
 80121ee:	4610      	mov	r0, r2
 80121f0:	e7fb      	b.n	80121ea <__ascii_mbtowc+0x16>
 80121f2:	f06f 0001 	mvn.w	r0, #1
 80121f6:	e7f8      	b.n	80121ea <__ascii_mbtowc+0x16>

080121f8 <memmove>:
 80121f8:	4288      	cmp	r0, r1
 80121fa:	b510      	push	{r4, lr}
 80121fc:	eb01 0402 	add.w	r4, r1, r2
 8012200:	d902      	bls.n	8012208 <memmove+0x10>
 8012202:	4284      	cmp	r4, r0
 8012204:	4623      	mov	r3, r4
 8012206:	d807      	bhi.n	8012218 <memmove+0x20>
 8012208:	1e43      	subs	r3, r0, #1
 801220a:	42a1      	cmp	r1, r4
 801220c:	d008      	beq.n	8012220 <memmove+0x28>
 801220e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012212:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012216:	e7f8      	b.n	801220a <memmove+0x12>
 8012218:	4402      	add	r2, r0
 801221a:	4601      	mov	r1, r0
 801221c:	428a      	cmp	r2, r1
 801221e:	d100      	bne.n	8012222 <memmove+0x2a>
 8012220:	bd10      	pop	{r4, pc}
 8012222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801222a:	e7f7      	b.n	801221c <memmove+0x24>

0801222c <__malloc_lock>:
 801222c:	4801      	ldr	r0, [pc, #4]	; (8012234 <__malloc_lock+0x8>)
 801222e:	f000 bc1f 	b.w	8012a70 <__retarget_lock_acquire_recursive>
 8012232:	bf00      	nop
 8012234:	20002b7c 	.word	0x20002b7c

08012238 <__malloc_unlock>:
 8012238:	4801      	ldr	r0, [pc, #4]	; (8012240 <__malloc_unlock+0x8>)
 801223a:	f000 bc1a 	b.w	8012a72 <__retarget_lock_release_recursive>
 801223e:	bf00      	nop
 8012240:	20002b7c 	.word	0x20002b7c

08012244 <_realloc_r>:
 8012244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012248:	4680      	mov	r8, r0
 801224a:	4614      	mov	r4, r2
 801224c:	460e      	mov	r6, r1
 801224e:	b921      	cbnz	r1, 801225a <_realloc_r+0x16>
 8012250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012254:	4611      	mov	r1, r2
 8012256:	f7ff bdad 	b.w	8011db4 <_malloc_r>
 801225a:	b92a      	cbnz	r2, 8012268 <_realloc_r+0x24>
 801225c:	f7ff fd3e 	bl	8011cdc <_free_r>
 8012260:	4625      	mov	r5, r4
 8012262:	4628      	mov	r0, r5
 8012264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012268:	f000 fc6a 	bl	8012b40 <_malloc_usable_size_r>
 801226c:	4284      	cmp	r4, r0
 801226e:	4607      	mov	r7, r0
 8012270:	d802      	bhi.n	8012278 <_realloc_r+0x34>
 8012272:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012276:	d812      	bhi.n	801229e <_realloc_r+0x5a>
 8012278:	4621      	mov	r1, r4
 801227a:	4640      	mov	r0, r8
 801227c:	f7ff fd9a 	bl	8011db4 <_malloc_r>
 8012280:	4605      	mov	r5, r0
 8012282:	2800      	cmp	r0, #0
 8012284:	d0ed      	beq.n	8012262 <_realloc_r+0x1e>
 8012286:	42bc      	cmp	r4, r7
 8012288:	4622      	mov	r2, r4
 801228a:	4631      	mov	r1, r6
 801228c:	bf28      	it	cs
 801228e:	463a      	movcs	r2, r7
 8012290:	f7ff f97c 	bl	801158c <memcpy>
 8012294:	4631      	mov	r1, r6
 8012296:	4640      	mov	r0, r8
 8012298:	f7ff fd20 	bl	8011cdc <_free_r>
 801229c:	e7e1      	b.n	8012262 <_realloc_r+0x1e>
 801229e:	4635      	mov	r5, r6
 80122a0:	e7df      	b.n	8012262 <_realloc_r+0x1e>

080122a2 <__sfputc_r>:
 80122a2:	6893      	ldr	r3, [r2, #8]
 80122a4:	3b01      	subs	r3, #1
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	b410      	push	{r4}
 80122aa:	6093      	str	r3, [r2, #8]
 80122ac:	da08      	bge.n	80122c0 <__sfputc_r+0x1e>
 80122ae:	6994      	ldr	r4, [r2, #24]
 80122b0:	42a3      	cmp	r3, r4
 80122b2:	db01      	blt.n	80122b8 <__sfputc_r+0x16>
 80122b4:	290a      	cmp	r1, #10
 80122b6:	d103      	bne.n	80122c0 <__sfputc_r+0x1e>
 80122b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122bc:	f000 b94a 	b.w	8012554 <__swbuf_r>
 80122c0:	6813      	ldr	r3, [r2, #0]
 80122c2:	1c58      	adds	r0, r3, #1
 80122c4:	6010      	str	r0, [r2, #0]
 80122c6:	7019      	strb	r1, [r3, #0]
 80122c8:	4608      	mov	r0, r1
 80122ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122ce:	4770      	bx	lr

080122d0 <__sfputs_r>:
 80122d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122d2:	4606      	mov	r6, r0
 80122d4:	460f      	mov	r7, r1
 80122d6:	4614      	mov	r4, r2
 80122d8:	18d5      	adds	r5, r2, r3
 80122da:	42ac      	cmp	r4, r5
 80122dc:	d101      	bne.n	80122e2 <__sfputs_r+0x12>
 80122de:	2000      	movs	r0, #0
 80122e0:	e007      	b.n	80122f2 <__sfputs_r+0x22>
 80122e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122e6:	463a      	mov	r2, r7
 80122e8:	4630      	mov	r0, r6
 80122ea:	f7ff ffda 	bl	80122a2 <__sfputc_r>
 80122ee:	1c43      	adds	r3, r0, #1
 80122f0:	d1f3      	bne.n	80122da <__sfputs_r+0xa>
 80122f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080122f4 <_vfiprintf_r>:
 80122f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f8:	460d      	mov	r5, r1
 80122fa:	b09d      	sub	sp, #116	; 0x74
 80122fc:	4614      	mov	r4, r2
 80122fe:	4698      	mov	r8, r3
 8012300:	4606      	mov	r6, r0
 8012302:	b118      	cbz	r0, 801230c <_vfiprintf_r+0x18>
 8012304:	6983      	ldr	r3, [r0, #24]
 8012306:	b90b      	cbnz	r3, 801230c <_vfiprintf_r+0x18>
 8012308:	f000 fb14 	bl	8012934 <__sinit>
 801230c:	4b89      	ldr	r3, [pc, #548]	; (8012534 <_vfiprintf_r+0x240>)
 801230e:	429d      	cmp	r5, r3
 8012310:	d11b      	bne.n	801234a <_vfiprintf_r+0x56>
 8012312:	6875      	ldr	r5, [r6, #4]
 8012314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012316:	07d9      	lsls	r1, r3, #31
 8012318:	d405      	bmi.n	8012326 <_vfiprintf_r+0x32>
 801231a:	89ab      	ldrh	r3, [r5, #12]
 801231c:	059a      	lsls	r2, r3, #22
 801231e:	d402      	bmi.n	8012326 <_vfiprintf_r+0x32>
 8012320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012322:	f000 fba5 	bl	8012a70 <__retarget_lock_acquire_recursive>
 8012326:	89ab      	ldrh	r3, [r5, #12]
 8012328:	071b      	lsls	r3, r3, #28
 801232a:	d501      	bpl.n	8012330 <_vfiprintf_r+0x3c>
 801232c:	692b      	ldr	r3, [r5, #16]
 801232e:	b9eb      	cbnz	r3, 801236c <_vfiprintf_r+0x78>
 8012330:	4629      	mov	r1, r5
 8012332:	4630      	mov	r0, r6
 8012334:	f000 f96e 	bl	8012614 <__swsetup_r>
 8012338:	b1c0      	cbz	r0, 801236c <_vfiprintf_r+0x78>
 801233a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801233c:	07dc      	lsls	r4, r3, #31
 801233e:	d50e      	bpl.n	801235e <_vfiprintf_r+0x6a>
 8012340:	f04f 30ff 	mov.w	r0, #4294967295
 8012344:	b01d      	add	sp, #116	; 0x74
 8012346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801234a:	4b7b      	ldr	r3, [pc, #492]	; (8012538 <_vfiprintf_r+0x244>)
 801234c:	429d      	cmp	r5, r3
 801234e:	d101      	bne.n	8012354 <_vfiprintf_r+0x60>
 8012350:	68b5      	ldr	r5, [r6, #8]
 8012352:	e7df      	b.n	8012314 <_vfiprintf_r+0x20>
 8012354:	4b79      	ldr	r3, [pc, #484]	; (801253c <_vfiprintf_r+0x248>)
 8012356:	429d      	cmp	r5, r3
 8012358:	bf08      	it	eq
 801235a:	68f5      	ldreq	r5, [r6, #12]
 801235c:	e7da      	b.n	8012314 <_vfiprintf_r+0x20>
 801235e:	89ab      	ldrh	r3, [r5, #12]
 8012360:	0598      	lsls	r0, r3, #22
 8012362:	d4ed      	bmi.n	8012340 <_vfiprintf_r+0x4c>
 8012364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012366:	f000 fb84 	bl	8012a72 <__retarget_lock_release_recursive>
 801236a:	e7e9      	b.n	8012340 <_vfiprintf_r+0x4c>
 801236c:	2300      	movs	r3, #0
 801236e:	9309      	str	r3, [sp, #36]	; 0x24
 8012370:	2320      	movs	r3, #32
 8012372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012376:	f8cd 800c 	str.w	r8, [sp, #12]
 801237a:	2330      	movs	r3, #48	; 0x30
 801237c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012540 <_vfiprintf_r+0x24c>
 8012380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012384:	f04f 0901 	mov.w	r9, #1
 8012388:	4623      	mov	r3, r4
 801238a:	469a      	mov	sl, r3
 801238c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012390:	b10a      	cbz	r2, 8012396 <_vfiprintf_r+0xa2>
 8012392:	2a25      	cmp	r2, #37	; 0x25
 8012394:	d1f9      	bne.n	801238a <_vfiprintf_r+0x96>
 8012396:	ebba 0b04 	subs.w	fp, sl, r4
 801239a:	d00b      	beq.n	80123b4 <_vfiprintf_r+0xc0>
 801239c:	465b      	mov	r3, fp
 801239e:	4622      	mov	r2, r4
 80123a0:	4629      	mov	r1, r5
 80123a2:	4630      	mov	r0, r6
 80123a4:	f7ff ff94 	bl	80122d0 <__sfputs_r>
 80123a8:	3001      	adds	r0, #1
 80123aa:	f000 80aa 	beq.w	8012502 <_vfiprintf_r+0x20e>
 80123ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123b0:	445a      	add	r2, fp
 80123b2:	9209      	str	r2, [sp, #36]	; 0x24
 80123b4:	f89a 3000 	ldrb.w	r3, [sl]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	f000 80a2 	beq.w	8012502 <_vfiprintf_r+0x20e>
 80123be:	2300      	movs	r3, #0
 80123c0:	f04f 32ff 	mov.w	r2, #4294967295
 80123c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123c8:	f10a 0a01 	add.w	sl, sl, #1
 80123cc:	9304      	str	r3, [sp, #16]
 80123ce:	9307      	str	r3, [sp, #28]
 80123d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80123d4:	931a      	str	r3, [sp, #104]	; 0x68
 80123d6:	4654      	mov	r4, sl
 80123d8:	2205      	movs	r2, #5
 80123da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123de:	4858      	ldr	r0, [pc, #352]	; (8012540 <_vfiprintf_r+0x24c>)
 80123e0:	f7ed fefe 	bl	80001e0 <memchr>
 80123e4:	9a04      	ldr	r2, [sp, #16]
 80123e6:	b9d8      	cbnz	r0, 8012420 <_vfiprintf_r+0x12c>
 80123e8:	06d1      	lsls	r1, r2, #27
 80123ea:	bf44      	itt	mi
 80123ec:	2320      	movmi	r3, #32
 80123ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123f2:	0713      	lsls	r3, r2, #28
 80123f4:	bf44      	itt	mi
 80123f6:	232b      	movmi	r3, #43	; 0x2b
 80123f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123fc:	f89a 3000 	ldrb.w	r3, [sl]
 8012400:	2b2a      	cmp	r3, #42	; 0x2a
 8012402:	d015      	beq.n	8012430 <_vfiprintf_r+0x13c>
 8012404:	9a07      	ldr	r2, [sp, #28]
 8012406:	4654      	mov	r4, sl
 8012408:	2000      	movs	r0, #0
 801240a:	f04f 0c0a 	mov.w	ip, #10
 801240e:	4621      	mov	r1, r4
 8012410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012414:	3b30      	subs	r3, #48	; 0x30
 8012416:	2b09      	cmp	r3, #9
 8012418:	d94e      	bls.n	80124b8 <_vfiprintf_r+0x1c4>
 801241a:	b1b0      	cbz	r0, 801244a <_vfiprintf_r+0x156>
 801241c:	9207      	str	r2, [sp, #28]
 801241e:	e014      	b.n	801244a <_vfiprintf_r+0x156>
 8012420:	eba0 0308 	sub.w	r3, r0, r8
 8012424:	fa09 f303 	lsl.w	r3, r9, r3
 8012428:	4313      	orrs	r3, r2
 801242a:	9304      	str	r3, [sp, #16]
 801242c:	46a2      	mov	sl, r4
 801242e:	e7d2      	b.n	80123d6 <_vfiprintf_r+0xe2>
 8012430:	9b03      	ldr	r3, [sp, #12]
 8012432:	1d19      	adds	r1, r3, #4
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	9103      	str	r1, [sp, #12]
 8012438:	2b00      	cmp	r3, #0
 801243a:	bfbb      	ittet	lt
 801243c:	425b      	neglt	r3, r3
 801243e:	f042 0202 	orrlt.w	r2, r2, #2
 8012442:	9307      	strge	r3, [sp, #28]
 8012444:	9307      	strlt	r3, [sp, #28]
 8012446:	bfb8      	it	lt
 8012448:	9204      	strlt	r2, [sp, #16]
 801244a:	7823      	ldrb	r3, [r4, #0]
 801244c:	2b2e      	cmp	r3, #46	; 0x2e
 801244e:	d10c      	bne.n	801246a <_vfiprintf_r+0x176>
 8012450:	7863      	ldrb	r3, [r4, #1]
 8012452:	2b2a      	cmp	r3, #42	; 0x2a
 8012454:	d135      	bne.n	80124c2 <_vfiprintf_r+0x1ce>
 8012456:	9b03      	ldr	r3, [sp, #12]
 8012458:	1d1a      	adds	r2, r3, #4
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	9203      	str	r2, [sp, #12]
 801245e:	2b00      	cmp	r3, #0
 8012460:	bfb8      	it	lt
 8012462:	f04f 33ff 	movlt.w	r3, #4294967295
 8012466:	3402      	adds	r4, #2
 8012468:	9305      	str	r3, [sp, #20]
 801246a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012550 <_vfiprintf_r+0x25c>
 801246e:	7821      	ldrb	r1, [r4, #0]
 8012470:	2203      	movs	r2, #3
 8012472:	4650      	mov	r0, sl
 8012474:	f7ed feb4 	bl	80001e0 <memchr>
 8012478:	b140      	cbz	r0, 801248c <_vfiprintf_r+0x198>
 801247a:	2340      	movs	r3, #64	; 0x40
 801247c:	eba0 000a 	sub.w	r0, r0, sl
 8012480:	fa03 f000 	lsl.w	r0, r3, r0
 8012484:	9b04      	ldr	r3, [sp, #16]
 8012486:	4303      	orrs	r3, r0
 8012488:	3401      	adds	r4, #1
 801248a:	9304      	str	r3, [sp, #16]
 801248c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012490:	482c      	ldr	r0, [pc, #176]	; (8012544 <_vfiprintf_r+0x250>)
 8012492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012496:	2206      	movs	r2, #6
 8012498:	f7ed fea2 	bl	80001e0 <memchr>
 801249c:	2800      	cmp	r0, #0
 801249e:	d03f      	beq.n	8012520 <_vfiprintf_r+0x22c>
 80124a0:	4b29      	ldr	r3, [pc, #164]	; (8012548 <_vfiprintf_r+0x254>)
 80124a2:	bb1b      	cbnz	r3, 80124ec <_vfiprintf_r+0x1f8>
 80124a4:	9b03      	ldr	r3, [sp, #12]
 80124a6:	3307      	adds	r3, #7
 80124a8:	f023 0307 	bic.w	r3, r3, #7
 80124ac:	3308      	adds	r3, #8
 80124ae:	9303      	str	r3, [sp, #12]
 80124b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124b2:	443b      	add	r3, r7
 80124b4:	9309      	str	r3, [sp, #36]	; 0x24
 80124b6:	e767      	b.n	8012388 <_vfiprintf_r+0x94>
 80124b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80124bc:	460c      	mov	r4, r1
 80124be:	2001      	movs	r0, #1
 80124c0:	e7a5      	b.n	801240e <_vfiprintf_r+0x11a>
 80124c2:	2300      	movs	r3, #0
 80124c4:	3401      	adds	r4, #1
 80124c6:	9305      	str	r3, [sp, #20]
 80124c8:	4619      	mov	r1, r3
 80124ca:	f04f 0c0a 	mov.w	ip, #10
 80124ce:	4620      	mov	r0, r4
 80124d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124d4:	3a30      	subs	r2, #48	; 0x30
 80124d6:	2a09      	cmp	r2, #9
 80124d8:	d903      	bls.n	80124e2 <_vfiprintf_r+0x1ee>
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d0c5      	beq.n	801246a <_vfiprintf_r+0x176>
 80124de:	9105      	str	r1, [sp, #20]
 80124e0:	e7c3      	b.n	801246a <_vfiprintf_r+0x176>
 80124e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80124e6:	4604      	mov	r4, r0
 80124e8:	2301      	movs	r3, #1
 80124ea:	e7f0      	b.n	80124ce <_vfiprintf_r+0x1da>
 80124ec:	ab03      	add	r3, sp, #12
 80124ee:	9300      	str	r3, [sp, #0]
 80124f0:	462a      	mov	r2, r5
 80124f2:	4b16      	ldr	r3, [pc, #88]	; (801254c <_vfiprintf_r+0x258>)
 80124f4:	a904      	add	r1, sp, #16
 80124f6:	4630      	mov	r0, r6
 80124f8:	f7fd fdd8 	bl	80100ac <_printf_float>
 80124fc:	4607      	mov	r7, r0
 80124fe:	1c78      	adds	r0, r7, #1
 8012500:	d1d6      	bne.n	80124b0 <_vfiprintf_r+0x1bc>
 8012502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012504:	07d9      	lsls	r1, r3, #31
 8012506:	d405      	bmi.n	8012514 <_vfiprintf_r+0x220>
 8012508:	89ab      	ldrh	r3, [r5, #12]
 801250a:	059a      	lsls	r2, r3, #22
 801250c:	d402      	bmi.n	8012514 <_vfiprintf_r+0x220>
 801250e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012510:	f000 faaf 	bl	8012a72 <__retarget_lock_release_recursive>
 8012514:	89ab      	ldrh	r3, [r5, #12]
 8012516:	065b      	lsls	r3, r3, #25
 8012518:	f53f af12 	bmi.w	8012340 <_vfiprintf_r+0x4c>
 801251c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801251e:	e711      	b.n	8012344 <_vfiprintf_r+0x50>
 8012520:	ab03      	add	r3, sp, #12
 8012522:	9300      	str	r3, [sp, #0]
 8012524:	462a      	mov	r2, r5
 8012526:	4b09      	ldr	r3, [pc, #36]	; (801254c <_vfiprintf_r+0x258>)
 8012528:	a904      	add	r1, sp, #16
 801252a:	4630      	mov	r0, r6
 801252c:	f7fe f862 	bl	80105f4 <_printf_i>
 8012530:	e7e4      	b.n	80124fc <_vfiprintf_r+0x208>
 8012532:	bf00      	nop
 8012534:	08014354 	.word	0x08014354
 8012538:	08014374 	.word	0x08014374
 801253c:	08014334 	.word	0x08014334
 8012540:	080141dc 	.word	0x080141dc
 8012544:	080141e6 	.word	0x080141e6
 8012548:	080100ad 	.word	0x080100ad
 801254c:	080122d1 	.word	0x080122d1
 8012550:	080141e2 	.word	0x080141e2

08012554 <__swbuf_r>:
 8012554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012556:	460e      	mov	r6, r1
 8012558:	4614      	mov	r4, r2
 801255a:	4605      	mov	r5, r0
 801255c:	b118      	cbz	r0, 8012566 <__swbuf_r+0x12>
 801255e:	6983      	ldr	r3, [r0, #24]
 8012560:	b90b      	cbnz	r3, 8012566 <__swbuf_r+0x12>
 8012562:	f000 f9e7 	bl	8012934 <__sinit>
 8012566:	4b21      	ldr	r3, [pc, #132]	; (80125ec <__swbuf_r+0x98>)
 8012568:	429c      	cmp	r4, r3
 801256a:	d12b      	bne.n	80125c4 <__swbuf_r+0x70>
 801256c:	686c      	ldr	r4, [r5, #4]
 801256e:	69a3      	ldr	r3, [r4, #24]
 8012570:	60a3      	str	r3, [r4, #8]
 8012572:	89a3      	ldrh	r3, [r4, #12]
 8012574:	071a      	lsls	r2, r3, #28
 8012576:	d52f      	bpl.n	80125d8 <__swbuf_r+0x84>
 8012578:	6923      	ldr	r3, [r4, #16]
 801257a:	b36b      	cbz	r3, 80125d8 <__swbuf_r+0x84>
 801257c:	6923      	ldr	r3, [r4, #16]
 801257e:	6820      	ldr	r0, [r4, #0]
 8012580:	1ac0      	subs	r0, r0, r3
 8012582:	6963      	ldr	r3, [r4, #20]
 8012584:	b2f6      	uxtb	r6, r6
 8012586:	4283      	cmp	r3, r0
 8012588:	4637      	mov	r7, r6
 801258a:	dc04      	bgt.n	8012596 <__swbuf_r+0x42>
 801258c:	4621      	mov	r1, r4
 801258e:	4628      	mov	r0, r5
 8012590:	f000 f93c 	bl	801280c <_fflush_r>
 8012594:	bb30      	cbnz	r0, 80125e4 <__swbuf_r+0x90>
 8012596:	68a3      	ldr	r3, [r4, #8]
 8012598:	3b01      	subs	r3, #1
 801259a:	60a3      	str	r3, [r4, #8]
 801259c:	6823      	ldr	r3, [r4, #0]
 801259e:	1c5a      	adds	r2, r3, #1
 80125a0:	6022      	str	r2, [r4, #0]
 80125a2:	701e      	strb	r6, [r3, #0]
 80125a4:	6963      	ldr	r3, [r4, #20]
 80125a6:	3001      	adds	r0, #1
 80125a8:	4283      	cmp	r3, r0
 80125aa:	d004      	beq.n	80125b6 <__swbuf_r+0x62>
 80125ac:	89a3      	ldrh	r3, [r4, #12]
 80125ae:	07db      	lsls	r3, r3, #31
 80125b0:	d506      	bpl.n	80125c0 <__swbuf_r+0x6c>
 80125b2:	2e0a      	cmp	r6, #10
 80125b4:	d104      	bne.n	80125c0 <__swbuf_r+0x6c>
 80125b6:	4621      	mov	r1, r4
 80125b8:	4628      	mov	r0, r5
 80125ba:	f000 f927 	bl	801280c <_fflush_r>
 80125be:	b988      	cbnz	r0, 80125e4 <__swbuf_r+0x90>
 80125c0:	4638      	mov	r0, r7
 80125c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125c4:	4b0a      	ldr	r3, [pc, #40]	; (80125f0 <__swbuf_r+0x9c>)
 80125c6:	429c      	cmp	r4, r3
 80125c8:	d101      	bne.n	80125ce <__swbuf_r+0x7a>
 80125ca:	68ac      	ldr	r4, [r5, #8]
 80125cc:	e7cf      	b.n	801256e <__swbuf_r+0x1a>
 80125ce:	4b09      	ldr	r3, [pc, #36]	; (80125f4 <__swbuf_r+0xa0>)
 80125d0:	429c      	cmp	r4, r3
 80125d2:	bf08      	it	eq
 80125d4:	68ec      	ldreq	r4, [r5, #12]
 80125d6:	e7ca      	b.n	801256e <__swbuf_r+0x1a>
 80125d8:	4621      	mov	r1, r4
 80125da:	4628      	mov	r0, r5
 80125dc:	f000 f81a 	bl	8012614 <__swsetup_r>
 80125e0:	2800      	cmp	r0, #0
 80125e2:	d0cb      	beq.n	801257c <__swbuf_r+0x28>
 80125e4:	f04f 37ff 	mov.w	r7, #4294967295
 80125e8:	e7ea      	b.n	80125c0 <__swbuf_r+0x6c>
 80125ea:	bf00      	nop
 80125ec:	08014354 	.word	0x08014354
 80125f0:	08014374 	.word	0x08014374
 80125f4:	08014334 	.word	0x08014334

080125f8 <__ascii_wctomb>:
 80125f8:	b149      	cbz	r1, 801260e <__ascii_wctomb+0x16>
 80125fa:	2aff      	cmp	r2, #255	; 0xff
 80125fc:	bf85      	ittet	hi
 80125fe:	238a      	movhi	r3, #138	; 0x8a
 8012600:	6003      	strhi	r3, [r0, #0]
 8012602:	700a      	strbls	r2, [r1, #0]
 8012604:	f04f 30ff 	movhi.w	r0, #4294967295
 8012608:	bf98      	it	ls
 801260a:	2001      	movls	r0, #1
 801260c:	4770      	bx	lr
 801260e:	4608      	mov	r0, r1
 8012610:	4770      	bx	lr
	...

08012614 <__swsetup_r>:
 8012614:	4b32      	ldr	r3, [pc, #200]	; (80126e0 <__swsetup_r+0xcc>)
 8012616:	b570      	push	{r4, r5, r6, lr}
 8012618:	681d      	ldr	r5, [r3, #0]
 801261a:	4606      	mov	r6, r0
 801261c:	460c      	mov	r4, r1
 801261e:	b125      	cbz	r5, 801262a <__swsetup_r+0x16>
 8012620:	69ab      	ldr	r3, [r5, #24]
 8012622:	b913      	cbnz	r3, 801262a <__swsetup_r+0x16>
 8012624:	4628      	mov	r0, r5
 8012626:	f000 f985 	bl	8012934 <__sinit>
 801262a:	4b2e      	ldr	r3, [pc, #184]	; (80126e4 <__swsetup_r+0xd0>)
 801262c:	429c      	cmp	r4, r3
 801262e:	d10f      	bne.n	8012650 <__swsetup_r+0x3c>
 8012630:	686c      	ldr	r4, [r5, #4]
 8012632:	89a3      	ldrh	r3, [r4, #12]
 8012634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012638:	0719      	lsls	r1, r3, #28
 801263a:	d42c      	bmi.n	8012696 <__swsetup_r+0x82>
 801263c:	06dd      	lsls	r5, r3, #27
 801263e:	d411      	bmi.n	8012664 <__swsetup_r+0x50>
 8012640:	2309      	movs	r3, #9
 8012642:	6033      	str	r3, [r6, #0]
 8012644:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012648:	81a3      	strh	r3, [r4, #12]
 801264a:	f04f 30ff 	mov.w	r0, #4294967295
 801264e:	e03e      	b.n	80126ce <__swsetup_r+0xba>
 8012650:	4b25      	ldr	r3, [pc, #148]	; (80126e8 <__swsetup_r+0xd4>)
 8012652:	429c      	cmp	r4, r3
 8012654:	d101      	bne.n	801265a <__swsetup_r+0x46>
 8012656:	68ac      	ldr	r4, [r5, #8]
 8012658:	e7eb      	b.n	8012632 <__swsetup_r+0x1e>
 801265a:	4b24      	ldr	r3, [pc, #144]	; (80126ec <__swsetup_r+0xd8>)
 801265c:	429c      	cmp	r4, r3
 801265e:	bf08      	it	eq
 8012660:	68ec      	ldreq	r4, [r5, #12]
 8012662:	e7e6      	b.n	8012632 <__swsetup_r+0x1e>
 8012664:	0758      	lsls	r0, r3, #29
 8012666:	d512      	bpl.n	801268e <__swsetup_r+0x7a>
 8012668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801266a:	b141      	cbz	r1, 801267e <__swsetup_r+0x6a>
 801266c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012670:	4299      	cmp	r1, r3
 8012672:	d002      	beq.n	801267a <__swsetup_r+0x66>
 8012674:	4630      	mov	r0, r6
 8012676:	f7ff fb31 	bl	8011cdc <_free_r>
 801267a:	2300      	movs	r3, #0
 801267c:	6363      	str	r3, [r4, #52]	; 0x34
 801267e:	89a3      	ldrh	r3, [r4, #12]
 8012680:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012684:	81a3      	strh	r3, [r4, #12]
 8012686:	2300      	movs	r3, #0
 8012688:	6063      	str	r3, [r4, #4]
 801268a:	6923      	ldr	r3, [r4, #16]
 801268c:	6023      	str	r3, [r4, #0]
 801268e:	89a3      	ldrh	r3, [r4, #12]
 8012690:	f043 0308 	orr.w	r3, r3, #8
 8012694:	81a3      	strh	r3, [r4, #12]
 8012696:	6923      	ldr	r3, [r4, #16]
 8012698:	b94b      	cbnz	r3, 80126ae <__swsetup_r+0x9a>
 801269a:	89a3      	ldrh	r3, [r4, #12]
 801269c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80126a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126a4:	d003      	beq.n	80126ae <__swsetup_r+0x9a>
 80126a6:	4621      	mov	r1, r4
 80126a8:	4630      	mov	r0, r6
 80126aa:	f000 fa09 	bl	8012ac0 <__smakebuf_r>
 80126ae:	89a0      	ldrh	r0, [r4, #12]
 80126b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126b4:	f010 0301 	ands.w	r3, r0, #1
 80126b8:	d00a      	beq.n	80126d0 <__swsetup_r+0xbc>
 80126ba:	2300      	movs	r3, #0
 80126bc:	60a3      	str	r3, [r4, #8]
 80126be:	6963      	ldr	r3, [r4, #20]
 80126c0:	425b      	negs	r3, r3
 80126c2:	61a3      	str	r3, [r4, #24]
 80126c4:	6923      	ldr	r3, [r4, #16]
 80126c6:	b943      	cbnz	r3, 80126da <__swsetup_r+0xc6>
 80126c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80126cc:	d1ba      	bne.n	8012644 <__swsetup_r+0x30>
 80126ce:	bd70      	pop	{r4, r5, r6, pc}
 80126d0:	0781      	lsls	r1, r0, #30
 80126d2:	bf58      	it	pl
 80126d4:	6963      	ldrpl	r3, [r4, #20]
 80126d6:	60a3      	str	r3, [r4, #8]
 80126d8:	e7f4      	b.n	80126c4 <__swsetup_r+0xb0>
 80126da:	2000      	movs	r0, #0
 80126dc:	e7f7      	b.n	80126ce <__swsetup_r+0xba>
 80126de:	bf00      	nop
 80126e0:	20000100 	.word	0x20000100
 80126e4:	08014354 	.word	0x08014354
 80126e8:	08014374 	.word	0x08014374
 80126ec:	08014334 	.word	0x08014334

080126f0 <abort>:
 80126f0:	b508      	push	{r3, lr}
 80126f2:	2006      	movs	r0, #6
 80126f4:	f000 fa54 	bl	8012ba0 <raise>
 80126f8:	2001      	movs	r0, #1
 80126fa:	f7f2 fbb9 	bl	8004e70 <_exit>
	...

08012700 <__sflush_r>:
 8012700:	898a      	ldrh	r2, [r1, #12]
 8012702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012706:	4605      	mov	r5, r0
 8012708:	0710      	lsls	r0, r2, #28
 801270a:	460c      	mov	r4, r1
 801270c:	d458      	bmi.n	80127c0 <__sflush_r+0xc0>
 801270e:	684b      	ldr	r3, [r1, #4]
 8012710:	2b00      	cmp	r3, #0
 8012712:	dc05      	bgt.n	8012720 <__sflush_r+0x20>
 8012714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012716:	2b00      	cmp	r3, #0
 8012718:	dc02      	bgt.n	8012720 <__sflush_r+0x20>
 801271a:	2000      	movs	r0, #0
 801271c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012722:	2e00      	cmp	r6, #0
 8012724:	d0f9      	beq.n	801271a <__sflush_r+0x1a>
 8012726:	2300      	movs	r3, #0
 8012728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801272c:	682f      	ldr	r7, [r5, #0]
 801272e:	602b      	str	r3, [r5, #0]
 8012730:	d032      	beq.n	8012798 <__sflush_r+0x98>
 8012732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012734:	89a3      	ldrh	r3, [r4, #12]
 8012736:	075a      	lsls	r2, r3, #29
 8012738:	d505      	bpl.n	8012746 <__sflush_r+0x46>
 801273a:	6863      	ldr	r3, [r4, #4]
 801273c:	1ac0      	subs	r0, r0, r3
 801273e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012740:	b10b      	cbz	r3, 8012746 <__sflush_r+0x46>
 8012742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012744:	1ac0      	subs	r0, r0, r3
 8012746:	2300      	movs	r3, #0
 8012748:	4602      	mov	r2, r0
 801274a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801274c:	6a21      	ldr	r1, [r4, #32]
 801274e:	4628      	mov	r0, r5
 8012750:	47b0      	blx	r6
 8012752:	1c43      	adds	r3, r0, #1
 8012754:	89a3      	ldrh	r3, [r4, #12]
 8012756:	d106      	bne.n	8012766 <__sflush_r+0x66>
 8012758:	6829      	ldr	r1, [r5, #0]
 801275a:	291d      	cmp	r1, #29
 801275c:	d82c      	bhi.n	80127b8 <__sflush_r+0xb8>
 801275e:	4a2a      	ldr	r2, [pc, #168]	; (8012808 <__sflush_r+0x108>)
 8012760:	40ca      	lsrs	r2, r1
 8012762:	07d6      	lsls	r6, r2, #31
 8012764:	d528      	bpl.n	80127b8 <__sflush_r+0xb8>
 8012766:	2200      	movs	r2, #0
 8012768:	6062      	str	r2, [r4, #4]
 801276a:	04d9      	lsls	r1, r3, #19
 801276c:	6922      	ldr	r2, [r4, #16]
 801276e:	6022      	str	r2, [r4, #0]
 8012770:	d504      	bpl.n	801277c <__sflush_r+0x7c>
 8012772:	1c42      	adds	r2, r0, #1
 8012774:	d101      	bne.n	801277a <__sflush_r+0x7a>
 8012776:	682b      	ldr	r3, [r5, #0]
 8012778:	b903      	cbnz	r3, 801277c <__sflush_r+0x7c>
 801277a:	6560      	str	r0, [r4, #84]	; 0x54
 801277c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801277e:	602f      	str	r7, [r5, #0]
 8012780:	2900      	cmp	r1, #0
 8012782:	d0ca      	beq.n	801271a <__sflush_r+0x1a>
 8012784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012788:	4299      	cmp	r1, r3
 801278a:	d002      	beq.n	8012792 <__sflush_r+0x92>
 801278c:	4628      	mov	r0, r5
 801278e:	f7ff faa5 	bl	8011cdc <_free_r>
 8012792:	2000      	movs	r0, #0
 8012794:	6360      	str	r0, [r4, #52]	; 0x34
 8012796:	e7c1      	b.n	801271c <__sflush_r+0x1c>
 8012798:	6a21      	ldr	r1, [r4, #32]
 801279a:	2301      	movs	r3, #1
 801279c:	4628      	mov	r0, r5
 801279e:	47b0      	blx	r6
 80127a0:	1c41      	adds	r1, r0, #1
 80127a2:	d1c7      	bne.n	8012734 <__sflush_r+0x34>
 80127a4:	682b      	ldr	r3, [r5, #0]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d0c4      	beq.n	8012734 <__sflush_r+0x34>
 80127aa:	2b1d      	cmp	r3, #29
 80127ac:	d001      	beq.n	80127b2 <__sflush_r+0xb2>
 80127ae:	2b16      	cmp	r3, #22
 80127b0:	d101      	bne.n	80127b6 <__sflush_r+0xb6>
 80127b2:	602f      	str	r7, [r5, #0]
 80127b4:	e7b1      	b.n	801271a <__sflush_r+0x1a>
 80127b6:	89a3      	ldrh	r3, [r4, #12]
 80127b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127bc:	81a3      	strh	r3, [r4, #12]
 80127be:	e7ad      	b.n	801271c <__sflush_r+0x1c>
 80127c0:	690f      	ldr	r7, [r1, #16]
 80127c2:	2f00      	cmp	r7, #0
 80127c4:	d0a9      	beq.n	801271a <__sflush_r+0x1a>
 80127c6:	0793      	lsls	r3, r2, #30
 80127c8:	680e      	ldr	r6, [r1, #0]
 80127ca:	bf08      	it	eq
 80127cc:	694b      	ldreq	r3, [r1, #20]
 80127ce:	600f      	str	r7, [r1, #0]
 80127d0:	bf18      	it	ne
 80127d2:	2300      	movne	r3, #0
 80127d4:	eba6 0807 	sub.w	r8, r6, r7
 80127d8:	608b      	str	r3, [r1, #8]
 80127da:	f1b8 0f00 	cmp.w	r8, #0
 80127de:	dd9c      	ble.n	801271a <__sflush_r+0x1a>
 80127e0:	6a21      	ldr	r1, [r4, #32]
 80127e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80127e4:	4643      	mov	r3, r8
 80127e6:	463a      	mov	r2, r7
 80127e8:	4628      	mov	r0, r5
 80127ea:	47b0      	blx	r6
 80127ec:	2800      	cmp	r0, #0
 80127ee:	dc06      	bgt.n	80127fe <__sflush_r+0xfe>
 80127f0:	89a3      	ldrh	r3, [r4, #12]
 80127f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127f6:	81a3      	strh	r3, [r4, #12]
 80127f8:	f04f 30ff 	mov.w	r0, #4294967295
 80127fc:	e78e      	b.n	801271c <__sflush_r+0x1c>
 80127fe:	4407      	add	r7, r0
 8012800:	eba8 0800 	sub.w	r8, r8, r0
 8012804:	e7e9      	b.n	80127da <__sflush_r+0xda>
 8012806:	bf00      	nop
 8012808:	20400001 	.word	0x20400001

0801280c <_fflush_r>:
 801280c:	b538      	push	{r3, r4, r5, lr}
 801280e:	690b      	ldr	r3, [r1, #16]
 8012810:	4605      	mov	r5, r0
 8012812:	460c      	mov	r4, r1
 8012814:	b913      	cbnz	r3, 801281c <_fflush_r+0x10>
 8012816:	2500      	movs	r5, #0
 8012818:	4628      	mov	r0, r5
 801281a:	bd38      	pop	{r3, r4, r5, pc}
 801281c:	b118      	cbz	r0, 8012826 <_fflush_r+0x1a>
 801281e:	6983      	ldr	r3, [r0, #24]
 8012820:	b90b      	cbnz	r3, 8012826 <_fflush_r+0x1a>
 8012822:	f000 f887 	bl	8012934 <__sinit>
 8012826:	4b14      	ldr	r3, [pc, #80]	; (8012878 <_fflush_r+0x6c>)
 8012828:	429c      	cmp	r4, r3
 801282a:	d11b      	bne.n	8012864 <_fflush_r+0x58>
 801282c:	686c      	ldr	r4, [r5, #4]
 801282e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d0ef      	beq.n	8012816 <_fflush_r+0xa>
 8012836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012838:	07d0      	lsls	r0, r2, #31
 801283a:	d404      	bmi.n	8012846 <_fflush_r+0x3a>
 801283c:	0599      	lsls	r1, r3, #22
 801283e:	d402      	bmi.n	8012846 <_fflush_r+0x3a>
 8012840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012842:	f000 f915 	bl	8012a70 <__retarget_lock_acquire_recursive>
 8012846:	4628      	mov	r0, r5
 8012848:	4621      	mov	r1, r4
 801284a:	f7ff ff59 	bl	8012700 <__sflush_r>
 801284e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012850:	07da      	lsls	r2, r3, #31
 8012852:	4605      	mov	r5, r0
 8012854:	d4e0      	bmi.n	8012818 <_fflush_r+0xc>
 8012856:	89a3      	ldrh	r3, [r4, #12]
 8012858:	059b      	lsls	r3, r3, #22
 801285a:	d4dd      	bmi.n	8012818 <_fflush_r+0xc>
 801285c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801285e:	f000 f908 	bl	8012a72 <__retarget_lock_release_recursive>
 8012862:	e7d9      	b.n	8012818 <_fflush_r+0xc>
 8012864:	4b05      	ldr	r3, [pc, #20]	; (801287c <_fflush_r+0x70>)
 8012866:	429c      	cmp	r4, r3
 8012868:	d101      	bne.n	801286e <_fflush_r+0x62>
 801286a:	68ac      	ldr	r4, [r5, #8]
 801286c:	e7df      	b.n	801282e <_fflush_r+0x22>
 801286e:	4b04      	ldr	r3, [pc, #16]	; (8012880 <_fflush_r+0x74>)
 8012870:	429c      	cmp	r4, r3
 8012872:	bf08      	it	eq
 8012874:	68ec      	ldreq	r4, [r5, #12]
 8012876:	e7da      	b.n	801282e <_fflush_r+0x22>
 8012878:	08014354 	.word	0x08014354
 801287c:	08014374 	.word	0x08014374
 8012880:	08014334 	.word	0x08014334

08012884 <std>:
 8012884:	2300      	movs	r3, #0
 8012886:	b510      	push	{r4, lr}
 8012888:	4604      	mov	r4, r0
 801288a:	e9c0 3300 	strd	r3, r3, [r0]
 801288e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012892:	6083      	str	r3, [r0, #8]
 8012894:	8181      	strh	r1, [r0, #12]
 8012896:	6643      	str	r3, [r0, #100]	; 0x64
 8012898:	81c2      	strh	r2, [r0, #14]
 801289a:	6183      	str	r3, [r0, #24]
 801289c:	4619      	mov	r1, r3
 801289e:	2208      	movs	r2, #8
 80128a0:	305c      	adds	r0, #92	; 0x5c
 80128a2:	f7fd fb5b 	bl	800ff5c <memset>
 80128a6:	4b05      	ldr	r3, [pc, #20]	; (80128bc <std+0x38>)
 80128a8:	6263      	str	r3, [r4, #36]	; 0x24
 80128aa:	4b05      	ldr	r3, [pc, #20]	; (80128c0 <std+0x3c>)
 80128ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80128ae:	4b05      	ldr	r3, [pc, #20]	; (80128c4 <std+0x40>)
 80128b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80128b2:	4b05      	ldr	r3, [pc, #20]	; (80128c8 <std+0x44>)
 80128b4:	6224      	str	r4, [r4, #32]
 80128b6:	6323      	str	r3, [r4, #48]	; 0x30
 80128b8:	bd10      	pop	{r4, pc}
 80128ba:	bf00      	nop
 80128bc:	08012bd9 	.word	0x08012bd9
 80128c0:	08012bfb 	.word	0x08012bfb
 80128c4:	08012c33 	.word	0x08012c33
 80128c8:	08012c57 	.word	0x08012c57

080128cc <_cleanup_r>:
 80128cc:	4901      	ldr	r1, [pc, #4]	; (80128d4 <_cleanup_r+0x8>)
 80128ce:	f000 b8af 	b.w	8012a30 <_fwalk_reent>
 80128d2:	bf00      	nop
 80128d4:	0801280d 	.word	0x0801280d

080128d8 <__sfmoreglue>:
 80128d8:	b570      	push	{r4, r5, r6, lr}
 80128da:	2268      	movs	r2, #104	; 0x68
 80128dc:	1e4d      	subs	r5, r1, #1
 80128de:	4355      	muls	r5, r2
 80128e0:	460e      	mov	r6, r1
 80128e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80128e6:	f7ff fa65 	bl	8011db4 <_malloc_r>
 80128ea:	4604      	mov	r4, r0
 80128ec:	b140      	cbz	r0, 8012900 <__sfmoreglue+0x28>
 80128ee:	2100      	movs	r1, #0
 80128f0:	e9c0 1600 	strd	r1, r6, [r0]
 80128f4:	300c      	adds	r0, #12
 80128f6:	60a0      	str	r0, [r4, #8]
 80128f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80128fc:	f7fd fb2e 	bl	800ff5c <memset>
 8012900:	4620      	mov	r0, r4
 8012902:	bd70      	pop	{r4, r5, r6, pc}

08012904 <__sfp_lock_acquire>:
 8012904:	4801      	ldr	r0, [pc, #4]	; (801290c <__sfp_lock_acquire+0x8>)
 8012906:	f000 b8b3 	b.w	8012a70 <__retarget_lock_acquire_recursive>
 801290a:	bf00      	nop
 801290c:	20002b7d 	.word	0x20002b7d

08012910 <__sfp_lock_release>:
 8012910:	4801      	ldr	r0, [pc, #4]	; (8012918 <__sfp_lock_release+0x8>)
 8012912:	f000 b8ae 	b.w	8012a72 <__retarget_lock_release_recursive>
 8012916:	bf00      	nop
 8012918:	20002b7d 	.word	0x20002b7d

0801291c <__sinit_lock_acquire>:
 801291c:	4801      	ldr	r0, [pc, #4]	; (8012924 <__sinit_lock_acquire+0x8>)
 801291e:	f000 b8a7 	b.w	8012a70 <__retarget_lock_acquire_recursive>
 8012922:	bf00      	nop
 8012924:	20002b7e 	.word	0x20002b7e

08012928 <__sinit_lock_release>:
 8012928:	4801      	ldr	r0, [pc, #4]	; (8012930 <__sinit_lock_release+0x8>)
 801292a:	f000 b8a2 	b.w	8012a72 <__retarget_lock_release_recursive>
 801292e:	bf00      	nop
 8012930:	20002b7e 	.word	0x20002b7e

08012934 <__sinit>:
 8012934:	b510      	push	{r4, lr}
 8012936:	4604      	mov	r4, r0
 8012938:	f7ff fff0 	bl	801291c <__sinit_lock_acquire>
 801293c:	69a3      	ldr	r3, [r4, #24]
 801293e:	b11b      	cbz	r3, 8012948 <__sinit+0x14>
 8012940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012944:	f7ff bff0 	b.w	8012928 <__sinit_lock_release>
 8012948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801294c:	6523      	str	r3, [r4, #80]	; 0x50
 801294e:	4b13      	ldr	r3, [pc, #76]	; (801299c <__sinit+0x68>)
 8012950:	4a13      	ldr	r2, [pc, #76]	; (80129a0 <__sinit+0x6c>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	62a2      	str	r2, [r4, #40]	; 0x28
 8012956:	42a3      	cmp	r3, r4
 8012958:	bf04      	itt	eq
 801295a:	2301      	moveq	r3, #1
 801295c:	61a3      	streq	r3, [r4, #24]
 801295e:	4620      	mov	r0, r4
 8012960:	f000 f820 	bl	80129a4 <__sfp>
 8012964:	6060      	str	r0, [r4, #4]
 8012966:	4620      	mov	r0, r4
 8012968:	f000 f81c 	bl	80129a4 <__sfp>
 801296c:	60a0      	str	r0, [r4, #8]
 801296e:	4620      	mov	r0, r4
 8012970:	f000 f818 	bl	80129a4 <__sfp>
 8012974:	2200      	movs	r2, #0
 8012976:	60e0      	str	r0, [r4, #12]
 8012978:	2104      	movs	r1, #4
 801297a:	6860      	ldr	r0, [r4, #4]
 801297c:	f7ff ff82 	bl	8012884 <std>
 8012980:	68a0      	ldr	r0, [r4, #8]
 8012982:	2201      	movs	r2, #1
 8012984:	2109      	movs	r1, #9
 8012986:	f7ff ff7d 	bl	8012884 <std>
 801298a:	68e0      	ldr	r0, [r4, #12]
 801298c:	2202      	movs	r2, #2
 801298e:	2112      	movs	r1, #18
 8012990:	f7ff ff78 	bl	8012884 <std>
 8012994:	2301      	movs	r3, #1
 8012996:	61a3      	str	r3, [r4, #24]
 8012998:	e7d2      	b.n	8012940 <__sinit+0xc>
 801299a:	bf00      	nop
 801299c:	08013fb8 	.word	0x08013fb8
 80129a0:	080128cd 	.word	0x080128cd

080129a4 <__sfp>:
 80129a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129a6:	4607      	mov	r7, r0
 80129a8:	f7ff ffac 	bl	8012904 <__sfp_lock_acquire>
 80129ac:	4b1e      	ldr	r3, [pc, #120]	; (8012a28 <__sfp+0x84>)
 80129ae:	681e      	ldr	r6, [r3, #0]
 80129b0:	69b3      	ldr	r3, [r6, #24]
 80129b2:	b913      	cbnz	r3, 80129ba <__sfp+0x16>
 80129b4:	4630      	mov	r0, r6
 80129b6:	f7ff ffbd 	bl	8012934 <__sinit>
 80129ba:	3648      	adds	r6, #72	; 0x48
 80129bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80129c0:	3b01      	subs	r3, #1
 80129c2:	d503      	bpl.n	80129cc <__sfp+0x28>
 80129c4:	6833      	ldr	r3, [r6, #0]
 80129c6:	b30b      	cbz	r3, 8012a0c <__sfp+0x68>
 80129c8:	6836      	ldr	r6, [r6, #0]
 80129ca:	e7f7      	b.n	80129bc <__sfp+0x18>
 80129cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80129d0:	b9d5      	cbnz	r5, 8012a08 <__sfp+0x64>
 80129d2:	4b16      	ldr	r3, [pc, #88]	; (8012a2c <__sfp+0x88>)
 80129d4:	60e3      	str	r3, [r4, #12]
 80129d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80129da:	6665      	str	r5, [r4, #100]	; 0x64
 80129dc:	f000 f847 	bl	8012a6e <__retarget_lock_init_recursive>
 80129e0:	f7ff ff96 	bl	8012910 <__sfp_lock_release>
 80129e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80129e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80129ec:	6025      	str	r5, [r4, #0]
 80129ee:	61a5      	str	r5, [r4, #24]
 80129f0:	2208      	movs	r2, #8
 80129f2:	4629      	mov	r1, r5
 80129f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80129f8:	f7fd fab0 	bl	800ff5c <memset>
 80129fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012a00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012a04:	4620      	mov	r0, r4
 8012a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a08:	3468      	adds	r4, #104	; 0x68
 8012a0a:	e7d9      	b.n	80129c0 <__sfp+0x1c>
 8012a0c:	2104      	movs	r1, #4
 8012a0e:	4638      	mov	r0, r7
 8012a10:	f7ff ff62 	bl	80128d8 <__sfmoreglue>
 8012a14:	4604      	mov	r4, r0
 8012a16:	6030      	str	r0, [r6, #0]
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	d1d5      	bne.n	80129c8 <__sfp+0x24>
 8012a1c:	f7ff ff78 	bl	8012910 <__sfp_lock_release>
 8012a20:	230c      	movs	r3, #12
 8012a22:	603b      	str	r3, [r7, #0]
 8012a24:	e7ee      	b.n	8012a04 <__sfp+0x60>
 8012a26:	bf00      	nop
 8012a28:	08013fb8 	.word	0x08013fb8
 8012a2c:	ffff0001 	.word	0xffff0001

08012a30 <_fwalk_reent>:
 8012a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a34:	4606      	mov	r6, r0
 8012a36:	4688      	mov	r8, r1
 8012a38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012a3c:	2700      	movs	r7, #0
 8012a3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012a42:	f1b9 0901 	subs.w	r9, r9, #1
 8012a46:	d505      	bpl.n	8012a54 <_fwalk_reent+0x24>
 8012a48:	6824      	ldr	r4, [r4, #0]
 8012a4a:	2c00      	cmp	r4, #0
 8012a4c:	d1f7      	bne.n	8012a3e <_fwalk_reent+0xe>
 8012a4e:	4638      	mov	r0, r7
 8012a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a54:	89ab      	ldrh	r3, [r5, #12]
 8012a56:	2b01      	cmp	r3, #1
 8012a58:	d907      	bls.n	8012a6a <_fwalk_reent+0x3a>
 8012a5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a5e:	3301      	adds	r3, #1
 8012a60:	d003      	beq.n	8012a6a <_fwalk_reent+0x3a>
 8012a62:	4629      	mov	r1, r5
 8012a64:	4630      	mov	r0, r6
 8012a66:	47c0      	blx	r8
 8012a68:	4307      	orrs	r7, r0
 8012a6a:	3568      	adds	r5, #104	; 0x68
 8012a6c:	e7e9      	b.n	8012a42 <_fwalk_reent+0x12>

08012a6e <__retarget_lock_init_recursive>:
 8012a6e:	4770      	bx	lr

08012a70 <__retarget_lock_acquire_recursive>:
 8012a70:	4770      	bx	lr

08012a72 <__retarget_lock_release_recursive>:
 8012a72:	4770      	bx	lr

08012a74 <__swhatbuf_r>:
 8012a74:	b570      	push	{r4, r5, r6, lr}
 8012a76:	460e      	mov	r6, r1
 8012a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a7c:	2900      	cmp	r1, #0
 8012a7e:	b096      	sub	sp, #88	; 0x58
 8012a80:	4614      	mov	r4, r2
 8012a82:	461d      	mov	r5, r3
 8012a84:	da08      	bge.n	8012a98 <__swhatbuf_r+0x24>
 8012a86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	602a      	str	r2, [r5, #0]
 8012a8e:	061a      	lsls	r2, r3, #24
 8012a90:	d410      	bmi.n	8012ab4 <__swhatbuf_r+0x40>
 8012a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a96:	e00e      	b.n	8012ab6 <__swhatbuf_r+0x42>
 8012a98:	466a      	mov	r2, sp
 8012a9a:	f000 f903 	bl	8012ca4 <_fstat_r>
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	dbf1      	blt.n	8012a86 <__swhatbuf_r+0x12>
 8012aa2:	9a01      	ldr	r2, [sp, #4]
 8012aa4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012aa8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012aac:	425a      	negs	r2, r3
 8012aae:	415a      	adcs	r2, r3
 8012ab0:	602a      	str	r2, [r5, #0]
 8012ab2:	e7ee      	b.n	8012a92 <__swhatbuf_r+0x1e>
 8012ab4:	2340      	movs	r3, #64	; 0x40
 8012ab6:	2000      	movs	r0, #0
 8012ab8:	6023      	str	r3, [r4, #0]
 8012aba:	b016      	add	sp, #88	; 0x58
 8012abc:	bd70      	pop	{r4, r5, r6, pc}
	...

08012ac0 <__smakebuf_r>:
 8012ac0:	898b      	ldrh	r3, [r1, #12]
 8012ac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012ac4:	079d      	lsls	r5, r3, #30
 8012ac6:	4606      	mov	r6, r0
 8012ac8:	460c      	mov	r4, r1
 8012aca:	d507      	bpl.n	8012adc <__smakebuf_r+0x1c>
 8012acc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012ad0:	6023      	str	r3, [r4, #0]
 8012ad2:	6123      	str	r3, [r4, #16]
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	6163      	str	r3, [r4, #20]
 8012ad8:	b002      	add	sp, #8
 8012ada:	bd70      	pop	{r4, r5, r6, pc}
 8012adc:	ab01      	add	r3, sp, #4
 8012ade:	466a      	mov	r2, sp
 8012ae0:	f7ff ffc8 	bl	8012a74 <__swhatbuf_r>
 8012ae4:	9900      	ldr	r1, [sp, #0]
 8012ae6:	4605      	mov	r5, r0
 8012ae8:	4630      	mov	r0, r6
 8012aea:	f7ff f963 	bl	8011db4 <_malloc_r>
 8012aee:	b948      	cbnz	r0, 8012b04 <__smakebuf_r+0x44>
 8012af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012af4:	059a      	lsls	r2, r3, #22
 8012af6:	d4ef      	bmi.n	8012ad8 <__smakebuf_r+0x18>
 8012af8:	f023 0303 	bic.w	r3, r3, #3
 8012afc:	f043 0302 	orr.w	r3, r3, #2
 8012b00:	81a3      	strh	r3, [r4, #12]
 8012b02:	e7e3      	b.n	8012acc <__smakebuf_r+0xc>
 8012b04:	4b0d      	ldr	r3, [pc, #52]	; (8012b3c <__smakebuf_r+0x7c>)
 8012b06:	62b3      	str	r3, [r6, #40]	; 0x28
 8012b08:	89a3      	ldrh	r3, [r4, #12]
 8012b0a:	6020      	str	r0, [r4, #0]
 8012b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b10:	81a3      	strh	r3, [r4, #12]
 8012b12:	9b00      	ldr	r3, [sp, #0]
 8012b14:	6163      	str	r3, [r4, #20]
 8012b16:	9b01      	ldr	r3, [sp, #4]
 8012b18:	6120      	str	r0, [r4, #16]
 8012b1a:	b15b      	cbz	r3, 8012b34 <__smakebuf_r+0x74>
 8012b1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b20:	4630      	mov	r0, r6
 8012b22:	f000 f8d1 	bl	8012cc8 <_isatty_r>
 8012b26:	b128      	cbz	r0, 8012b34 <__smakebuf_r+0x74>
 8012b28:	89a3      	ldrh	r3, [r4, #12]
 8012b2a:	f023 0303 	bic.w	r3, r3, #3
 8012b2e:	f043 0301 	orr.w	r3, r3, #1
 8012b32:	81a3      	strh	r3, [r4, #12]
 8012b34:	89a0      	ldrh	r0, [r4, #12]
 8012b36:	4305      	orrs	r5, r0
 8012b38:	81a5      	strh	r5, [r4, #12]
 8012b3a:	e7cd      	b.n	8012ad8 <__smakebuf_r+0x18>
 8012b3c:	080128cd 	.word	0x080128cd

08012b40 <_malloc_usable_size_r>:
 8012b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b44:	1f18      	subs	r0, r3, #4
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	bfbc      	itt	lt
 8012b4a:	580b      	ldrlt	r3, [r1, r0]
 8012b4c:	18c0      	addlt	r0, r0, r3
 8012b4e:	4770      	bx	lr

08012b50 <_raise_r>:
 8012b50:	291f      	cmp	r1, #31
 8012b52:	b538      	push	{r3, r4, r5, lr}
 8012b54:	4604      	mov	r4, r0
 8012b56:	460d      	mov	r5, r1
 8012b58:	d904      	bls.n	8012b64 <_raise_r+0x14>
 8012b5a:	2316      	movs	r3, #22
 8012b5c:	6003      	str	r3, [r0, #0]
 8012b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b62:	bd38      	pop	{r3, r4, r5, pc}
 8012b64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012b66:	b112      	cbz	r2, 8012b6e <_raise_r+0x1e>
 8012b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b6c:	b94b      	cbnz	r3, 8012b82 <_raise_r+0x32>
 8012b6e:	4620      	mov	r0, r4
 8012b70:	f000 f830 	bl	8012bd4 <_getpid_r>
 8012b74:	462a      	mov	r2, r5
 8012b76:	4601      	mov	r1, r0
 8012b78:	4620      	mov	r0, r4
 8012b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b7e:	f000 b817 	b.w	8012bb0 <_kill_r>
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d00a      	beq.n	8012b9c <_raise_r+0x4c>
 8012b86:	1c59      	adds	r1, r3, #1
 8012b88:	d103      	bne.n	8012b92 <_raise_r+0x42>
 8012b8a:	2316      	movs	r3, #22
 8012b8c:	6003      	str	r3, [r0, #0]
 8012b8e:	2001      	movs	r0, #1
 8012b90:	e7e7      	b.n	8012b62 <_raise_r+0x12>
 8012b92:	2400      	movs	r4, #0
 8012b94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012b98:	4628      	mov	r0, r5
 8012b9a:	4798      	blx	r3
 8012b9c:	2000      	movs	r0, #0
 8012b9e:	e7e0      	b.n	8012b62 <_raise_r+0x12>

08012ba0 <raise>:
 8012ba0:	4b02      	ldr	r3, [pc, #8]	; (8012bac <raise+0xc>)
 8012ba2:	4601      	mov	r1, r0
 8012ba4:	6818      	ldr	r0, [r3, #0]
 8012ba6:	f7ff bfd3 	b.w	8012b50 <_raise_r>
 8012baa:	bf00      	nop
 8012bac:	20000100 	.word	0x20000100

08012bb0 <_kill_r>:
 8012bb0:	b538      	push	{r3, r4, r5, lr}
 8012bb2:	4d07      	ldr	r5, [pc, #28]	; (8012bd0 <_kill_r+0x20>)
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	4604      	mov	r4, r0
 8012bb8:	4608      	mov	r0, r1
 8012bba:	4611      	mov	r1, r2
 8012bbc:	602b      	str	r3, [r5, #0]
 8012bbe:	f7f2 f947 	bl	8004e50 <_kill>
 8012bc2:	1c43      	adds	r3, r0, #1
 8012bc4:	d102      	bne.n	8012bcc <_kill_r+0x1c>
 8012bc6:	682b      	ldr	r3, [r5, #0]
 8012bc8:	b103      	cbz	r3, 8012bcc <_kill_r+0x1c>
 8012bca:	6023      	str	r3, [r4, #0]
 8012bcc:	bd38      	pop	{r3, r4, r5, pc}
 8012bce:	bf00      	nop
 8012bd0:	20002b78 	.word	0x20002b78

08012bd4 <_getpid_r>:
 8012bd4:	f7f2 b934 	b.w	8004e40 <_getpid>

08012bd8 <__sread>:
 8012bd8:	b510      	push	{r4, lr}
 8012bda:	460c      	mov	r4, r1
 8012bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012be0:	f000 f894 	bl	8012d0c <_read_r>
 8012be4:	2800      	cmp	r0, #0
 8012be6:	bfab      	itete	ge
 8012be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012bea:	89a3      	ldrhlt	r3, [r4, #12]
 8012bec:	181b      	addge	r3, r3, r0
 8012bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012bf2:	bfac      	ite	ge
 8012bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8012bf6:	81a3      	strhlt	r3, [r4, #12]
 8012bf8:	bd10      	pop	{r4, pc}

08012bfa <__swrite>:
 8012bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bfe:	461f      	mov	r7, r3
 8012c00:	898b      	ldrh	r3, [r1, #12]
 8012c02:	05db      	lsls	r3, r3, #23
 8012c04:	4605      	mov	r5, r0
 8012c06:	460c      	mov	r4, r1
 8012c08:	4616      	mov	r6, r2
 8012c0a:	d505      	bpl.n	8012c18 <__swrite+0x1e>
 8012c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c10:	2302      	movs	r3, #2
 8012c12:	2200      	movs	r2, #0
 8012c14:	f000 f868 	bl	8012ce8 <_lseek_r>
 8012c18:	89a3      	ldrh	r3, [r4, #12]
 8012c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c22:	81a3      	strh	r3, [r4, #12]
 8012c24:	4632      	mov	r2, r6
 8012c26:	463b      	mov	r3, r7
 8012c28:	4628      	mov	r0, r5
 8012c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c2e:	f000 b817 	b.w	8012c60 <_write_r>

08012c32 <__sseek>:
 8012c32:	b510      	push	{r4, lr}
 8012c34:	460c      	mov	r4, r1
 8012c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c3a:	f000 f855 	bl	8012ce8 <_lseek_r>
 8012c3e:	1c43      	adds	r3, r0, #1
 8012c40:	89a3      	ldrh	r3, [r4, #12]
 8012c42:	bf15      	itete	ne
 8012c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8012c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012c4e:	81a3      	strheq	r3, [r4, #12]
 8012c50:	bf18      	it	ne
 8012c52:	81a3      	strhne	r3, [r4, #12]
 8012c54:	bd10      	pop	{r4, pc}

08012c56 <__sclose>:
 8012c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c5a:	f000 b813 	b.w	8012c84 <_close_r>
	...

08012c60 <_write_r>:
 8012c60:	b538      	push	{r3, r4, r5, lr}
 8012c62:	4d07      	ldr	r5, [pc, #28]	; (8012c80 <_write_r+0x20>)
 8012c64:	4604      	mov	r4, r0
 8012c66:	4608      	mov	r0, r1
 8012c68:	4611      	mov	r1, r2
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	602a      	str	r2, [r5, #0]
 8012c6e:	461a      	mov	r2, r3
 8012c70:	f7f2 f925 	bl	8004ebe <_write>
 8012c74:	1c43      	adds	r3, r0, #1
 8012c76:	d102      	bne.n	8012c7e <_write_r+0x1e>
 8012c78:	682b      	ldr	r3, [r5, #0]
 8012c7a:	b103      	cbz	r3, 8012c7e <_write_r+0x1e>
 8012c7c:	6023      	str	r3, [r4, #0]
 8012c7e:	bd38      	pop	{r3, r4, r5, pc}
 8012c80:	20002b78 	.word	0x20002b78

08012c84 <_close_r>:
 8012c84:	b538      	push	{r3, r4, r5, lr}
 8012c86:	4d06      	ldr	r5, [pc, #24]	; (8012ca0 <_close_r+0x1c>)
 8012c88:	2300      	movs	r3, #0
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	4608      	mov	r0, r1
 8012c8e:	602b      	str	r3, [r5, #0]
 8012c90:	f7f2 f931 	bl	8004ef6 <_close>
 8012c94:	1c43      	adds	r3, r0, #1
 8012c96:	d102      	bne.n	8012c9e <_close_r+0x1a>
 8012c98:	682b      	ldr	r3, [r5, #0]
 8012c9a:	b103      	cbz	r3, 8012c9e <_close_r+0x1a>
 8012c9c:	6023      	str	r3, [r4, #0]
 8012c9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ca0:	20002b78 	.word	0x20002b78

08012ca4 <_fstat_r>:
 8012ca4:	b538      	push	{r3, r4, r5, lr}
 8012ca6:	4d07      	ldr	r5, [pc, #28]	; (8012cc4 <_fstat_r+0x20>)
 8012ca8:	2300      	movs	r3, #0
 8012caa:	4604      	mov	r4, r0
 8012cac:	4608      	mov	r0, r1
 8012cae:	4611      	mov	r1, r2
 8012cb0:	602b      	str	r3, [r5, #0]
 8012cb2:	f7f2 f92c 	bl	8004f0e <_fstat>
 8012cb6:	1c43      	adds	r3, r0, #1
 8012cb8:	d102      	bne.n	8012cc0 <_fstat_r+0x1c>
 8012cba:	682b      	ldr	r3, [r5, #0]
 8012cbc:	b103      	cbz	r3, 8012cc0 <_fstat_r+0x1c>
 8012cbe:	6023      	str	r3, [r4, #0]
 8012cc0:	bd38      	pop	{r3, r4, r5, pc}
 8012cc2:	bf00      	nop
 8012cc4:	20002b78 	.word	0x20002b78

08012cc8 <_isatty_r>:
 8012cc8:	b538      	push	{r3, r4, r5, lr}
 8012cca:	4d06      	ldr	r5, [pc, #24]	; (8012ce4 <_isatty_r+0x1c>)
 8012ccc:	2300      	movs	r3, #0
 8012cce:	4604      	mov	r4, r0
 8012cd0:	4608      	mov	r0, r1
 8012cd2:	602b      	str	r3, [r5, #0]
 8012cd4:	f7f2 f92b 	bl	8004f2e <_isatty>
 8012cd8:	1c43      	adds	r3, r0, #1
 8012cda:	d102      	bne.n	8012ce2 <_isatty_r+0x1a>
 8012cdc:	682b      	ldr	r3, [r5, #0]
 8012cde:	b103      	cbz	r3, 8012ce2 <_isatty_r+0x1a>
 8012ce0:	6023      	str	r3, [r4, #0]
 8012ce2:	bd38      	pop	{r3, r4, r5, pc}
 8012ce4:	20002b78 	.word	0x20002b78

08012ce8 <_lseek_r>:
 8012ce8:	b538      	push	{r3, r4, r5, lr}
 8012cea:	4d07      	ldr	r5, [pc, #28]	; (8012d08 <_lseek_r+0x20>)
 8012cec:	4604      	mov	r4, r0
 8012cee:	4608      	mov	r0, r1
 8012cf0:	4611      	mov	r1, r2
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	602a      	str	r2, [r5, #0]
 8012cf6:	461a      	mov	r2, r3
 8012cf8:	f7f2 f924 	bl	8004f44 <_lseek>
 8012cfc:	1c43      	adds	r3, r0, #1
 8012cfe:	d102      	bne.n	8012d06 <_lseek_r+0x1e>
 8012d00:	682b      	ldr	r3, [r5, #0]
 8012d02:	b103      	cbz	r3, 8012d06 <_lseek_r+0x1e>
 8012d04:	6023      	str	r3, [r4, #0]
 8012d06:	bd38      	pop	{r3, r4, r5, pc}
 8012d08:	20002b78 	.word	0x20002b78

08012d0c <_read_r>:
 8012d0c:	b538      	push	{r3, r4, r5, lr}
 8012d0e:	4d07      	ldr	r5, [pc, #28]	; (8012d2c <_read_r+0x20>)
 8012d10:	4604      	mov	r4, r0
 8012d12:	4608      	mov	r0, r1
 8012d14:	4611      	mov	r1, r2
 8012d16:	2200      	movs	r2, #0
 8012d18:	602a      	str	r2, [r5, #0]
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	f7f2 f8b2 	bl	8004e84 <_read>
 8012d20:	1c43      	adds	r3, r0, #1
 8012d22:	d102      	bne.n	8012d2a <_read_r+0x1e>
 8012d24:	682b      	ldr	r3, [r5, #0]
 8012d26:	b103      	cbz	r3, 8012d2a <_read_r+0x1e>
 8012d28:	6023      	str	r3, [r4, #0]
 8012d2a:	bd38      	pop	{r3, r4, r5, pc}
 8012d2c:	20002b78 	.word	0x20002b78

08012d30 <cos>:
 8012d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d32:	ec53 2b10 	vmov	r2, r3, d0
 8012d36:	4826      	ldr	r0, [pc, #152]	; (8012dd0 <cos+0xa0>)
 8012d38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012d3c:	4281      	cmp	r1, r0
 8012d3e:	dc06      	bgt.n	8012d4e <cos+0x1e>
 8012d40:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8012dc8 <cos+0x98>
 8012d44:	b005      	add	sp, #20
 8012d46:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d4a:	f000 baa9 	b.w	80132a0 <__kernel_cos>
 8012d4e:	4821      	ldr	r0, [pc, #132]	; (8012dd4 <cos+0xa4>)
 8012d50:	4281      	cmp	r1, r0
 8012d52:	dd09      	ble.n	8012d68 <cos+0x38>
 8012d54:	ee10 0a10 	vmov	r0, s0
 8012d58:	4619      	mov	r1, r3
 8012d5a:	f7ed fa95 	bl	8000288 <__aeabi_dsub>
 8012d5e:	ec41 0b10 	vmov	d0, r0, r1
 8012d62:	b005      	add	sp, #20
 8012d64:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d68:	4668      	mov	r0, sp
 8012d6a:	f000 f88d 	bl	8012e88 <__ieee754_rem_pio2>
 8012d6e:	f000 0003 	and.w	r0, r0, #3
 8012d72:	2801      	cmp	r0, #1
 8012d74:	d00b      	beq.n	8012d8e <cos+0x5e>
 8012d76:	2802      	cmp	r0, #2
 8012d78:	d016      	beq.n	8012da8 <cos+0x78>
 8012d7a:	b9e0      	cbnz	r0, 8012db6 <cos+0x86>
 8012d7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d80:	ed9d 0b00 	vldr	d0, [sp]
 8012d84:	f000 fa8c 	bl	80132a0 <__kernel_cos>
 8012d88:	ec51 0b10 	vmov	r0, r1, d0
 8012d8c:	e7e7      	b.n	8012d5e <cos+0x2e>
 8012d8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d92:	ed9d 0b00 	vldr	d0, [sp]
 8012d96:	f000 fe9b 	bl	8013ad0 <__kernel_sin>
 8012d9a:	ec53 2b10 	vmov	r2, r3, d0
 8012d9e:	ee10 0a10 	vmov	r0, s0
 8012da2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012da6:	e7da      	b.n	8012d5e <cos+0x2e>
 8012da8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012dac:	ed9d 0b00 	vldr	d0, [sp]
 8012db0:	f000 fa76 	bl	80132a0 <__kernel_cos>
 8012db4:	e7f1      	b.n	8012d9a <cos+0x6a>
 8012db6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012dba:	ed9d 0b00 	vldr	d0, [sp]
 8012dbe:	2001      	movs	r0, #1
 8012dc0:	f000 fe86 	bl	8013ad0 <__kernel_sin>
 8012dc4:	e7e0      	b.n	8012d88 <cos+0x58>
 8012dc6:	bf00      	nop
	...
 8012dd0:	3fe921fb 	.word	0x3fe921fb
 8012dd4:	7fefffff 	.word	0x7fefffff

08012dd8 <sin>:
 8012dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012dda:	ec53 2b10 	vmov	r2, r3, d0
 8012dde:	4828      	ldr	r0, [pc, #160]	; (8012e80 <sin+0xa8>)
 8012de0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012de4:	4281      	cmp	r1, r0
 8012de6:	dc07      	bgt.n	8012df8 <sin+0x20>
 8012de8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8012e78 <sin+0xa0>
 8012dec:	2000      	movs	r0, #0
 8012dee:	b005      	add	sp, #20
 8012df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012df4:	f000 be6c 	b.w	8013ad0 <__kernel_sin>
 8012df8:	4822      	ldr	r0, [pc, #136]	; (8012e84 <sin+0xac>)
 8012dfa:	4281      	cmp	r1, r0
 8012dfc:	dd09      	ble.n	8012e12 <sin+0x3a>
 8012dfe:	ee10 0a10 	vmov	r0, s0
 8012e02:	4619      	mov	r1, r3
 8012e04:	f7ed fa40 	bl	8000288 <__aeabi_dsub>
 8012e08:	ec41 0b10 	vmov	d0, r0, r1
 8012e0c:	b005      	add	sp, #20
 8012e0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e12:	4668      	mov	r0, sp
 8012e14:	f000 f838 	bl	8012e88 <__ieee754_rem_pio2>
 8012e18:	f000 0003 	and.w	r0, r0, #3
 8012e1c:	2801      	cmp	r0, #1
 8012e1e:	d00c      	beq.n	8012e3a <sin+0x62>
 8012e20:	2802      	cmp	r0, #2
 8012e22:	d011      	beq.n	8012e48 <sin+0x70>
 8012e24:	b9f0      	cbnz	r0, 8012e64 <sin+0x8c>
 8012e26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e2a:	ed9d 0b00 	vldr	d0, [sp]
 8012e2e:	2001      	movs	r0, #1
 8012e30:	f000 fe4e 	bl	8013ad0 <__kernel_sin>
 8012e34:	ec51 0b10 	vmov	r0, r1, d0
 8012e38:	e7e6      	b.n	8012e08 <sin+0x30>
 8012e3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e3e:	ed9d 0b00 	vldr	d0, [sp]
 8012e42:	f000 fa2d 	bl	80132a0 <__kernel_cos>
 8012e46:	e7f5      	b.n	8012e34 <sin+0x5c>
 8012e48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e4c:	ed9d 0b00 	vldr	d0, [sp]
 8012e50:	2001      	movs	r0, #1
 8012e52:	f000 fe3d 	bl	8013ad0 <__kernel_sin>
 8012e56:	ec53 2b10 	vmov	r2, r3, d0
 8012e5a:	ee10 0a10 	vmov	r0, s0
 8012e5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012e62:	e7d1      	b.n	8012e08 <sin+0x30>
 8012e64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e68:	ed9d 0b00 	vldr	d0, [sp]
 8012e6c:	f000 fa18 	bl	80132a0 <__kernel_cos>
 8012e70:	e7f1      	b.n	8012e56 <sin+0x7e>
 8012e72:	bf00      	nop
 8012e74:	f3af 8000 	nop.w
	...
 8012e80:	3fe921fb 	.word	0x3fe921fb
 8012e84:	7fefffff 	.word	0x7fefffff

08012e88 <__ieee754_rem_pio2>:
 8012e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e8c:	ed2d 8b02 	vpush	{d8}
 8012e90:	ec55 4b10 	vmov	r4, r5, d0
 8012e94:	4bca      	ldr	r3, [pc, #808]	; (80131c0 <__ieee754_rem_pio2+0x338>)
 8012e96:	b08b      	sub	sp, #44	; 0x2c
 8012e98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012e9c:	4598      	cmp	r8, r3
 8012e9e:	4682      	mov	sl, r0
 8012ea0:	9502      	str	r5, [sp, #8]
 8012ea2:	dc08      	bgt.n	8012eb6 <__ieee754_rem_pio2+0x2e>
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	ed80 0b00 	vstr	d0, [r0]
 8012eac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012eb0:	f04f 0b00 	mov.w	fp, #0
 8012eb4:	e028      	b.n	8012f08 <__ieee754_rem_pio2+0x80>
 8012eb6:	4bc3      	ldr	r3, [pc, #780]	; (80131c4 <__ieee754_rem_pio2+0x33c>)
 8012eb8:	4598      	cmp	r8, r3
 8012eba:	dc78      	bgt.n	8012fae <__ieee754_rem_pio2+0x126>
 8012ebc:	9b02      	ldr	r3, [sp, #8]
 8012ebe:	4ec2      	ldr	r6, [pc, #776]	; (80131c8 <__ieee754_rem_pio2+0x340>)
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	ee10 0a10 	vmov	r0, s0
 8012ec6:	a3b0      	add	r3, pc, #704	; (adr r3, 8013188 <__ieee754_rem_pio2+0x300>)
 8012ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ecc:	4629      	mov	r1, r5
 8012ece:	dd39      	ble.n	8012f44 <__ieee754_rem_pio2+0xbc>
 8012ed0:	f7ed f9da 	bl	8000288 <__aeabi_dsub>
 8012ed4:	45b0      	cmp	r8, r6
 8012ed6:	4604      	mov	r4, r0
 8012ed8:	460d      	mov	r5, r1
 8012eda:	d01b      	beq.n	8012f14 <__ieee754_rem_pio2+0x8c>
 8012edc:	a3ac      	add	r3, pc, #688	; (adr r3, 8013190 <__ieee754_rem_pio2+0x308>)
 8012ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee2:	f7ed f9d1 	bl	8000288 <__aeabi_dsub>
 8012ee6:	4602      	mov	r2, r0
 8012ee8:	460b      	mov	r3, r1
 8012eea:	e9ca 2300 	strd	r2, r3, [sl]
 8012eee:	4620      	mov	r0, r4
 8012ef0:	4629      	mov	r1, r5
 8012ef2:	f7ed f9c9 	bl	8000288 <__aeabi_dsub>
 8012ef6:	a3a6      	add	r3, pc, #664	; (adr r3, 8013190 <__ieee754_rem_pio2+0x308>)
 8012ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efc:	f7ed f9c4 	bl	8000288 <__aeabi_dsub>
 8012f00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012f04:	f04f 0b01 	mov.w	fp, #1
 8012f08:	4658      	mov	r0, fp
 8012f0a:	b00b      	add	sp, #44	; 0x2c
 8012f0c:	ecbd 8b02 	vpop	{d8}
 8012f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f14:	a3a0      	add	r3, pc, #640	; (adr r3, 8013198 <__ieee754_rem_pio2+0x310>)
 8012f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f1a:	f7ed f9b5 	bl	8000288 <__aeabi_dsub>
 8012f1e:	a3a0      	add	r3, pc, #640	; (adr r3, 80131a0 <__ieee754_rem_pio2+0x318>)
 8012f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f24:	4604      	mov	r4, r0
 8012f26:	460d      	mov	r5, r1
 8012f28:	f7ed f9ae 	bl	8000288 <__aeabi_dsub>
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	460b      	mov	r3, r1
 8012f30:	e9ca 2300 	strd	r2, r3, [sl]
 8012f34:	4620      	mov	r0, r4
 8012f36:	4629      	mov	r1, r5
 8012f38:	f7ed f9a6 	bl	8000288 <__aeabi_dsub>
 8012f3c:	a398      	add	r3, pc, #608	; (adr r3, 80131a0 <__ieee754_rem_pio2+0x318>)
 8012f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f42:	e7db      	b.n	8012efc <__ieee754_rem_pio2+0x74>
 8012f44:	f7ed f9a2 	bl	800028c <__adddf3>
 8012f48:	45b0      	cmp	r8, r6
 8012f4a:	4604      	mov	r4, r0
 8012f4c:	460d      	mov	r5, r1
 8012f4e:	d016      	beq.n	8012f7e <__ieee754_rem_pio2+0xf6>
 8012f50:	a38f      	add	r3, pc, #572	; (adr r3, 8013190 <__ieee754_rem_pio2+0x308>)
 8012f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f56:	f7ed f999 	bl	800028c <__adddf3>
 8012f5a:	4602      	mov	r2, r0
 8012f5c:	460b      	mov	r3, r1
 8012f5e:	e9ca 2300 	strd	r2, r3, [sl]
 8012f62:	4620      	mov	r0, r4
 8012f64:	4629      	mov	r1, r5
 8012f66:	f7ed f98f 	bl	8000288 <__aeabi_dsub>
 8012f6a:	a389      	add	r3, pc, #548	; (adr r3, 8013190 <__ieee754_rem_pio2+0x308>)
 8012f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f70:	f7ed f98c 	bl	800028c <__adddf3>
 8012f74:	f04f 3bff 	mov.w	fp, #4294967295
 8012f78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012f7c:	e7c4      	b.n	8012f08 <__ieee754_rem_pio2+0x80>
 8012f7e:	a386      	add	r3, pc, #536	; (adr r3, 8013198 <__ieee754_rem_pio2+0x310>)
 8012f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f84:	f7ed f982 	bl	800028c <__adddf3>
 8012f88:	a385      	add	r3, pc, #532	; (adr r3, 80131a0 <__ieee754_rem_pio2+0x318>)
 8012f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8e:	4604      	mov	r4, r0
 8012f90:	460d      	mov	r5, r1
 8012f92:	f7ed f97b 	bl	800028c <__adddf3>
 8012f96:	4602      	mov	r2, r0
 8012f98:	460b      	mov	r3, r1
 8012f9a:	e9ca 2300 	strd	r2, r3, [sl]
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	4629      	mov	r1, r5
 8012fa2:	f7ed f971 	bl	8000288 <__aeabi_dsub>
 8012fa6:	a37e      	add	r3, pc, #504	; (adr r3, 80131a0 <__ieee754_rem_pio2+0x318>)
 8012fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fac:	e7e0      	b.n	8012f70 <__ieee754_rem_pio2+0xe8>
 8012fae:	4b87      	ldr	r3, [pc, #540]	; (80131cc <__ieee754_rem_pio2+0x344>)
 8012fb0:	4598      	cmp	r8, r3
 8012fb2:	f300 80d9 	bgt.w	8013168 <__ieee754_rem_pio2+0x2e0>
 8012fb6:	f000 fe49 	bl	8013c4c <fabs>
 8012fba:	ec55 4b10 	vmov	r4, r5, d0
 8012fbe:	ee10 0a10 	vmov	r0, s0
 8012fc2:	a379      	add	r3, pc, #484	; (adr r3, 80131a8 <__ieee754_rem_pio2+0x320>)
 8012fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc8:	4629      	mov	r1, r5
 8012fca:	f7ed fb15 	bl	80005f8 <__aeabi_dmul>
 8012fce:	4b80      	ldr	r3, [pc, #512]	; (80131d0 <__ieee754_rem_pio2+0x348>)
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	f7ed f95b 	bl	800028c <__adddf3>
 8012fd6:	f7ed fdbf 	bl	8000b58 <__aeabi_d2iz>
 8012fda:	4683      	mov	fp, r0
 8012fdc:	f7ed faa2 	bl	8000524 <__aeabi_i2d>
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	460b      	mov	r3, r1
 8012fe4:	ec43 2b18 	vmov	d8, r2, r3
 8012fe8:	a367      	add	r3, pc, #412	; (adr r3, 8013188 <__ieee754_rem_pio2+0x300>)
 8012fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fee:	f7ed fb03 	bl	80005f8 <__aeabi_dmul>
 8012ff2:	4602      	mov	r2, r0
 8012ff4:	460b      	mov	r3, r1
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	f7ed f945 	bl	8000288 <__aeabi_dsub>
 8012ffe:	a364      	add	r3, pc, #400	; (adr r3, 8013190 <__ieee754_rem_pio2+0x308>)
 8013000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013004:	4606      	mov	r6, r0
 8013006:	460f      	mov	r7, r1
 8013008:	ec51 0b18 	vmov	r0, r1, d8
 801300c:	f7ed faf4 	bl	80005f8 <__aeabi_dmul>
 8013010:	f1bb 0f1f 	cmp.w	fp, #31
 8013014:	4604      	mov	r4, r0
 8013016:	460d      	mov	r5, r1
 8013018:	dc0d      	bgt.n	8013036 <__ieee754_rem_pio2+0x1ae>
 801301a:	4b6e      	ldr	r3, [pc, #440]	; (80131d4 <__ieee754_rem_pio2+0x34c>)
 801301c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013024:	4543      	cmp	r3, r8
 8013026:	d006      	beq.n	8013036 <__ieee754_rem_pio2+0x1ae>
 8013028:	4622      	mov	r2, r4
 801302a:	462b      	mov	r3, r5
 801302c:	4630      	mov	r0, r6
 801302e:	4639      	mov	r1, r7
 8013030:	f7ed f92a 	bl	8000288 <__aeabi_dsub>
 8013034:	e00f      	b.n	8013056 <__ieee754_rem_pio2+0x1ce>
 8013036:	462b      	mov	r3, r5
 8013038:	4622      	mov	r2, r4
 801303a:	4630      	mov	r0, r6
 801303c:	4639      	mov	r1, r7
 801303e:	f7ed f923 	bl	8000288 <__aeabi_dsub>
 8013042:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013046:	9303      	str	r3, [sp, #12]
 8013048:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801304c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8013050:	f1b8 0f10 	cmp.w	r8, #16
 8013054:	dc02      	bgt.n	801305c <__ieee754_rem_pio2+0x1d4>
 8013056:	e9ca 0100 	strd	r0, r1, [sl]
 801305a:	e039      	b.n	80130d0 <__ieee754_rem_pio2+0x248>
 801305c:	a34e      	add	r3, pc, #312	; (adr r3, 8013198 <__ieee754_rem_pio2+0x310>)
 801305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013062:	ec51 0b18 	vmov	r0, r1, d8
 8013066:	f7ed fac7 	bl	80005f8 <__aeabi_dmul>
 801306a:	4604      	mov	r4, r0
 801306c:	460d      	mov	r5, r1
 801306e:	4602      	mov	r2, r0
 8013070:	460b      	mov	r3, r1
 8013072:	4630      	mov	r0, r6
 8013074:	4639      	mov	r1, r7
 8013076:	f7ed f907 	bl	8000288 <__aeabi_dsub>
 801307a:	4602      	mov	r2, r0
 801307c:	460b      	mov	r3, r1
 801307e:	4680      	mov	r8, r0
 8013080:	4689      	mov	r9, r1
 8013082:	4630      	mov	r0, r6
 8013084:	4639      	mov	r1, r7
 8013086:	f7ed f8ff 	bl	8000288 <__aeabi_dsub>
 801308a:	4622      	mov	r2, r4
 801308c:	462b      	mov	r3, r5
 801308e:	f7ed f8fb 	bl	8000288 <__aeabi_dsub>
 8013092:	a343      	add	r3, pc, #268	; (adr r3, 80131a0 <__ieee754_rem_pio2+0x318>)
 8013094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013098:	4604      	mov	r4, r0
 801309a:	460d      	mov	r5, r1
 801309c:	ec51 0b18 	vmov	r0, r1, d8
 80130a0:	f7ed faaa 	bl	80005f8 <__aeabi_dmul>
 80130a4:	4622      	mov	r2, r4
 80130a6:	462b      	mov	r3, r5
 80130a8:	f7ed f8ee 	bl	8000288 <__aeabi_dsub>
 80130ac:	4602      	mov	r2, r0
 80130ae:	460b      	mov	r3, r1
 80130b0:	4604      	mov	r4, r0
 80130b2:	460d      	mov	r5, r1
 80130b4:	4640      	mov	r0, r8
 80130b6:	4649      	mov	r1, r9
 80130b8:	f7ed f8e6 	bl	8000288 <__aeabi_dsub>
 80130bc:	9a03      	ldr	r2, [sp, #12]
 80130be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80130c2:	1ad3      	subs	r3, r2, r3
 80130c4:	2b31      	cmp	r3, #49	; 0x31
 80130c6:	dc24      	bgt.n	8013112 <__ieee754_rem_pio2+0x28a>
 80130c8:	e9ca 0100 	strd	r0, r1, [sl]
 80130cc:	4646      	mov	r6, r8
 80130ce:	464f      	mov	r7, r9
 80130d0:	e9da 8900 	ldrd	r8, r9, [sl]
 80130d4:	4630      	mov	r0, r6
 80130d6:	4642      	mov	r2, r8
 80130d8:	464b      	mov	r3, r9
 80130da:	4639      	mov	r1, r7
 80130dc:	f7ed f8d4 	bl	8000288 <__aeabi_dsub>
 80130e0:	462b      	mov	r3, r5
 80130e2:	4622      	mov	r2, r4
 80130e4:	f7ed f8d0 	bl	8000288 <__aeabi_dsub>
 80130e8:	9b02      	ldr	r3, [sp, #8]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80130f0:	f6bf af0a 	bge.w	8012f08 <__ieee754_rem_pio2+0x80>
 80130f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80130f8:	f8ca 3004 	str.w	r3, [sl, #4]
 80130fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013100:	f8ca 8000 	str.w	r8, [sl]
 8013104:	f8ca 0008 	str.w	r0, [sl, #8]
 8013108:	f8ca 300c 	str.w	r3, [sl, #12]
 801310c:	f1cb 0b00 	rsb	fp, fp, #0
 8013110:	e6fa      	b.n	8012f08 <__ieee754_rem_pio2+0x80>
 8013112:	a327      	add	r3, pc, #156	; (adr r3, 80131b0 <__ieee754_rem_pio2+0x328>)
 8013114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013118:	ec51 0b18 	vmov	r0, r1, d8
 801311c:	f7ed fa6c 	bl	80005f8 <__aeabi_dmul>
 8013120:	4604      	mov	r4, r0
 8013122:	460d      	mov	r5, r1
 8013124:	4602      	mov	r2, r0
 8013126:	460b      	mov	r3, r1
 8013128:	4640      	mov	r0, r8
 801312a:	4649      	mov	r1, r9
 801312c:	f7ed f8ac 	bl	8000288 <__aeabi_dsub>
 8013130:	4602      	mov	r2, r0
 8013132:	460b      	mov	r3, r1
 8013134:	4606      	mov	r6, r0
 8013136:	460f      	mov	r7, r1
 8013138:	4640      	mov	r0, r8
 801313a:	4649      	mov	r1, r9
 801313c:	f7ed f8a4 	bl	8000288 <__aeabi_dsub>
 8013140:	4622      	mov	r2, r4
 8013142:	462b      	mov	r3, r5
 8013144:	f7ed f8a0 	bl	8000288 <__aeabi_dsub>
 8013148:	a31b      	add	r3, pc, #108	; (adr r3, 80131b8 <__ieee754_rem_pio2+0x330>)
 801314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801314e:	4604      	mov	r4, r0
 8013150:	460d      	mov	r5, r1
 8013152:	ec51 0b18 	vmov	r0, r1, d8
 8013156:	f7ed fa4f 	bl	80005f8 <__aeabi_dmul>
 801315a:	4622      	mov	r2, r4
 801315c:	462b      	mov	r3, r5
 801315e:	f7ed f893 	bl	8000288 <__aeabi_dsub>
 8013162:	4604      	mov	r4, r0
 8013164:	460d      	mov	r5, r1
 8013166:	e75f      	b.n	8013028 <__ieee754_rem_pio2+0x1a0>
 8013168:	4b1b      	ldr	r3, [pc, #108]	; (80131d8 <__ieee754_rem_pio2+0x350>)
 801316a:	4598      	cmp	r8, r3
 801316c:	dd36      	ble.n	80131dc <__ieee754_rem_pio2+0x354>
 801316e:	ee10 2a10 	vmov	r2, s0
 8013172:	462b      	mov	r3, r5
 8013174:	4620      	mov	r0, r4
 8013176:	4629      	mov	r1, r5
 8013178:	f7ed f886 	bl	8000288 <__aeabi_dsub>
 801317c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013180:	e9ca 0100 	strd	r0, r1, [sl]
 8013184:	e694      	b.n	8012eb0 <__ieee754_rem_pio2+0x28>
 8013186:	bf00      	nop
 8013188:	54400000 	.word	0x54400000
 801318c:	3ff921fb 	.word	0x3ff921fb
 8013190:	1a626331 	.word	0x1a626331
 8013194:	3dd0b461 	.word	0x3dd0b461
 8013198:	1a600000 	.word	0x1a600000
 801319c:	3dd0b461 	.word	0x3dd0b461
 80131a0:	2e037073 	.word	0x2e037073
 80131a4:	3ba3198a 	.word	0x3ba3198a
 80131a8:	6dc9c883 	.word	0x6dc9c883
 80131ac:	3fe45f30 	.word	0x3fe45f30
 80131b0:	2e000000 	.word	0x2e000000
 80131b4:	3ba3198a 	.word	0x3ba3198a
 80131b8:	252049c1 	.word	0x252049c1
 80131bc:	397b839a 	.word	0x397b839a
 80131c0:	3fe921fb 	.word	0x3fe921fb
 80131c4:	4002d97b 	.word	0x4002d97b
 80131c8:	3ff921fb 	.word	0x3ff921fb
 80131cc:	413921fb 	.word	0x413921fb
 80131d0:	3fe00000 	.word	0x3fe00000
 80131d4:	08014394 	.word	0x08014394
 80131d8:	7fefffff 	.word	0x7fefffff
 80131dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80131e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80131e4:	ee10 0a10 	vmov	r0, s0
 80131e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80131ec:	ee10 6a10 	vmov	r6, s0
 80131f0:	460f      	mov	r7, r1
 80131f2:	f7ed fcb1 	bl	8000b58 <__aeabi_d2iz>
 80131f6:	f7ed f995 	bl	8000524 <__aeabi_i2d>
 80131fa:	4602      	mov	r2, r0
 80131fc:	460b      	mov	r3, r1
 80131fe:	4630      	mov	r0, r6
 8013200:	4639      	mov	r1, r7
 8013202:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013206:	f7ed f83f 	bl	8000288 <__aeabi_dsub>
 801320a:	4b23      	ldr	r3, [pc, #140]	; (8013298 <__ieee754_rem_pio2+0x410>)
 801320c:	2200      	movs	r2, #0
 801320e:	f7ed f9f3 	bl	80005f8 <__aeabi_dmul>
 8013212:	460f      	mov	r7, r1
 8013214:	4606      	mov	r6, r0
 8013216:	f7ed fc9f 	bl	8000b58 <__aeabi_d2iz>
 801321a:	f7ed f983 	bl	8000524 <__aeabi_i2d>
 801321e:	4602      	mov	r2, r0
 8013220:	460b      	mov	r3, r1
 8013222:	4630      	mov	r0, r6
 8013224:	4639      	mov	r1, r7
 8013226:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801322a:	f7ed f82d 	bl	8000288 <__aeabi_dsub>
 801322e:	4b1a      	ldr	r3, [pc, #104]	; (8013298 <__ieee754_rem_pio2+0x410>)
 8013230:	2200      	movs	r2, #0
 8013232:	f7ed f9e1 	bl	80005f8 <__aeabi_dmul>
 8013236:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801323a:	ad04      	add	r5, sp, #16
 801323c:	f04f 0803 	mov.w	r8, #3
 8013240:	46a9      	mov	r9, r5
 8013242:	2600      	movs	r6, #0
 8013244:	2700      	movs	r7, #0
 8013246:	4632      	mov	r2, r6
 8013248:	463b      	mov	r3, r7
 801324a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801324e:	46c3      	mov	fp, r8
 8013250:	3d08      	subs	r5, #8
 8013252:	f108 38ff 	add.w	r8, r8, #4294967295
 8013256:	f7ed fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 801325a:	2800      	cmp	r0, #0
 801325c:	d1f3      	bne.n	8013246 <__ieee754_rem_pio2+0x3be>
 801325e:	4b0f      	ldr	r3, [pc, #60]	; (801329c <__ieee754_rem_pio2+0x414>)
 8013260:	9301      	str	r3, [sp, #4]
 8013262:	2302      	movs	r3, #2
 8013264:	9300      	str	r3, [sp, #0]
 8013266:	4622      	mov	r2, r4
 8013268:	465b      	mov	r3, fp
 801326a:	4651      	mov	r1, sl
 801326c:	4648      	mov	r0, r9
 801326e:	f000 f8df 	bl	8013430 <__kernel_rem_pio2>
 8013272:	9b02      	ldr	r3, [sp, #8]
 8013274:	2b00      	cmp	r3, #0
 8013276:	4683      	mov	fp, r0
 8013278:	f6bf ae46 	bge.w	8012f08 <__ieee754_rem_pio2+0x80>
 801327c:	e9da 2100 	ldrd	r2, r1, [sl]
 8013280:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013284:	e9ca 2300 	strd	r2, r3, [sl]
 8013288:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801328c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013290:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8013294:	e73a      	b.n	801310c <__ieee754_rem_pio2+0x284>
 8013296:	bf00      	nop
 8013298:	41700000 	.word	0x41700000
 801329c:	08014414 	.word	0x08014414

080132a0 <__kernel_cos>:
 80132a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a4:	ec57 6b10 	vmov	r6, r7, d0
 80132a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80132ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80132b0:	ed8d 1b00 	vstr	d1, [sp]
 80132b4:	da07      	bge.n	80132c6 <__kernel_cos+0x26>
 80132b6:	ee10 0a10 	vmov	r0, s0
 80132ba:	4639      	mov	r1, r7
 80132bc:	f7ed fc4c 	bl	8000b58 <__aeabi_d2iz>
 80132c0:	2800      	cmp	r0, #0
 80132c2:	f000 8088 	beq.w	80133d6 <__kernel_cos+0x136>
 80132c6:	4632      	mov	r2, r6
 80132c8:	463b      	mov	r3, r7
 80132ca:	4630      	mov	r0, r6
 80132cc:	4639      	mov	r1, r7
 80132ce:	f7ed f993 	bl	80005f8 <__aeabi_dmul>
 80132d2:	4b51      	ldr	r3, [pc, #324]	; (8013418 <__kernel_cos+0x178>)
 80132d4:	2200      	movs	r2, #0
 80132d6:	4604      	mov	r4, r0
 80132d8:	460d      	mov	r5, r1
 80132da:	f7ed f98d 	bl	80005f8 <__aeabi_dmul>
 80132de:	a340      	add	r3, pc, #256	; (adr r3, 80133e0 <__kernel_cos+0x140>)
 80132e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e4:	4682      	mov	sl, r0
 80132e6:	468b      	mov	fp, r1
 80132e8:	4620      	mov	r0, r4
 80132ea:	4629      	mov	r1, r5
 80132ec:	f7ed f984 	bl	80005f8 <__aeabi_dmul>
 80132f0:	a33d      	add	r3, pc, #244	; (adr r3, 80133e8 <__kernel_cos+0x148>)
 80132f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f6:	f7ec ffc9 	bl	800028c <__adddf3>
 80132fa:	4622      	mov	r2, r4
 80132fc:	462b      	mov	r3, r5
 80132fe:	f7ed f97b 	bl	80005f8 <__aeabi_dmul>
 8013302:	a33b      	add	r3, pc, #236	; (adr r3, 80133f0 <__kernel_cos+0x150>)
 8013304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013308:	f7ec ffbe 	bl	8000288 <__aeabi_dsub>
 801330c:	4622      	mov	r2, r4
 801330e:	462b      	mov	r3, r5
 8013310:	f7ed f972 	bl	80005f8 <__aeabi_dmul>
 8013314:	a338      	add	r3, pc, #224	; (adr r3, 80133f8 <__kernel_cos+0x158>)
 8013316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801331a:	f7ec ffb7 	bl	800028c <__adddf3>
 801331e:	4622      	mov	r2, r4
 8013320:	462b      	mov	r3, r5
 8013322:	f7ed f969 	bl	80005f8 <__aeabi_dmul>
 8013326:	a336      	add	r3, pc, #216	; (adr r3, 8013400 <__kernel_cos+0x160>)
 8013328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332c:	f7ec ffac 	bl	8000288 <__aeabi_dsub>
 8013330:	4622      	mov	r2, r4
 8013332:	462b      	mov	r3, r5
 8013334:	f7ed f960 	bl	80005f8 <__aeabi_dmul>
 8013338:	a333      	add	r3, pc, #204	; (adr r3, 8013408 <__kernel_cos+0x168>)
 801333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333e:	f7ec ffa5 	bl	800028c <__adddf3>
 8013342:	4622      	mov	r2, r4
 8013344:	462b      	mov	r3, r5
 8013346:	f7ed f957 	bl	80005f8 <__aeabi_dmul>
 801334a:	4622      	mov	r2, r4
 801334c:	462b      	mov	r3, r5
 801334e:	f7ed f953 	bl	80005f8 <__aeabi_dmul>
 8013352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013356:	4604      	mov	r4, r0
 8013358:	460d      	mov	r5, r1
 801335a:	4630      	mov	r0, r6
 801335c:	4639      	mov	r1, r7
 801335e:	f7ed f94b 	bl	80005f8 <__aeabi_dmul>
 8013362:	460b      	mov	r3, r1
 8013364:	4602      	mov	r2, r0
 8013366:	4629      	mov	r1, r5
 8013368:	4620      	mov	r0, r4
 801336a:	f7ec ff8d 	bl	8000288 <__aeabi_dsub>
 801336e:	4b2b      	ldr	r3, [pc, #172]	; (801341c <__kernel_cos+0x17c>)
 8013370:	4598      	cmp	r8, r3
 8013372:	4606      	mov	r6, r0
 8013374:	460f      	mov	r7, r1
 8013376:	dc10      	bgt.n	801339a <__kernel_cos+0xfa>
 8013378:	4602      	mov	r2, r0
 801337a:	460b      	mov	r3, r1
 801337c:	4650      	mov	r0, sl
 801337e:	4659      	mov	r1, fp
 8013380:	f7ec ff82 	bl	8000288 <__aeabi_dsub>
 8013384:	460b      	mov	r3, r1
 8013386:	4926      	ldr	r1, [pc, #152]	; (8013420 <__kernel_cos+0x180>)
 8013388:	4602      	mov	r2, r0
 801338a:	2000      	movs	r0, #0
 801338c:	f7ec ff7c 	bl	8000288 <__aeabi_dsub>
 8013390:	ec41 0b10 	vmov	d0, r0, r1
 8013394:	b003      	add	sp, #12
 8013396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801339a:	4b22      	ldr	r3, [pc, #136]	; (8013424 <__kernel_cos+0x184>)
 801339c:	4920      	ldr	r1, [pc, #128]	; (8013420 <__kernel_cos+0x180>)
 801339e:	4598      	cmp	r8, r3
 80133a0:	bfcc      	ite	gt
 80133a2:	4d21      	ldrgt	r5, [pc, #132]	; (8013428 <__kernel_cos+0x188>)
 80133a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80133a8:	2400      	movs	r4, #0
 80133aa:	4622      	mov	r2, r4
 80133ac:	462b      	mov	r3, r5
 80133ae:	2000      	movs	r0, #0
 80133b0:	f7ec ff6a 	bl	8000288 <__aeabi_dsub>
 80133b4:	4622      	mov	r2, r4
 80133b6:	4680      	mov	r8, r0
 80133b8:	4689      	mov	r9, r1
 80133ba:	462b      	mov	r3, r5
 80133bc:	4650      	mov	r0, sl
 80133be:	4659      	mov	r1, fp
 80133c0:	f7ec ff62 	bl	8000288 <__aeabi_dsub>
 80133c4:	4632      	mov	r2, r6
 80133c6:	463b      	mov	r3, r7
 80133c8:	f7ec ff5e 	bl	8000288 <__aeabi_dsub>
 80133cc:	4602      	mov	r2, r0
 80133ce:	460b      	mov	r3, r1
 80133d0:	4640      	mov	r0, r8
 80133d2:	4649      	mov	r1, r9
 80133d4:	e7da      	b.n	801338c <__kernel_cos+0xec>
 80133d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013410 <__kernel_cos+0x170>
 80133da:	e7db      	b.n	8013394 <__kernel_cos+0xf4>
 80133dc:	f3af 8000 	nop.w
 80133e0:	be8838d4 	.word	0xbe8838d4
 80133e4:	bda8fae9 	.word	0xbda8fae9
 80133e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80133ec:	3e21ee9e 	.word	0x3e21ee9e
 80133f0:	809c52ad 	.word	0x809c52ad
 80133f4:	3e927e4f 	.word	0x3e927e4f
 80133f8:	19cb1590 	.word	0x19cb1590
 80133fc:	3efa01a0 	.word	0x3efa01a0
 8013400:	16c15177 	.word	0x16c15177
 8013404:	3f56c16c 	.word	0x3f56c16c
 8013408:	5555554c 	.word	0x5555554c
 801340c:	3fa55555 	.word	0x3fa55555
 8013410:	00000000 	.word	0x00000000
 8013414:	3ff00000 	.word	0x3ff00000
 8013418:	3fe00000 	.word	0x3fe00000
 801341c:	3fd33332 	.word	0x3fd33332
 8013420:	3ff00000 	.word	0x3ff00000
 8013424:	3fe90000 	.word	0x3fe90000
 8013428:	3fd20000 	.word	0x3fd20000
 801342c:	00000000 	.word	0x00000000

08013430 <__kernel_rem_pio2>:
 8013430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013434:	ed2d 8b02 	vpush	{d8}
 8013438:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801343c:	f112 0f14 	cmn.w	r2, #20
 8013440:	9308      	str	r3, [sp, #32]
 8013442:	9101      	str	r1, [sp, #4]
 8013444:	4bc4      	ldr	r3, [pc, #784]	; (8013758 <__kernel_rem_pio2+0x328>)
 8013446:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013448:	900b      	str	r0, [sp, #44]	; 0x2c
 801344a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801344e:	9302      	str	r3, [sp, #8]
 8013450:	9b08      	ldr	r3, [sp, #32]
 8013452:	f103 33ff 	add.w	r3, r3, #4294967295
 8013456:	bfa8      	it	ge
 8013458:	1ed4      	subge	r4, r2, #3
 801345a:	9306      	str	r3, [sp, #24]
 801345c:	bfb2      	itee	lt
 801345e:	2400      	movlt	r4, #0
 8013460:	2318      	movge	r3, #24
 8013462:	fb94 f4f3 	sdivge	r4, r4, r3
 8013466:	f06f 0317 	mvn.w	r3, #23
 801346a:	fb04 3303 	mla	r3, r4, r3, r3
 801346e:	eb03 0a02 	add.w	sl, r3, r2
 8013472:	9b02      	ldr	r3, [sp, #8]
 8013474:	9a06      	ldr	r2, [sp, #24]
 8013476:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8013748 <__kernel_rem_pio2+0x318>
 801347a:	eb03 0802 	add.w	r8, r3, r2
 801347e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013480:	1aa7      	subs	r7, r4, r2
 8013482:	ae22      	add	r6, sp, #136	; 0x88
 8013484:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013488:	2500      	movs	r5, #0
 801348a:	4545      	cmp	r5, r8
 801348c:	dd13      	ble.n	80134b6 <__kernel_rem_pio2+0x86>
 801348e:	9b08      	ldr	r3, [sp, #32]
 8013490:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8013748 <__kernel_rem_pio2+0x318>
 8013494:	aa22      	add	r2, sp, #136	; 0x88
 8013496:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801349a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801349e:	f04f 0800 	mov.w	r8, #0
 80134a2:	9b02      	ldr	r3, [sp, #8]
 80134a4:	4598      	cmp	r8, r3
 80134a6:	dc2f      	bgt.n	8013508 <__kernel_rem_pio2+0xd8>
 80134a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80134ac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80134b0:	462f      	mov	r7, r5
 80134b2:	2600      	movs	r6, #0
 80134b4:	e01b      	b.n	80134ee <__kernel_rem_pio2+0xbe>
 80134b6:	42ef      	cmn	r7, r5
 80134b8:	d407      	bmi.n	80134ca <__kernel_rem_pio2+0x9a>
 80134ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80134be:	f7ed f831 	bl	8000524 <__aeabi_i2d>
 80134c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80134c6:	3501      	adds	r5, #1
 80134c8:	e7df      	b.n	801348a <__kernel_rem_pio2+0x5a>
 80134ca:	ec51 0b18 	vmov	r0, r1, d8
 80134ce:	e7f8      	b.n	80134c2 <__kernel_rem_pio2+0x92>
 80134d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80134d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80134d8:	f7ed f88e 	bl	80005f8 <__aeabi_dmul>
 80134dc:	4602      	mov	r2, r0
 80134de:	460b      	mov	r3, r1
 80134e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80134e4:	f7ec fed2 	bl	800028c <__adddf3>
 80134e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80134ec:	3601      	adds	r6, #1
 80134ee:	9b06      	ldr	r3, [sp, #24]
 80134f0:	429e      	cmp	r6, r3
 80134f2:	f1a7 0708 	sub.w	r7, r7, #8
 80134f6:	ddeb      	ble.n	80134d0 <__kernel_rem_pio2+0xa0>
 80134f8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80134fc:	f108 0801 	add.w	r8, r8, #1
 8013500:	ecab 7b02 	vstmia	fp!, {d7}
 8013504:	3508      	adds	r5, #8
 8013506:	e7cc      	b.n	80134a2 <__kernel_rem_pio2+0x72>
 8013508:	9b02      	ldr	r3, [sp, #8]
 801350a:	aa0e      	add	r2, sp, #56	; 0x38
 801350c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013510:	930d      	str	r3, [sp, #52]	; 0x34
 8013512:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013514:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013518:	9c02      	ldr	r4, [sp, #8]
 801351a:	930c      	str	r3, [sp, #48]	; 0x30
 801351c:	00e3      	lsls	r3, r4, #3
 801351e:	930a      	str	r3, [sp, #40]	; 0x28
 8013520:	ab9a      	add	r3, sp, #616	; 0x268
 8013522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013526:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801352a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801352e:	ab72      	add	r3, sp, #456	; 0x1c8
 8013530:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8013534:	46c3      	mov	fp, r8
 8013536:	46a1      	mov	r9, r4
 8013538:	f1b9 0f00 	cmp.w	r9, #0
 801353c:	f1a5 0508 	sub.w	r5, r5, #8
 8013540:	dc77      	bgt.n	8013632 <__kernel_rem_pio2+0x202>
 8013542:	ec47 6b10 	vmov	d0, r6, r7
 8013546:	4650      	mov	r0, sl
 8013548:	f000 fc0a 	bl	8013d60 <scalbn>
 801354c:	ec57 6b10 	vmov	r6, r7, d0
 8013550:	2200      	movs	r2, #0
 8013552:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013556:	ee10 0a10 	vmov	r0, s0
 801355a:	4639      	mov	r1, r7
 801355c:	f7ed f84c 	bl	80005f8 <__aeabi_dmul>
 8013560:	ec41 0b10 	vmov	d0, r0, r1
 8013564:	f000 fb7c 	bl	8013c60 <floor>
 8013568:	4b7c      	ldr	r3, [pc, #496]	; (801375c <__kernel_rem_pio2+0x32c>)
 801356a:	ec51 0b10 	vmov	r0, r1, d0
 801356e:	2200      	movs	r2, #0
 8013570:	f7ed f842 	bl	80005f8 <__aeabi_dmul>
 8013574:	4602      	mov	r2, r0
 8013576:	460b      	mov	r3, r1
 8013578:	4630      	mov	r0, r6
 801357a:	4639      	mov	r1, r7
 801357c:	f7ec fe84 	bl	8000288 <__aeabi_dsub>
 8013580:	460f      	mov	r7, r1
 8013582:	4606      	mov	r6, r0
 8013584:	f7ed fae8 	bl	8000b58 <__aeabi_d2iz>
 8013588:	9004      	str	r0, [sp, #16]
 801358a:	f7ec ffcb 	bl	8000524 <__aeabi_i2d>
 801358e:	4602      	mov	r2, r0
 8013590:	460b      	mov	r3, r1
 8013592:	4630      	mov	r0, r6
 8013594:	4639      	mov	r1, r7
 8013596:	f7ec fe77 	bl	8000288 <__aeabi_dsub>
 801359a:	f1ba 0f00 	cmp.w	sl, #0
 801359e:	4606      	mov	r6, r0
 80135a0:	460f      	mov	r7, r1
 80135a2:	dd6d      	ble.n	8013680 <__kernel_rem_pio2+0x250>
 80135a4:	1e62      	subs	r2, r4, #1
 80135a6:	ab0e      	add	r3, sp, #56	; 0x38
 80135a8:	9d04      	ldr	r5, [sp, #16]
 80135aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80135ae:	f1ca 0118 	rsb	r1, sl, #24
 80135b2:	fa40 f301 	asr.w	r3, r0, r1
 80135b6:	441d      	add	r5, r3
 80135b8:	408b      	lsls	r3, r1
 80135ba:	1ac0      	subs	r0, r0, r3
 80135bc:	ab0e      	add	r3, sp, #56	; 0x38
 80135be:	9504      	str	r5, [sp, #16]
 80135c0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80135c4:	f1ca 0317 	rsb	r3, sl, #23
 80135c8:	fa40 fb03 	asr.w	fp, r0, r3
 80135cc:	f1bb 0f00 	cmp.w	fp, #0
 80135d0:	dd65      	ble.n	801369e <__kernel_rem_pio2+0x26e>
 80135d2:	9b04      	ldr	r3, [sp, #16]
 80135d4:	2200      	movs	r2, #0
 80135d6:	3301      	adds	r3, #1
 80135d8:	9304      	str	r3, [sp, #16]
 80135da:	4615      	mov	r5, r2
 80135dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80135e0:	4294      	cmp	r4, r2
 80135e2:	f300 809c 	bgt.w	801371e <__kernel_rem_pio2+0x2ee>
 80135e6:	f1ba 0f00 	cmp.w	sl, #0
 80135ea:	dd07      	ble.n	80135fc <__kernel_rem_pio2+0x1cc>
 80135ec:	f1ba 0f01 	cmp.w	sl, #1
 80135f0:	f000 80c0 	beq.w	8013774 <__kernel_rem_pio2+0x344>
 80135f4:	f1ba 0f02 	cmp.w	sl, #2
 80135f8:	f000 80c6 	beq.w	8013788 <__kernel_rem_pio2+0x358>
 80135fc:	f1bb 0f02 	cmp.w	fp, #2
 8013600:	d14d      	bne.n	801369e <__kernel_rem_pio2+0x26e>
 8013602:	4632      	mov	r2, r6
 8013604:	463b      	mov	r3, r7
 8013606:	4956      	ldr	r1, [pc, #344]	; (8013760 <__kernel_rem_pio2+0x330>)
 8013608:	2000      	movs	r0, #0
 801360a:	f7ec fe3d 	bl	8000288 <__aeabi_dsub>
 801360e:	4606      	mov	r6, r0
 8013610:	460f      	mov	r7, r1
 8013612:	2d00      	cmp	r5, #0
 8013614:	d043      	beq.n	801369e <__kernel_rem_pio2+0x26e>
 8013616:	4650      	mov	r0, sl
 8013618:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8013750 <__kernel_rem_pio2+0x320>
 801361c:	f000 fba0 	bl	8013d60 <scalbn>
 8013620:	4630      	mov	r0, r6
 8013622:	4639      	mov	r1, r7
 8013624:	ec53 2b10 	vmov	r2, r3, d0
 8013628:	f7ec fe2e 	bl	8000288 <__aeabi_dsub>
 801362c:	4606      	mov	r6, r0
 801362e:	460f      	mov	r7, r1
 8013630:	e035      	b.n	801369e <__kernel_rem_pio2+0x26e>
 8013632:	4b4c      	ldr	r3, [pc, #304]	; (8013764 <__kernel_rem_pio2+0x334>)
 8013634:	2200      	movs	r2, #0
 8013636:	4630      	mov	r0, r6
 8013638:	4639      	mov	r1, r7
 801363a:	f7ec ffdd 	bl	80005f8 <__aeabi_dmul>
 801363e:	f7ed fa8b 	bl	8000b58 <__aeabi_d2iz>
 8013642:	f7ec ff6f 	bl	8000524 <__aeabi_i2d>
 8013646:	4602      	mov	r2, r0
 8013648:	460b      	mov	r3, r1
 801364a:	ec43 2b18 	vmov	d8, r2, r3
 801364e:	4b46      	ldr	r3, [pc, #280]	; (8013768 <__kernel_rem_pio2+0x338>)
 8013650:	2200      	movs	r2, #0
 8013652:	f7ec ffd1 	bl	80005f8 <__aeabi_dmul>
 8013656:	4602      	mov	r2, r0
 8013658:	460b      	mov	r3, r1
 801365a:	4630      	mov	r0, r6
 801365c:	4639      	mov	r1, r7
 801365e:	f7ec fe13 	bl	8000288 <__aeabi_dsub>
 8013662:	f7ed fa79 	bl	8000b58 <__aeabi_d2iz>
 8013666:	e9d5 2300 	ldrd	r2, r3, [r5]
 801366a:	f84b 0b04 	str.w	r0, [fp], #4
 801366e:	ec51 0b18 	vmov	r0, r1, d8
 8013672:	f7ec fe0b 	bl	800028c <__adddf3>
 8013676:	f109 39ff 	add.w	r9, r9, #4294967295
 801367a:	4606      	mov	r6, r0
 801367c:	460f      	mov	r7, r1
 801367e:	e75b      	b.n	8013538 <__kernel_rem_pio2+0x108>
 8013680:	d106      	bne.n	8013690 <__kernel_rem_pio2+0x260>
 8013682:	1e63      	subs	r3, r4, #1
 8013684:	aa0e      	add	r2, sp, #56	; 0x38
 8013686:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801368a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801368e:	e79d      	b.n	80135cc <__kernel_rem_pio2+0x19c>
 8013690:	4b36      	ldr	r3, [pc, #216]	; (801376c <__kernel_rem_pio2+0x33c>)
 8013692:	2200      	movs	r2, #0
 8013694:	f7ed fa36 	bl	8000b04 <__aeabi_dcmpge>
 8013698:	2800      	cmp	r0, #0
 801369a:	d13d      	bne.n	8013718 <__kernel_rem_pio2+0x2e8>
 801369c:	4683      	mov	fp, r0
 801369e:	2200      	movs	r2, #0
 80136a0:	2300      	movs	r3, #0
 80136a2:	4630      	mov	r0, r6
 80136a4:	4639      	mov	r1, r7
 80136a6:	f7ed fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80136aa:	2800      	cmp	r0, #0
 80136ac:	f000 80c0 	beq.w	8013830 <__kernel_rem_pio2+0x400>
 80136b0:	1e65      	subs	r5, r4, #1
 80136b2:	462b      	mov	r3, r5
 80136b4:	2200      	movs	r2, #0
 80136b6:	9902      	ldr	r1, [sp, #8]
 80136b8:	428b      	cmp	r3, r1
 80136ba:	da6c      	bge.n	8013796 <__kernel_rem_pio2+0x366>
 80136bc:	2a00      	cmp	r2, #0
 80136be:	f000 8089 	beq.w	80137d4 <__kernel_rem_pio2+0x3a4>
 80136c2:	ab0e      	add	r3, sp, #56	; 0x38
 80136c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80136c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	f000 80ad 	beq.w	801382c <__kernel_rem_pio2+0x3fc>
 80136d2:	4650      	mov	r0, sl
 80136d4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8013750 <__kernel_rem_pio2+0x320>
 80136d8:	f000 fb42 	bl	8013d60 <scalbn>
 80136dc:	ab9a      	add	r3, sp, #616	; 0x268
 80136de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80136e2:	ec57 6b10 	vmov	r6, r7, d0
 80136e6:	00ec      	lsls	r4, r5, #3
 80136e8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80136ec:	46aa      	mov	sl, r5
 80136ee:	f1ba 0f00 	cmp.w	sl, #0
 80136f2:	f280 80d6 	bge.w	80138a2 <__kernel_rem_pio2+0x472>
 80136f6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8013748 <__kernel_rem_pio2+0x318>
 80136fa:	462e      	mov	r6, r5
 80136fc:	2e00      	cmp	r6, #0
 80136fe:	f2c0 8104 	blt.w	801390a <__kernel_rem_pio2+0x4da>
 8013702:	ab72      	add	r3, sp, #456	; 0x1c8
 8013704:	ed8d 8b06 	vstr	d8, [sp, #24]
 8013708:	f8df a064 	ldr.w	sl, [pc, #100]	; 8013770 <__kernel_rem_pio2+0x340>
 801370c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8013710:	f04f 0800 	mov.w	r8, #0
 8013714:	1baf      	subs	r7, r5, r6
 8013716:	e0ea      	b.n	80138ee <__kernel_rem_pio2+0x4be>
 8013718:	f04f 0b02 	mov.w	fp, #2
 801371c:	e759      	b.n	80135d2 <__kernel_rem_pio2+0x1a2>
 801371e:	f8d8 3000 	ldr.w	r3, [r8]
 8013722:	b955      	cbnz	r5, 801373a <__kernel_rem_pio2+0x30a>
 8013724:	b123      	cbz	r3, 8013730 <__kernel_rem_pio2+0x300>
 8013726:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801372a:	f8c8 3000 	str.w	r3, [r8]
 801372e:	2301      	movs	r3, #1
 8013730:	3201      	adds	r2, #1
 8013732:	f108 0804 	add.w	r8, r8, #4
 8013736:	461d      	mov	r5, r3
 8013738:	e752      	b.n	80135e0 <__kernel_rem_pio2+0x1b0>
 801373a:	1acb      	subs	r3, r1, r3
 801373c:	f8c8 3000 	str.w	r3, [r8]
 8013740:	462b      	mov	r3, r5
 8013742:	e7f5      	b.n	8013730 <__kernel_rem_pio2+0x300>
 8013744:	f3af 8000 	nop.w
	...
 8013754:	3ff00000 	.word	0x3ff00000
 8013758:	08014560 	.word	0x08014560
 801375c:	40200000 	.word	0x40200000
 8013760:	3ff00000 	.word	0x3ff00000
 8013764:	3e700000 	.word	0x3e700000
 8013768:	41700000 	.word	0x41700000
 801376c:	3fe00000 	.word	0x3fe00000
 8013770:	08014520 	.word	0x08014520
 8013774:	1e62      	subs	r2, r4, #1
 8013776:	ab0e      	add	r3, sp, #56	; 0x38
 8013778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801377c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013780:	a90e      	add	r1, sp, #56	; 0x38
 8013782:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013786:	e739      	b.n	80135fc <__kernel_rem_pio2+0x1cc>
 8013788:	1e62      	subs	r2, r4, #1
 801378a:	ab0e      	add	r3, sp, #56	; 0x38
 801378c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013790:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013794:	e7f4      	b.n	8013780 <__kernel_rem_pio2+0x350>
 8013796:	a90e      	add	r1, sp, #56	; 0x38
 8013798:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801379c:	3b01      	subs	r3, #1
 801379e:	430a      	orrs	r2, r1
 80137a0:	e789      	b.n	80136b6 <__kernel_rem_pio2+0x286>
 80137a2:	3301      	adds	r3, #1
 80137a4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80137a8:	2900      	cmp	r1, #0
 80137aa:	d0fa      	beq.n	80137a2 <__kernel_rem_pio2+0x372>
 80137ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137ae:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80137b2:	446a      	add	r2, sp
 80137b4:	3a98      	subs	r2, #152	; 0x98
 80137b6:	920a      	str	r2, [sp, #40]	; 0x28
 80137b8:	9a08      	ldr	r2, [sp, #32]
 80137ba:	18e3      	adds	r3, r4, r3
 80137bc:	18a5      	adds	r5, r4, r2
 80137be:	aa22      	add	r2, sp, #136	; 0x88
 80137c0:	f104 0801 	add.w	r8, r4, #1
 80137c4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80137c8:	9304      	str	r3, [sp, #16]
 80137ca:	9b04      	ldr	r3, [sp, #16]
 80137cc:	4543      	cmp	r3, r8
 80137ce:	da04      	bge.n	80137da <__kernel_rem_pio2+0x3aa>
 80137d0:	461c      	mov	r4, r3
 80137d2:	e6a3      	b.n	801351c <__kernel_rem_pio2+0xec>
 80137d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80137d6:	2301      	movs	r3, #1
 80137d8:	e7e4      	b.n	80137a4 <__kernel_rem_pio2+0x374>
 80137da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137dc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80137e0:	f7ec fea0 	bl	8000524 <__aeabi_i2d>
 80137e4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80137e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137ea:	46ab      	mov	fp, r5
 80137ec:	461c      	mov	r4, r3
 80137ee:	f04f 0900 	mov.w	r9, #0
 80137f2:	2600      	movs	r6, #0
 80137f4:	2700      	movs	r7, #0
 80137f6:	9b06      	ldr	r3, [sp, #24]
 80137f8:	4599      	cmp	r9, r3
 80137fa:	dd06      	ble.n	801380a <__kernel_rem_pio2+0x3da>
 80137fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137fe:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013802:	f108 0801 	add.w	r8, r8, #1
 8013806:	930a      	str	r3, [sp, #40]	; 0x28
 8013808:	e7df      	b.n	80137ca <__kernel_rem_pio2+0x39a>
 801380a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801380e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013812:	f7ec fef1 	bl	80005f8 <__aeabi_dmul>
 8013816:	4602      	mov	r2, r0
 8013818:	460b      	mov	r3, r1
 801381a:	4630      	mov	r0, r6
 801381c:	4639      	mov	r1, r7
 801381e:	f7ec fd35 	bl	800028c <__adddf3>
 8013822:	f109 0901 	add.w	r9, r9, #1
 8013826:	4606      	mov	r6, r0
 8013828:	460f      	mov	r7, r1
 801382a:	e7e4      	b.n	80137f6 <__kernel_rem_pio2+0x3c6>
 801382c:	3d01      	subs	r5, #1
 801382e:	e748      	b.n	80136c2 <__kernel_rem_pio2+0x292>
 8013830:	ec47 6b10 	vmov	d0, r6, r7
 8013834:	f1ca 0000 	rsb	r0, sl, #0
 8013838:	f000 fa92 	bl	8013d60 <scalbn>
 801383c:	ec57 6b10 	vmov	r6, r7, d0
 8013840:	4ba0      	ldr	r3, [pc, #640]	; (8013ac4 <__kernel_rem_pio2+0x694>)
 8013842:	ee10 0a10 	vmov	r0, s0
 8013846:	2200      	movs	r2, #0
 8013848:	4639      	mov	r1, r7
 801384a:	f7ed f95b 	bl	8000b04 <__aeabi_dcmpge>
 801384e:	b1f8      	cbz	r0, 8013890 <__kernel_rem_pio2+0x460>
 8013850:	4b9d      	ldr	r3, [pc, #628]	; (8013ac8 <__kernel_rem_pio2+0x698>)
 8013852:	2200      	movs	r2, #0
 8013854:	4630      	mov	r0, r6
 8013856:	4639      	mov	r1, r7
 8013858:	f7ec fece 	bl	80005f8 <__aeabi_dmul>
 801385c:	f7ed f97c 	bl	8000b58 <__aeabi_d2iz>
 8013860:	4680      	mov	r8, r0
 8013862:	f7ec fe5f 	bl	8000524 <__aeabi_i2d>
 8013866:	4b97      	ldr	r3, [pc, #604]	; (8013ac4 <__kernel_rem_pio2+0x694>)
 8013868:	2200      	movs	r2, #0
 801386a:	f7ec fec5 	bl	80005f8 <__aeabi_dmul>
 801386e:	460b      	mov	r3, r1
 8013870:	4602      	mov	r2, r0
 8013872:	4639      	mov	r1, r7
 8013874:	4630      	mov	r0, r6
 8013876:	f7ec fd07 	bl	8000288 <__aeabi_dsub>
 801387a:	f7ed f96d 	bl	8000b58 <__aeabi_d2iz>
 801387e:	1c65      	adds	r5, r4, #1
 8013880:	ab0e      	add	r3, sp, #56	; 0x38
 8013882:	f10a 0a18 	add.w	sl, sl, #24
 8013886:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801388a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801388e:	e720      	b.n	80136d2 <__kernel_rem_pio2+0x2a2>
 8013890:	4630      	mov	r0, r6
 8013892:	4639      	mov	r1, r7
 8013894:	f7ed f960 	bl	8000b58 <__aeabi_d2iz>
 8013898:	ab0e      	add	r3, sp, #56	; 0x38
 801389a:	4625      	mov	r5, r4
 801389c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80138a0:	e717      	b.n	80136d2 <__kernel_rem_pio2+0x2a2>
 80138a2:	ab0e      	add	r3, sp, #56	; 0x38
 80138a4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80138a8:	f7ec fe3c 	bl	8000524 <__aeabi_i2d>
 80138ac:	4632      	mov	r2, r6
 80138ae:	463b      	mov	r3, r7
 80138b0:	f7ec fea2 	bl	80005f8 <__aeabi_dmul>
 80138b4:	4b84      	ldr	r3, [pc, #528]	; (8013ac8 <__kernel_rem_pio2+0x698>)
 80138b6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80138ba:	2200      	movs	r2, #0
 80138bc:	4630      	mov	r0, r6
 80138be:	4639      	mov	r1, r7
 80138c0:	f7ec fe9a 	bl	80005f8 <__aeabi_dmul>
 80138c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80138c8:	4606      	mov	r6, r0
 80138ca:	460f      	mov	r7, r1
 80138cc:	e70f      	b.n	80136ee <__kernel_rem_pio2+0x2be>
 80138ce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80138d2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80138d6:	f7ec fe8f 	bl	80005f8 <__aeabi_dmul>
 80138da:	4602      	mov	r2, r0
 80138dc:	460b      	mov	r3, r1
 80138de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80138e2:	f7ec fcd3 	bl	800028c <__adddf3>
 80138e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80138ea:	f108 0801 	add.w	r8, r8, #1
 80138ee:	9b02      	ldr	r3, [sp, #8]
 80138f0:	4598      	cmp	r8, r3
 80138f2:	dc01      	bgt.n	80138f8 <__kernel_rem_pio2+0x4c8>
 80138f4:	45b8      	cmp	r8, r7
 80138f6:	ddea      	ble.n	80138ce <__kernel_rem_pio2+0x49e>
 80138f8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80138fc:	ab4a      	add	r3, sp, #296	; 0x128
 80138fe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013902:	ed87 7b00 	vstr	d7, [r7]
 8013906:	3e01      	subs	r6, #1
 8013908:	e6f8      	b.n	80136fc <__kernel_rem_pio2+0x2cc>
 801390a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801390c:	2b02      	cmp	r3, #2
 801390e:	dc0b      	bgt.n	8013928 <__kernel_rem_pio2+0x4f8>
 8013910:	2b00      	cmp	r3, #0
 8013912:	dc35      	bgt.n	8013980 <__kernel_rem_pio2+0x550>
 8013914:	d059      	beq.n	80139ca <__kernel_rem_pio2+0x59a>
 8013916:	9b04      	ldr	r3, [sp, #16]
 8013918:	f003 0007 	and.w	r0, r3, #7
 801391c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013920:	ecbd 8b02 	vpop	{d8}
 8013924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013928:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801392a:	2b03      	cmp	r3, #3
 801392c:	d1f3      	bne.n	8013916 <__kernel_rem_pio2+0x4e6>
 801392e:	ab4a      	add	r3, sp, #296	; 0x128
 8013930:	4423      	add	r3, r4
 8013932:	9306      	str	r3, [sp, #24]
 8013934:	461c      	mov	r4, r3
 8013936:	469a      	mov	sl, r3
 8013938:	9502      	str	r5, [sp, #8]
 801393a:	9b02      	ldr	r3, [sp, #8]
 801393c:	2b00      	cmp	r3, #0
 801393e:	f1aa 0a08 	sub.w	sl, sl, #8
 8013942:	dc6b      	bgt.n	8013a1c <__kernel_rem_pio2+0x5ec>
 8013944:	46aa      	mov	sl, r5
 8013946:	f1ba 0f01 	cmp.w	sl, #1
 801394a:	f1a4 0408 	sub.w	r4, r4, #8
 801394e:	f300 8085 	bgt.w	8013a5c <__kernel_rem_pio2+0x62c>
 8013952:	9c06      	ldr	r4, [sp, #24]
 8013954:	2000      	movs	r0, #0
 8013956:	3408      	adds	r4, #8
 8013958:	2100      	movs	r1, #0
 801395a:	2d01      	cmp	r5, #1
 801395c:	f300 809d 	bgt.w	8013a9a <__kernel_rem_pio2+0x66a>
 8013960:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013964:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8013968:	f1bb 0f00 	cmp.w	fp, #0
 801396c:	f040 809b 	bne.w	8013aa6 <__kernel_rem_pio2+0x676>
 8013970:	9b01      	ldr	r3, [sp, #4]
 8013972:	e9c3 5600 	strd	r5, r6, [r3]
 8013976:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801397a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801397e:	e7ca      	b.n	8013916 <__kernel_rem_pio2+0x4e6>
 8013980:	3408      	adds	r4, #8
 8013982:	ab4a      	add	r3, sp, #296	; 0x128
 8013984:	441c      	add	r4, r3
 8013986:	462e      	mov	r6, r5
 8013988:	2000      	movs	r0, #0
 801398a:	2100      	movs	r1, #0
 801398c:	2e00      	cmp	r6, #0
 801398e:	da36      	bge.n	80139fe <__kernel_rem_pio2+0x5ce>
 8013990:	f1bb 0f00 	cmp.w	fp, #0
 8013994:	d039      	beq.n	8013a0a <__kernel_rem_pio2+0x5da>
 8013996:	4602      	mov	r2, r0
 8013998:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801399c:	9c01      	ldr	r4, [sp, #4]
 801399e:	e9c4 2300 	strd	r2, r3, [r4]
 80139a2:	4602      	mov	r2, r0
 80139a4:	460b      	mov	r3, r1
 80139a6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80139aa:	f7ec fc6d 	bl	8000288 <__aeabi_dsub>
 80139ae:	ae4c      	add	r6, sp, #304	; 0x130
 80139b0:	2401      	movs	r4, #1
 80139b2:	42a5      	cmp	r5, r4
 80139b4:	da2c      	bge.n	8013a10 <__kernel_rem_pio2+0x5e0>
 80139b6:	f1bb 0f00 	cmp.w	fp, #0
 80139ba:	d002      	beq.n	80139c2 <__kernel_rem_pio2+0x592>
 80139bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80139c0:	4619      	mov	r1, r3
 80139c2:	9b01      	ldr	r3, [sp, #4]
 80139c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80139c8:	e7a5      	b.n	8013916 <__kernel_rem_pio2+0x4e6>
 80139ca:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80139ce:	eb0d 0403 	add.w	r4, sp, r3
 80139d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80139d6:	2000      	movs	r0, #0
 80139d8:	2100      	movs	r1, #0
 80139da:	2d00      	cmp	r5, #0
 80139dc:	da09      	bge.n	80139f2 <__kernel_rem_pio2+0x5c2>
 80139de:	f1bb 0f00 	cmp.w	fp, #0
 80139e2:	d002      	beq.n	80139ea <__kernel_rem_pio2+0x5ba>
 80139e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80139e8:	4619      	mov	r1, r3
 80139ea:	9b01      	ldr	r3, [sp, #4]
 80139ec:	e9c3 0100 	strd	r0, r1, [r3]
 80139f0:	e791      	b.n	8013916 <__kernel_rem_pio2+0x4e6>
 80139f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80139f6:	f7ec fc49 	bl	800028c <__adddf3>
 80139fa:	3d01      	subs	r5, #1
 80139fc:	e7ed      	b.n	80139da <__kernel_rem_pio2+0x5aa>
 80139fe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013a02:	f7ec fc43 	bl	800028c <__adddf3>
 8013a06:	3e01      	subs	r6, #1
 8013a08:	e7c0      	b.n	801398c <__kernel_rem_pio2+0x55c>
 8013a0a:	4602      	mov	r2, r0
 8013a0c:	460b      	mov	r3, r1
 8013a0e:	e7c5      	b.n	801399c <__kernel_rem_pio2+0x56c>
 8013a10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013a14:	f7ec fc3a 	bl	800028c <__adddf3>
 8013a18:	3401      	adds	r4, #1
 8013a1a:	e7ca      	b.n	80139b2 <__kernel_rem_pio2+0x582>
 8013a1c:	e9da 8900 	ldrd	r8, r9, [sl]
 8013a20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013a24:	9b02      	ldr	r3, [sp, #8]
 8013a26:	3b01      	subs	r3, #1
 8013a28:	9302      	str	r3, [sp, #8]
 8013a2a:	4632      	mov	r2, r6
 8013a2c:	463b      	mov	r3, r7
 8013a2e:	4640      	mov	r0, r8
 8013a30:	4649      	mov	r1, r9
 8013a32:	f7ec fc2b 	bl	800028c <__adddf3>
 8013a36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013a3a:	4602      	mov	r2, r0
 8013a3c:	460b      	mov	r3, r1
 8013a3e:	4640      	mov	r0, r8
 8013a40:	4649      	mov	r1, r9
 8013a42:	f7ec fc21 	bl	8000288 <__aeabi_dsub>
 8013a46:	4632      	mov	r2, r6
 8013a48:	463b      	mov	r3, r7
 8013a4a:	f7ec fc1f 	bl	800028c <__adddf3>
 8013a4e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8013a52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013a56:	ed8a 7b00 	vstr	d7, [sl]
 8013a5a:	e76e      	b.n	801393a <__kernel_rem_pio2+0x50a>
 8013a5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013a60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013a64:	4640      	mov	r0, r8
 8013a66:	4632      	mov	r2, r6
 8013a68:	463b      	mov	r3, r7
 8013a6a:	4649      	mov	r1, r9
 8013a6c:	f7ec fc0e 	bl	800028c <__adddf3>
 8013a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a74:	4602      	mov	r2, r0
 8013a76:	460b      	mov	r3, r1
 8013a78:	4640      	mov	r0, r8
 8013a7a:	4649      	mov	r1, r9
 8013a7c:	f7ec fc04 	bl	8000288 <__aeabi_dsub>
 8013a80:	4632      	mov	r2, r6
 8013a82:	463b      	mov	r3, r7
 8013a84:	f7ec fc02 	bl	800028c <__adddf3>
 8013a88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013a90:	ed84 7b00 	vstr	d7, [r4]
 8013a94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013a98:	e755      	b.n	8013946 <__kernel_rem_pio2+0x516>
 8013a9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013a9e:	f7ec fbf5 	bl	800028c <__adddf3>
 8013aa2:	3d01      	subs	r5, #1
 8013aa4:	e759      	b.n	801395a <__kernel_rem_pio2+0x52a>
 8013aa6:	9b01      	ldr	r3, [sp, #4]
 8013aa8:	9a01      	ldr	r2, [sp, #4]
 8013aaa:	601d      	str	r5, [r3, #0]
 8013aac:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013ab0:	605c      	str	r4, [r3, #4]
 8013ab2:	609f      	str	r7, [r3, #8]
 8013ab4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8013ab8:	60d3      	str	r3, [r2, #12]
 8013aba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013abe:	6110      	str	r0, [r2, #16]
 8013ac0:	6153      	str	r3, [r2, #20]
 8013ac2:	e728      	b.n	8013916 <__kernel_rem_pio2+0x4e6>
 8013ac4:	41700000 	.word	0x41700000
 8013ac8:	3e700000 	.word	0x3e700000
 8013acc:	00000000 	.word	0x00000000

08013ad0 <__kernel_sin>:
 8013ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad4:	ed2d 8b04 	vpush	{d8-d9}
 8013ad8:	eeb0 8a41 	vmov.f32	s16, s2
 8013adc:	eef0 8a61 	vmov.f32	s17, s3
 8013ae0:	ec55 4b10 	vmov	r4, r5, d0
 8013ae4:	b083      	sub	sp, #12
 8013ae6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013aea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013aee:	9001      	str	r0, [sp, #4]
 8013af0:	da06      	bge.n	8013b00 <__kernel_sin+0x30>
 8013af2:	ee10 0a10 	vmov	r0, s0
 8013af6:	4629      	mov	r1, r5
 8013af8:	f7ed f82e 	bl	8000b58 <__aeabi_d2iz>
 8013afc:	2800      	cmp	r0, #0
 8013afe:	d051      	beq.n	8013ba4 <__kernel_sin+0xd4>
 8013b00:	4622      	mov	r2, r4
 8013b02:	462b      	mov	r3, r5
 8013b04:	4620      	mov	r0, r4
 8013b06:	4629      	mov	r1, r5
 8013b08:	f7ec fd76 	bl	80005f8 <__aeabi_dmul>
 8013b0c:	4682      	mov	sl, r0
 8013b0e:	468b      	mov	fp, r1
 8013b10:	4602      	mov	r2, r0
 8013b12:	460b      	mov	r3, r1
 8013b14:	4620      	mov	r0, r4
 8013b16:	4629      	mov	r1, r5
 8013b18:	f7ec fd6e 	bl	80005f8 <__aeabi_dmul>
 8013b1c:	a341      	add	r3, pc, #260	; (adr r3, 8013c24 <__kernel_sin+0x154>)
 8013b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b22:	4680      	mov	r8, r0
 8013b24:	4689      	mov	r9, r1
 8013b26:	4650      	mov	r0, sl
 8013b28:	4659      	mov	r1, fp
 8013b2a:	f7ec fd65 	bl	80005f8 <__aeabi_dmul>
 8013b2e:	a33f      	add	r3, pc, #252	; (adr r3, 8013c2c <__kernel_sin+0x15c>)
 8013b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b34:	f7ec fba8 	bl	8000288 <__aeabi_dsub>
 8013b38:	4652      	mov	r2, sl
 8013b3a:	465b      	mov	r3, fp
 8013b3c:	f7ec fd5c 	bl	80005f8 <__aeabi_dmul>
 8013b40:	a33c      	add	r3, pc, #240	; (adr r3, 8013c34 <__kernel_sin+0x164>)
 8013b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b46:	f7ec fba1 	bl	800028c <__adddf3>
 8013b4a:	4652      	mov	r2, sl
 8013b4c:	465b      	mov	r3, fp
 8013b4e:	f7ec fd53 	bl	80005f8 <__aeabi_dmul>
 8013b52:	a33a      	add	r3, pc, #232	; (adr r3, 8013c3c <__kernel_sin+0x16c>)
 8013b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b58:	f7ec fb96 	bl	8000288 <__aeabi_dsub>
 8013b5c:	4652      	mov	r2, sl
 8013b5e:	465b      	mov	r3, fp
 8013b60:	f7ec fd4a 	bl	80005f8 <__aeabi_dmul>
 8013b64:	a337      	add	r3, pc, #220	; (adr r3, 8013c44 <__kernel_sin+0x174>)
 8013b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b6a:	f7ec fb8f 	bl	800028c <__adddf3>
 8013b6e:	9b01      	ldr	r3, [sp, #4]
 8013b70:	4606      	mov	r6, r0
 8013b72:	460f      	mov	r7, r1
 8013b74:	b9eb      	cbnz	r3, 8013bb2 <__kernel_sin+0xe2>
 8013b76:	4602      	mov	r2, r0
 8013b78:	460b      	mov	r3, r1
 8013b7a:	4650      	mov	r0, sl
 8013b7c:	4659      	mov	r1, fp
 8013b7e:	f7ec fd3b 	bl	80005f8 <__aeabi_dmul>
 8013b82:	a325      	add	r3, pc, #148	; (adr r3, 8013c18 <__kernel_sin+0x148>)
 8013b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b88:	f7ec fb7e 	bl	8000288 <__aeabi_dsub>
 8013b8c:	4642      	mov	r2, r8
 8013b8e:	464b      	mov	r3, r9
 8013b90:	f7ec fd32 	bl	80005f8 <__aeabi_dmul>
 8013b94:	4602      	mov	r2, r0
 8013b96:	460b      	mov	r3, r1
 8013b98:	4620      	mov	r0, r4
 8013b9a:	4629      	mov	r1, r5
 8013b9c:	f7ec fb76 	bl	800028c <__adddf3>
 8013ba0:	4604      	mov	r4, r0
 8013ba2:	460d      	mov	r5, r1
 8013ba4:	ec45 4b10 	vmov	d0, r4, r5
 8013ba8:	b003      	add	sp, #12
 8013baa:	ecbd 8b04 	vpop	{d8-d9}
 8013bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bb2:	4b1b      	ldr	r3, [pc, #108]	; (8013c20 <__kernel_sin+0x150>)
 8013bb4:	ec51 0b18 	vmov	r0, r1, d8
 8013bb8:	2200      	movs	r2, #0
 8013bba:	f7ec fd1d 	bl	80005f8 <__aeabi_dmul>
 8013bbe:	4632      	mov	r2, r6
 8013bc0:	ec41 0b19 	vmov	d9, r0, r1
 8013bc4:	463b      	mov	r3, r7
 8013bc6:	4640      	mov	r0, r8
 8013bc8:	4649      	mov	r1, r9
 8013bca:	f7ec fd15 	bl	80005f8 <__aeabi_dmul>
 8013bce:	4602      	mov	r2, r0
 8013bd0:	460b      	mov	r3, r1
 8013bd2:	ec51 0b19 	vmov	r0, r1, d9
 8013bd6:	f7ec fb57 	bl	8000288 <__aeabi_dsub>
 8013bda:	4652      	mov	r2, sl
 8013bdc:	465b      	mov	r3, fp
 8013bde:	f7ec fd0b 	bl	80005f8 <__aeabi_dmul>
 8013be2:	ec53 2b18 	vmov	r2, r3, d8
 8013be6:	f7ec fb4f 	bl	8000288 <__aeabi_dsub>
 8013bea:	a30b      	add	r3, pc, #44	; (adr r3, 8013c18 <__kernel_sin+0x148>)
 8013bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf0:	4606      	mov	r6, r0
 8013bf2:	460f      	mov	r7, r1
 8013bf4:	4640      	mov	r0, r8
 8013bf6:	4649      	mov	r1, r9
 8013bf8:	f7ec fcfe 	bl	80005f8 <__aeabi_dmul>
 8013bfc:	4602      	mov	r2, r0
 8013bfe:	460b      	mov	r3, r1
 8013c00:	4630      	mov	r0, r6
 8013c02:	4639      	mov	r1, r7
 8013c04:	f7ec fb42 	bl	800028c <__adddf3>
 8013c08:	4602      	mov	r2, r0
 8013c0a:	460b      	mov	r3, r1
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	4629      	mov	r1, r5
 8013c10:	f7ec fb3a 	bl	8000288 <__aeabi_dsub>
 8013c14:	e7c4      	b.n	8013ba0 <__kernel_sin+0xd0>
 8013c16:	bf00      	nop
 8013c18:	55555549 	.word	0x55555549
 8013c1c:	3fc55555 	.word	0x3fc55555
 8013c20:	3fe00000 	.word	0x3fe00000
 8013c24:	5acfd57c 	.word	0x5acfd57c
 8013c28:	3de5d93a 	.word	0x3de5d93a
 8013c2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013c30:	3e5ae5e6 	.word	0x3e5ae5e6
 8013c34:	57b1fe7d 	.word	0x57b1fe7d
 8013c38:	3ec71de3 	.word	0x3ec71de3
 8013c3c:	19c161d5 	.word	0x19c161d5
 8013c40:	3f2a01a0 	.word	0x3f2a01a0
 8013c44:	1110f8a6 	.word	0x1110f8a6
 8013c48:	3f811111 	.word	0x3f811111

08013c4c <fabs>:
 8013c4c:	ec51 0b10 	vmov	r0, r1, d0
 8013c50:	ee10 2a10 	vmov	r2, s0
 8013c54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013c58:	ec43 2b10 	vmov	d0, r2, r3
 8013c5c:	4770      	bx	lr
	...

08013c60 <floor>:
 8013c60:	ec51 0b10 	vmov	r0, r1, d0
 8013c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013c6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013c70:	2e13      	cmp	r6, #19
 8013c72:	ee10 5a10 	vmov	r5, s0
 8013c76:	ee10 8a10 	vmov	r8, s0
 8013c7a:	460c      	mov	r4, r1
 8013c7c:	dc32      	bgt.n	8013ce4 <floor+0x84>
 8013c7e:	2e00      	cmp	r6, #0
 8013c80:	da14      	bge.n	8013cac <floor+0x4c>
 8013c82:	a333      	add	r3, pc, #204	; (adr r3, 8013d50 <floor+0xf0>)
 8013c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c88:	f7ec fb00 	bl	800028c <__adddf3>
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	2300      	movs	r3, #0
 8013c90:	f7ec ff42 	bl	8000b18 <__aeabi_dcmpgt>
 8013c94:	b138      	cbz	r0, 8013ca6 <floor+0x46>
 8013c96:	2c00      	cmp	r4, #0
 8013c98:	da57      	bge.n	8013d4a <floor+0xea>
 8013c9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013c9e:	431d      	orrs	r5, r3
 8013ca0:	d001      	beq.n	8013ca6 <floor+0x46>
 8013ca2:	4c2d      	ldr	r4, [pc, #180]	; (8013d58 <floor+0xf8>)
 8013ca4:	2500      	movs	r5, #0
 8013ca6:	4621      	mov	r1, r4
 8013ca8:	4628      	mov	r0, r5
 8013caa:	e025      	b.n	8013cf8 <floor+0x98>
 8013cac:	4f2b      	ldr	r7, [pc, #172]	; (8013d5c <floor+0xfc>)
 8013cae:	4137      	asrs	r7, r6
 8013cb0:	ea01 0307 	and.w	r3, r1, r7
 8013cb4:	4303      	orrs	r3, r0
 8013cb6:	d01f      	beq.n	8013cf8 <floor+0x98>
 8013cb8:	a325      	add	r3, pc, #148	; (adr r3, 8013d50 <floor+0xf0>)
 8013cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cbe:	f7ec fae5 	bl	800028c <__adddf3>
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	f7ec ff27 	bl	8000b18 <__aeabi_dcmpgt>
 8013cca:	2800      	cmp	r0, #0
 8013ccc:	d0eb      	beq.n	8013ca6 <floor+0x46>
 8013cce:	2c00      	cmp	r4, #0
 8013cd0:	bfbe      	ittt	lt
 8013cd2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013cd6:	fa43 f606 	asrlt.w	r6, r3, r6
 8013cda:	19a4      	addlt	r4, r4, r6
 8013cdc:	ea24 0407 	bic.w	r4, r4, r7
 8013ce0:	2500      	movs	r5, #0
 8013ce2:	e7e0      	b.n	8013ca6 <floor+0x46>
 8013ce4:	2e33      	cmp	r6, #51	; 0x33
 8013ce6:	dd0b      	ble.n	8013d00 <floor+0xa0>
 8013ce8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013cec:	d104      	bne.n	8013cf8 <floor+0x98>
 8013cee:	ee10 2a10 	vmov	r2, s0
 8013cf2:	460b      	mov	r3, r1
 8013cf4:	f7ec faca 	bl	800028c <__adddf3>
 8013cf8:	ec41 0b10 	vmov	d0, r0, r1
 8013cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d00:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013d04:	f04f 33ff 	mov.w	r3, #4294967295
 8013d08:	fa23 f707 	lsr.w	r7, r3, r7
 8013d0c:	4207      	tst	r7, r0
 8013d0e:	d0f3      	beq.n	8013cf8 <floor+0x98>
 8013d10:	a30f      	add	r3, pc, #60	; (adr r3, 8013d50 <floor+0xf0>)
 8013d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d16:	f7ec fab9 	bl	800028c <__adddf3>
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	f7ec fefb 	bl	8000b18 <__aeabi_dcmpgt>
 8013d22:	2800      	cmp	r0, #0
 8013d24:	d0bf      	beq.n	8013ca6 <floor+0x46>
 8013d26:	2c00      	cmp	r4, #0
 8013d28:	da02      	bge.n	8013d30 <floor+0xd0>
 8013d2a:	2e14      	cmp	r6, #20
 8013d2c:	d103      	bne.n	8013d36 <floor+0xd6>
 8013d2e:	3401      	adds	r4, #1
 8013d30:	ea25 0507 	bic.w	r5, r5, r7
 8013d34:	e7b7      	b.n	8013ca6 <floor+0x46>
 8013d36:	2301      	movs	r3, #1
 8013d38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013d3c:	fa03 f606 	lsl.w	r6, r3, r6
 8013d40:	4435      	add	r5, r6
 8013d42:	4545      	cmp	r5, r8
 8013d44:	bf38      	it	cc
 8013d46:	18e4      	addcc	r4, r4, r3
 8013d48:	e7f2      	b.n	8013d30 <floor+0xd0>
 8013d4a:	2500      	movs	r5, #0
 8013d4c:	462c      	mov	r4, r5
 8013d4e:	e7aa      	b.n	8013ca6 <floor+0x46>
 8013d50:	8800759c 	.word	0x8800759c
 8013d54:	7e37e43c 	.word	0x7e37e43c
 8013d58:	bff00000 	.word	0xbff00000
 8013d5c:	000fffff 	.word	0x000fffff

08013d60 <scalbn>:
 8013d60:	b570      	push	{r4, r5, r6, lr}
 8013d62:	ec55 4b10 	vmov	r4, r5, d0
 8013d66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013d6a:	4606      	mov	r6, r0
 8013d6c:	462b      	mov	r3, r5
 8013d6e:	b99a      	cbnz	r2, 8013d98 <scalbn+0x38>
 8013d70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013d74:	4323      	orrs	r3, r4
 8013d76:	d036      	beq.n	8013de6 <scalbn+0x86>
 8013d78:	4b39      	ldr	r3, [pc, #228]	; (8013e60 <scalbn+0x100>)
 8013d7a:	4629      	mov	r1, r5
 8013d7c:	ee10 0a10 	vmov	r0, s0
 8013d80:	2200      	movs	r2, #0
 8013d82:	f7ec fc39 	bl	80005f8 <__aeabi_dmul>
 8013d86:	4b37      	ldr	r3, [pc, #220]	; (8013e64 <scalbn+0x104>)
 8013d88:	429e      	cmp	r6, r3
 8013d8a:	4604      	mov	r4, r0
 8013d8c:	460d      	mov	r5, r1
 8013d8e:	da10      	bge.n	8013db2 <scalbn+0x52>
 8013d90:	a32b      	add	r3, pc, #172	; (adr r3, 8013e40 <scalbn+0xe0>)
 8013d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d96:	e03a      	b.n	8013e0e <scalbn+0xae>
 8013d98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013d9c:	428a      	cmp	r2, r1
 8013d9e:	d10c      	bne.n	8013dba <scalbn+0x5a>
 8013da0:	ee10 2a10 	vmov	r2, s0
 8013da4:	4620      	mov	r0, r4
 8013da6:	4629      	mov	r1, r5
 8013da8:	f7ec fa70 	bl	800028c <__adddf3>
 8013dac:	4604      	mov	r4, r0
 8013dae:	460d      	mov	r5, r1
 8013db0:	e019      	b.n	8013de6 <scalbn+0x86>
 8013db2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013db6:	460b      	mov	r3, r1
 8013db8:	3a36      	subs	r2, #54	; 0x36
 8013dba:	4432      	add	r2, r6
 8013dbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013dc0:	428a      	cmp	r2, r1
 8013dc2:	dd08      	ble.n	8013dd6 <scalbn+0x76>
 8013dc4:	2d00      	cmp	r5, #0
 8013dc6:	a120      	add	r1, pc, #128	; (adr r1, 8013e48 <scalbn+0xe8>)
 8013dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dcc:	da1c      	bge.n	8013e08 <scalbn+0xa8>
 8013dce:	a120      	add	r1, pc, #128	; (adr r1, 8013e50 <scalbn+0xf0>)
 8013dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dd4:	e018      	b.n	8013e08 <scalbn+0xa8>
 8013dd6:	2a00      	cmp	r2, #0
 8013dd8:	dd08      	ble.n	8013dec <scalbn+0x8c>
 8013dda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013dde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013de2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013de6:	ec45 4b10 	vmov	d0, r4, r5
 8013dea:	bd70      	pop	{r4, r5, r6, pc}
 8013dec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013df0:	da19      	bge.n	8013e26 <scalbn+0xc6>
 8013df2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013df6:	429e      	cmp	r6, r3
 8013df8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013dfc:	dd0a      	ble.n	8013e14 <scalbn+0xb4>
 8013dfe:	a112      	add	r1, pc, #72	; (adr r1, 8013e48 <scalbn+0xe8>)
 8013e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d1e2      	bne.n	8013dce <scalbn+0x6e>
 8013e08:	a30f      	add	r3, pc, #60	; (adr r3, 8013e48 <scalbn+0xe8>)
 8013e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0e:	f7ec fbf3 	bl	80005f8 <__aeabi_dmul>
 8013e12:	e7cb      	b.n	8013dac <scalbn+0x4c>
 8013e14:	a10a      	add	r1, pc, #40	; (adr r1, 8013e40 <scalbn+0xe0>)
 8013e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d0b8      	beq.n	8013d90 <scalbn+0x30>
 8013e1e:	a10e      	add	r1, pc, #56	; (adr r1, 8013e58 <scalbn+0xf8>)
 8013e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e24:	e7b4      	b.n	8013d90 <scalbn+0x30>
 8013e26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013e2a:	3236      	adds	r2, #54	; 0x36
 8013e2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013e30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013e34:	4620      	mov	r0, r4
 8013e36:	4b0c      	ldr	r3, [pc, #48]	; (8013e68 <scalbn+0x108>)
 8013e38:	2200      	movs	r2, #0
 8013e3a:	e7e8      	b.n	8013e0e <scalbn+0xae>
 8013e3c:	f3af 8000 	nop.w
 8013e40:	c2f8f359 	.word	0xc2f8f359
 8013e44:	01a56e1f 	.word	0x01a56e1f
 8013e48:	8800759c 	.word	0x8800759c
 8013e4c:	7e37e43c 	.word	0x7e37e43c
 8013e50:	8800759c 	.word	0x8800759c
 8013e54:	fe37e43c 	.word	0xfe37e43c
 8013e58:	c2f8f359 	.word	0xc2f8f359
 8013e5c:	81a56e1f 	.word	0x81a56e1f
 8013e60:	43500000 	.word	0x43500000
 8013e64:	ffff3cb0 	.word	0xffff3cb0
 8013e68:	3c900000 	.word	0x3c900000

08013e6c <_init>:
 8013e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e6e:	bf00      	nop
 8013e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e72:	bc08      	pop	{r3}
 8013e74:	469e      	mov	lr, r3
 8013e76:	4770      	bx	lr

08013e78 <_fini>:
 8013e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e7a:	bf00      	nop
 8013e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e7e:	bc08      	pop	{r3}
 8013e80:	469e      	mov	lr, r3
 8013e82:	4770      	bx	lr
